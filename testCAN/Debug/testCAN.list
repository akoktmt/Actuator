
testCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e7c  08002e7c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e7c  08002e7c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e7c  08002e7c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e80  08002e80  00012e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000005c  08002ee0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08002ee0  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085f9  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000175b  00000000  00000000  000286c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  00029e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c6  00000000  00000000  0002a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017134  00000000  00000000  0002ab7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e1e  00000000  00000000  00041cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000847e2  00000000  00000000  0004aad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000234c  00000000  00000000  000cf2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000d1600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dec 	.word	0x08002dec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002dec 	.word	0x08002dec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb29 	bl	80007b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f819 	bl	800019c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8bd 	bl	80002e8 <MX_GPIO_Init>
  MX_CAN_Init();
 800016e:	f000 f85b 	bl	8000228 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f88f 	bl	8000294 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering();
 8000176:	f000 f945 	bl	8000404 <CAN_Config_filtering>
  HAL_CAN_Start(&hcan);
 800017a:	4806      	ldr	r0, [pc, #24]	; (8000194 <main+0x38>)
 800017c:	f000 fd42 	bl	8000c04 <HAL_CAN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t Data[5]={'H','E','L','L','O'};
 8000180:	4a05      	ldr	r2, [pc, #20]	; (8000198 <main+0x3c>)
 8000182:	463b      	mov	r3, r7
 8000184:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000188:	6018      	str	r0, [r3, #0]
 800018a:	3304      	adds	r3, #4
 800018c:	7019      	strb	r1, [r3, #0]
  //isotp_user_send_can(0x65, Data, 8);
  CAN_RecData();
 800018e:	f000 f903 	bl	8000398 <CAN_RecData>
  while (1)
 8000192:	e7fe      	b.n	8000192 <main+0x36>
 8000194:	20000078 	.word	0x20000078
 8000198:	08002e04 	.word	0x08002e04

0800019c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b090      	sub	sp, #64	; 0x40
 80001a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a2:	f107 0318 	add.w	r3, r7, #24
 80001a6:	2228      	movs	r2, #40	; 0x28
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f002 f98c 	bl	80024c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]
 80001bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001be:	2301      	movs	r3, #1
 80001c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c8:	2300      	movs	r3, #0
 80001ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001cc:	2301      	movs	r3, #1
 80001ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d0:	2302      	movs	r3, #2
 80001d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e0:	f107 0318 	add.w	r3, r7, #24
 80001e4:	4618      	mov	r0, r3
 80001e6:	f001 fb6f 	bl	80018c8 <HAL_RCC_OscConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001f0:	f000 f92e 	bl	8000450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f4:	230f      	movs	r3, #15
 80001f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f8:	2302      	movs	r3, #2
 80001fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	2102      	movs	r1, #2
 800020e:	4618      	mov	r0, r3
 8000210:	f001 fddc 	bl	8001dcc <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800021a:	f000 f919 	bl	8000450 <Error_Handler>
  }
}
 800021e:	bf00      	nop
 8000220:	3740      	adds	r7, #64	; 0x40
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800022c:	4b17      	ldr	r3, [pc, #92]	; (800028c <MX_CAN_Init+0x64>)
 800022e:	4a18      	ldr	r2, [pc, #96]	; (8000290 <MX_CAN_Init+0x68>)
 8000230:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <MX_CAN_Init+0x64>)
 8000234:	2204      	movs	r2, #4
 8000236:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000238:	4b14      	ldr	r3, [pc, #80]	; (800028c <MX_CAN_Init+0x64>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800023e:	4b13      	ldr	r3, [pc, #76]	; (800028c <MX_CAN_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <MX_CAN_Init+0x64>)
 8000246:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800024a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <MX_CAN_Init+0x64>)
 800024e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000252:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <MX_CAN_Init+0x64>)
 8000256:	2200      	movs	r2, #0
 8000258:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_CAN_Init+0x64>)
 800025c:	2200      	movs	r2, #0
 800025e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <MX_CAN_Init+0x64>)
 8000262:	2200      	movs	r2, #0
 8000264:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <MX_CAN_Init+0x64>)
 8000268:	2200      	movs	r2, #0
 800026a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <MX_CAN_Init+0x64>)
 800026e:	2200      	movs	r2, #0
 8000270:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <MX_CAN_Init+0x64>)
 8000274:	2200      	movs	r2, #0
 8000276:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <MX_CAN_Init+0x64>)
 800027a:	f000 faff 	bl	800087c <HAL_CAN_Init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000284:	f000 f8e4 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000078 	.word	0x20000078
 8000290:	40006400 	.word	0x40006400

08000294 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_USART2_UART_Init+0x4c>)
 800029a:	4a12      	ldr	r2, [pc, #72]	; (80002e4 <MX_USART2_UART_Init+0x50>)
 800029c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800029e:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002ba:	220c      	movs	r2, #12
 80002bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002cc:	f001 ff0c 	bl	80020e8 <HAL_UART_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002d6:	f000 f8bb 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	200000a0 	.word	0x200000a0
 80002e4:	40004400 	.word	0x40004400

080002e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <MX_GPIO_Init+0xa8>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a23      	ldr	r2, [pc, #140]	; (8000390 <MX_GPIO_Init+0xa8>)
 8000302:	f043 0310 	orr.w	r3, r3, #16
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b21      	ldr	r3, [pc, #132]	; (8000390 <MX_GPIO_Init+0xa8>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000314:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <MX_GPIO_Init+0xa8>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a1d      	ldr	r2, [pc, #116]	; (8000390 <MX_GPIO_Init+0xa8>)
 800031a:	f043 0320 	orr.w	r3, r3, #32
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <MX_GPIO_Init+0xa8>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0320 	and.w	r3, r3, #32
 8000328:	60bb      	str	r3, [r7, #8]
 800032a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <MX_GPIO_Init+0xa8>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a17      	ldr	r2, [pc, #92]	; (8000390 <MX_GPIO_Init+0xa8>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MX_GPIO_Init+0xa8>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <MX_GPIO_Init+0xa8>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a11      	ldr	r2, [pc, #68]	; (8000390 <MX_GPIO_Init+0xa8>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_GPIO_Init+0xa8>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0308 	and.w	r3, r3, #8
 8000358:	603b      	str	r3, [r7, #0]
 800035a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000362:	480c      	ldr	r0, [pc, #48]	; (8000394 <MX_GPIO_Init+0xac>)
 8000364:	f001 fa98 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800036c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036e:	2301      	movs	r3, #1
 8000370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000376:	2302      	movs	r3, #2
 8000378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	4619      	mov	r1, r3
 8000380:	4804      	ldr	r0, [pc, #16]	; (8000394 <MX_GPIO_Init+0xac>)
 8000382:	f001 f905 	bl	8001590 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000386:	bf00      	nop
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	40011000 	.word	0x40011000

08000398 <CAN_RecData>:
	}
	while(HAL_CAN_IsTxMessagePending(&hcan, TxMailbox));
  }

void CAN_RecData(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b096      	sub	sp, #88	; 0x58
 800039c:	af00      	add	r7, sp, #0
	char msg[50];
	CAN_RxHeaderTypeDef Rx_Header;
	uint8_t rcData[5];
	while(!HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0));
 800039e:	bf00      	nop
 80003a0:	2100      	movs	r1, #0
 80003a2:	4815      	ldr	r0, [pc, #84]	; (80003f8 <CAN_RecData+0x60>)
 80003a4:	f000 fd93 	bl	8000ece <HAL_CAN_GetRxFifoFillLevel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0f8      	beq.n	80003a0 <CAN_RecData+0x8>
	if(HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &Rx_Header, rcData)!=HAL_OK){
 80003ae:	463b      	mov	r3, r7
 80003b0:	f107 0208 	add.w	r2, r7, #8
 80003b4:	2100      	movs	r1, #0
 80003b6:	4810      	ldr	r0, [pc, #64]	; (80003f8 <CAN_RecData+0x60>)
 80003b8:	f000 fc68 	bl	8000c8c <HAL_CAN_GetRxMessage>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <CAN_RecData+0x2e>
		Error_Handler();
 80003c2:	f000 f845 	bl	8000450 <Error_Handler>
	}
	sprintf(msg," Mess : %s\r\n",rcData);
 80003c6:	463a      	mov	r2, r7
 80003c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003cc:	490b      	ldr	r1, [pc, #44]	; (80003fc <CAN_RecData+0x64>)
 80003ce:	4618      	mov	r0, r3
 80003d0:	f002 f85a 	bl	8002488 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80003d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff feb7 	bl	800014c <strlen>
 80003de:	4603      	mov	r3, r0
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <CAN_RecData+0x68>)
 80003ec:	f001 fecc 	bl	8002188 <HAL_UART_Transmit>
}
 80003f0:	bf00      	nop
 80003f2:	3758      	adds	r7, #88	; 0x58
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000078 	.word	0x20000078
 80003fc:	08002e0c 	.word	0x08002e0c
 8000400:	200000a0 	.word	0x200000a0

08000404 <CAN_Config_filtering>:
uint32_t CAN_Config_filtering(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	; 0x28
 8000408:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation=ENABLE;
 800040a:	2301      	movs	r3, #1
 800040c:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterBank=0;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdHigh=0x0000;
 8000416:	2300      	movs	r3, #0
 8000418:	603b      	str	r3, [r7, #0]
	Can_filter_init.FilterIdLow= 0x0000;
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
	Can_filter_init.FilterMaskIdHigh= 0x0000;
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterMaskIdLow= 0x0000;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 8000426:	2300      	movs	r3, #0
 8000428:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 800042a:	2301      	movs	r3, #1
 800042c:	61fb      	str	r3, [r7, #28]
	if(HAL_CAN_ConfigFilter(&hcan,&Can_filter_init)!=HAL_OK)
 800042e:	463b      	mov	r3, r7
 8000430:	4619      	mov	r1, r3
 8000432:	4806      	ldr	r0, [pc, #24]	; (800044c <CAN_Config_filtering+0x48>)
 8000434:	f000 fb1d 	bl	8000a72 <HAL_CAN_ConfigFilter>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <CAN_Config_filtering+0x3e>
	{
		Error_Handler();
 800043e:	f000 f807 	bl	8000450 <Error_Handler>
	}
	return HAL_OK;
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	3728      	adds	r7, #40	; 0x28
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000078 	.word	0x20000078

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000458:	e7fe      	b.n	8000458 <Error_Handler+0x8>
	...

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <HAL_MspInit+0x5c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <HAL_MspInit+0x5c>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <HAL_MspInit+0x5c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_MspInit+0x5c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <HAL_MspInit+0x5c>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_MspInit+0x5c>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_MspInit+0x60>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <HAL_MspInit+0x60>)
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000

080004c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a35      	ldr	r2, [pc, #212]	; (80005b0 <HAL_CAN_MspInit+0xf0>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d163      	bne.n	80005a8 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004e0:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <HAL_CAN_MspInit+0xf4>)
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	4a33      	ldr	r2, [pc, #204]	; (80005b4 <HAL_CAN_MspInit+0xf4>)
 80004e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ea:	61d3      	str	r3, [r2, #28]
 80004ec:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <HAL_CAN_MspInit+0xf4>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004f4:	613b      	str	r3, [r7, #16]
 80004f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f8:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <HAL_CAN_MspInit+0xf4>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a2d      	ldr	r2, [pc, #180]	; (80005b4 <HAL_CAN_MspInit+0xf4>)
 80004fe:	f043 0308 	orr.w	r3, r3, #8
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <HAL_CAN_MspInit+0xf4>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0308 	and.w	r3, r3, #8
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000516:	2300      	movs	r3, #0
 8000518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	4619      	mov	r1, r3
 8000524:	4824      	ldr	r0, [pc, #144]	; (80005b8 <HAL_CAN_MspInit+0xf8>)
 8000526:	f001 f833 	bl	8001590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800052a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800052e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000530:	2302      	movs	r3, #2
 8000532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000534:	2303      	movs	r3, #3
 8000536:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	4619      	mov	r1, r3
 800053e:	481e      	ldr	r0, [pc, #120]	; (80005b8 <HAL_CAN_MspInit+0xf8>)
 8000540:	f001 f826 	bl	8001590 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000544:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <HAL_CAN_MspInit+0xfc>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
 800054a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800054c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
 8000552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000554:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
 800055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
 8000562:	4a16      	ldr	r2, [pc, #88]	; (80005bc <HAL_CAN_MspInit+0xfc>)
 8000564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000566:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2100      	movs	r1, #0
 800056c:	2013      	movs	r0, #19
 800056e:	f000 ffd8 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000572:	2013      	movs	r0, #19
 8000574:	f000 fff1 	bl	800155a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	2100      	movs	r1, #0
 800057c:	2014      	movs	r0, #20
 800057e:	f000 ffd0 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000582:	2014      	movs	r0, #20
 8000584:	f000 ffe9 	bl	800155a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2100      	movs	r1, #0
 800058c:	2015      	movs	r0, #21
 800058e:	f000 ffc8 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000592:	2015      	movs	r0, #21
 8000594:	f000 ffe1 	bl	800155a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	2016      	movs	r0, #22
 800059e:	f000 ffc0 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80005a2:	2016      	movs	r0, #22
 80005a4:	f000 ffd9 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005a8:	bf00      	nop
 80005aa:	3728      	adds	r7, #40	; 0x28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40006400 	.word	0x40006400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010c00 	.word	0x40010c00
 80005bc:	40010000 	.word	0x40010000

080005c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <HAL_UART_MspInit+0x88>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d12f      	bne.n	8000640 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_UART_MspInit+0x8c>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	4a19      	ldr	r2, [pc, #100]	; (800064c <HAL_UART_MspInit+0x8c>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	61d3      	str	r3, [r2, #28]
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_UART_MspInit+0x8c>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_UART_MspInit+0x8c>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a13      	ldr	r2, [pc, #76]	; (800064c <HAL_UART_MspInit+0x8c>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_UART_MspInit+0x8c>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000610:	2304      	movs	r3, #4
 8000612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000618:	2303      	movs	r3, #3
 800061a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <HAL_UART_MspInit+0x90>)
 8000624:	f000 ffb4 	bl	8001590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000628:	2308      	movs	r3, #8
 800062a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4619      	mov	r1, r3
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <HAL_UART_MspInit+0x90>)
 800063c:	f000 ffa8 	bl	8001590 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40004400 	.word	0x40004400
 800064c:	40021000 	.word	0x40021000
 8000650:	40010800 	.word	0x40010800

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069a:	f000 f8d3 	bl	8000844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80006aa:	f000 fc37 	bl	8000f1c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000078 	.word	0x20000078

080006b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006be:	f000 fc2d 	bl	8000f1c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000078 	.word	0x20000078

080006cc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <CAN1_RX1_IRQHandler+0x10>)
 80006d2:	f000 fc23 	bl	8000f1c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000078 	.word	0x20000078

080006e0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <CAN1_SCE_IRQHandler+0x10>)
 80006e6:	f000 fc19 	bl	8000f1c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000078 	.word	0x20000078

080006f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006fc:	4a14      	ldr	r2, [pc, #80]	; (8000750 <_sbrk+0x5c>)
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <_sbrk+0x60>)
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <_sbrk+0x64>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d102      	bne.n	8000716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <_sbrk+0x64>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <_sbrk+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <_sbrk+0x64>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	429a      	cmp	r2, r3
 8000722:	d207      	bcs.n	8000734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000724:	f001 fed8 	bl	80024d8 <__errno>
 8000728:	4603      	mov	r3, r0
 800072a:	220c      	movs	r2, #12
 800072c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	e009      	b.n	8000748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <_sbrk+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <_sbrk+0x64>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <_sbrk+0x64>)
 8000744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20005000 	.word	0x20005000
 8000754:	00000400 	.word	0x00000400
 8000758:	200000e8 	.word	0x200000e8
 800075c:	20000238 	.word	0x20000238

08000760 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800076c:	f7ff fff8 	bl	8000760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000772:	490c      	ldr	r1, [pc, #48]	; (80007a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000774:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a09      	ldr	r2, [pc, #36]	; (80007ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000788:	4c09      	ldr	r4, [pc, #36]	; (80007b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000796:	f001 fea5 	bl	80024e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800079a:	f7ff fcdf 	bl	800015c <main>
  bx lr
 800079e:	4770      	bx	lr
  ldr r0, =_sdata
 80007a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007a8:	08002e84 	.word	0x08002e84
  ldr r2, =_sbss
 80007ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007b0:	20000238 	.word	0x20000238

080007b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b4:	e7fe      	b.n	80007b4 <ADC1_2_IRQHandler>
	...

080007b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_Init+0x28>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <HAL_Init+0x28>)
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 fe9f 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ce:	200f      	movs	r0, #15
 80007d0:	f000 f808 	bl	80007e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d4:	f7ff fe42 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40022000 	.word	0x40022000

080007e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_InitTick+0x54>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_InitTick+0x58>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 feb7 	bl	8001576 <HAL_SYSTICK_Config>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e00e      	b.n	8000830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d80a      	bhi.n	800082e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000818:	2200      	movs	r2, #0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f000 fe7f 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <HAL_InitTick+0x5c>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082a:	2300      	movs	r3, #0
 800082c:	e000      	b.n	8000830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000000 	.word	0x20000000
 800083c:	20000008 	.word	0x20000008
 8000840:	20000004 	.word	0x20000004

08000844 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_IncTick+0x1c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_IncTick+0x20>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4413      	add	r3, r2
 8000854:	4a03      	ldr	r2, [pc, #12]	; (8000864 <HAL_IncTick+0x20>)
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	20000008 	.word	0x20000008
 8000864:	200000ec 	.word	0x200000ec

08000868 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return uwTick;
 800086c:	4b02      	ldr	r3, [pc, #8]	; (8000878 <HAL_GetTick+0x10>)
 800086e:	681b      	ldr	r3, [r3, #0]
}
 8000870:	4618      	mov	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	200000ec 	.word	0x200000ec

0800087c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d101      	bne.n	800088e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e0ed      	b.n	8000a6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	d102      	bne.n	80008a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff fe10 	bl	80004c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f042 0201 	orr.w	r2, r2, #1
 80008ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008b0:	f7ff ffda 	bl	8000868 <HAL_GetTick>
 80008b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008b6:	e012      	b.n	80008de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008b8:	f7ff ffd6 	bl	8000868 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2b0a      	cmp	r3, #10
 80008c4:	d90b      	bls.n	80008de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2205      	movs	r2, #5
 80008d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e0c5      	b.n	8000a6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0e5      	beq.n	80008b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f022 0202 	bic.w	r2, r2, #2
 80008fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008fc:	f7ff ffb4 	bl	8000868 <HAL_GetTick>
 8000900:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000902:	e012      	b.n	800092a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000904:	f7ff ffb0 	bl	8000868 <HAL_GetTick>
 8000908:	4602      	mov	r2, r0
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	2b0a      	cmp	r3, #10
 8000910:	d90b      	bls.n	800092a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2205      	movs	r2, #5
 8000922:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e09f      	b.n	8000a6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0302 	and.w	r3, r3, #2
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1e5      	bne.n	8000904 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7e1b      	ldrb	r3, [r3, #24]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d108      	bne.n	8000952 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	e007      	b.n	8000962 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7e5b      	ldrb	r3, [r3, #25]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d108      	bne.n	800097c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	e007      	b.n	800098c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800098a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7e9b      	ldrb	r3, [r3, #26]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d108      	bne.n	80009a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f042 0220 	orr.w	r2, r2, #32
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	e007      	b.n	80009b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f022 0220 	bic.w	r2, r2, #32
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7edb      	ldrb	r3, [r3, #27]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d108      	bne.n	80009d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 0210 	bic.w	r2, r2, #16
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e007      	b.n	80009e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f042 0210 	orr.w	r2, r2, #16
 80009de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7f1b      	ldrb	r3, [r3, #28]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d108      	bne.n	80009fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0208 	orr.w	r2, r2, #8
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	e007      	b.n	8000a0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f022 0208 	bic.w	r2, r2, #8
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7f5b      	ldrb	r3, [r3, #29]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d108      	bne.n	8000a24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f042 0204 	orr.w	r2, r2, #4
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	e007      	b.n	8000a34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f022 0204 	bic.w	r2, r2, #4
 8000a32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	431a      	orrs	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	ea42 0103 	orr.w	r1, r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	1e5a      	subs	r2, r3, #1
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	430a      	orrs	r2, r1
 8000a58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2201      	movs	r2, #1
 8000a64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b087      	sub	sp, #28
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a88:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a8a:	7cfb      	ldrb	r3, [r7, #19]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d003      	beq.n	8000a98 <HAL_CAN_ConfigFilter+0x26>
 8000a90:	7cfb      	ldrb	r3, [r7, #19]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	f040 80aa 	bne.w	8000bec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a9e:	f043 0201 	orr.w	r2, r3, #1
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	f003 031f 	and.w	r3, r3, #31
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d123      	bne.n	8000b1a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	401a      	ands	r2, r3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000af4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3248      	adds	r2, #72	; 0x48
 8000afa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b10:	6979      	ldr	r1, [r7, #20]
 8000b12:	3348      	adds	r3, #72	; 0x48
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	440b      	add	r3, r1
 8000b18:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d122      	bne.n	8000b68 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3248      	adds	r2, #72	; 0x48
 8000b48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b5e:	6979      	ldr	r1, [r7, #20]
 8000b60:	3348      	adds	r3, #72	; 0x48
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	440b      	add	r3, r1
 8000b66:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d109      	bne.n	8000b84 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000b82:	e007      	b.n	8000b94 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d109      	bne.n	8000bb0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000bae:	e007      	b.n	8000bc0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	6a1b      	ldr	r3, [r3, #32]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d107      	bne.n	8000bd8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bde:	f023 0201 	bic.w	r2, r3, #1
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	e006      	b.n	8000bfa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
  }
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	371c      	adds	r7, #28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d12e      	bne.n	8000c76 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f022 0201 	bic.w	r2, r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c30:	f7ff fe1a 	bl	8000868 <HAL_GetTick>
 8000c34:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c36:	e012      	b.n	8000c5e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c38:	f7ff fe16 	bl	8000868 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b0a      	cmp	r3, #10
 8000c44:	d90b      	bls.n	8000c5e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2205      	movs	r2, #5
 8000c56:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e012      	b.n	8000c84 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1e5      	bne.n	8000c38 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e006      	b.n	8000c84 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
  }
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ca2:	7dfb      	ldrb	r3, [r7, #23]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d003      	beq.n	8000cb0 <HAL_CAN_GetRxMessage+0x24>
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	f040 8103 	bne.w	8000eb6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10e      	bne.n	8000cd4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d116      	bne.n	8000cf2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e0f7      	b.n	8000ec4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d107      	bne.n	8000cf2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e0e8      	b.n	8000ec4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	331b      	adds	r3, #27
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	4413      	add	r3, r2
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0204 	and.w	r2, r3, #4
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10c      	bne.n	8000d2a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	331b      	adds	r3, #27
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	4413      	add	r3, r2
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	0d5b      	lsrs	r3, r3, #21
 8000d20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	e00b      	b.n	8000d42 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	331b      	adds	r3, #27
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	4413      	add	r3, r2
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	08db      	lsrs	r3, r3, #3
 8000d3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	331b      	adds	r3, #27
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	4413      	add	r3, r2
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0202 	and.w	r2, r3, #2
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	331b      	adds	r3, #27
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	4413      	add	r3, r2
 8000d64:	3304      	adds	r3, #4
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2208      	movs	r2, #8
 8000d74:	611a      	str	r2, [r3, #16]
 8000d76:	e00b      	b.n	8000d90 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	331b      	adds	r3, #27
 8000d80:	011b      	lsls	r3, r3, #4
 8000d82:	4413      	add	r3, r2
 8000d84:	3304      	adds	r3, #4
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 020f 	and.w	r2, r3, #15
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	331b      	adds	r3, #27
 8000d98:	011b      	lsls	r3, r3, #4
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	331b      	adds	r3, #27
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	4413      	add	r3, r2
 8000db4:	3304      	adds	r3, #4
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	0c1b      	lsrs	r3, r3, #16
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	4413      	add	r3, r2
 8000dca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	4413      	add	r3, r2
 8000de0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	0a1a      	lsrs	r2, r3, #8
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	4413      	add	r3, r2
 8000dfa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	0c1a      	lsrs	r2, r3, #16
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3302      	adds	r3, #2
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	4413      	add	r3, r2
 8000e14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	0e1a      	lsrs	r2, r3, #24
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	3303      	adds	r3, #3
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	3304      	adds	r3, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	4413      	add	r3, r2
 8000e46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	0a1a      	lsrs	r2, r3, #8
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	3305      	adds	r3, #5
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	4413      	add	r3, r2
 8000e60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	0c1a      	lsrs	r2, r3, #16
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	3306      	adds	r3, #6
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	4413      	add	r3, r2
 8000e7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0e1a      	lsrs	r2, r3, #24
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	3307      	adds	r3, #7
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d108      	bne.n	8000ea2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0220 	orr.w	r2, r2, #32
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	e007      	b.n	8000eb2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f042 0220 	orr.w	r2, r2, #32
 8000eb0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e006      	b.n	8000ec4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
  }
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	371c      	adds	r7, #28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ee4:	7afb      	ldrb	r3, [r7, #11]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d002      	beq.n	8000ef0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8000eea:	7afb      	ldrb	r3, [r7, #11]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d10f      	bne.n	8000f10 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d106      	bne.n	8000f04 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	e005      	b.n	8000f10 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8000f10:	68fb      	ldr	r3, [r7, #12]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d07c      	beq.n	800105c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d023      	beq.n	8000fb4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2201      	movs	r2, #1
 8000f72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f983 	bl	800128a <HAL_CAN_TxMailbox0CompleteCallback>
 8000f84:	e016      	b.n	8000fb4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
 8000f98:	e00c      	b.n	8000fb4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
 8000fac:	e002      	b.n	8000fb4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f986 	bl	80012c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d024      	beq.n	8001008 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f962 	bl	800129c <HAL_CAN_TxMailbox1CompleteCallback>
 8000fd8:	e016      	b.n	8001008 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d004      	beq.n	8000fee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
 8000fec:	e00c      	b.n	8001008 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8001000:	e002      	b.n	8001008 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f965 	bl	80012d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d024      	beq.n	800105c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800101a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f941 	bl	80012ae <HAL_CAN_TxMailbox2CompleteCallback>
 800102c:	e016      	b.n	800105c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
 8001040:	e00c      	b.n	800105c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
 8001054:	e002      	b.n	800105c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f944 	bl	80012e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00c      	beq.n	8001080 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	2b00      	cmp	r3, #0
 800106e:	d007      	beq.n	8001080 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2210      	movs	r2, #16
 800107e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2208      	movs	r2, #8
 800109a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f933 	bl	8001308 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d009      	beq.n	80010c0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f91b 	bl	80012f6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00c      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d007      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2210      	movs	r2, #16
 80010e2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	f003 0320 	and.w	r3, r3, #32
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00b      	beq.n	8001106 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2208      	movs	r2, #8
 80010fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f913 	bl	800132c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	f003 0310 	and.w	r3, r3, #16
 800110c:	2b00      	cmp	r3, #0
 800110e:	d009      	beq.n	8001124 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f8fb 	bl	800131a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00b      	beq.n	8001146 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2210      	movs	r2, #16
 800113e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f8fc 	bl	800133e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00b      	beq.n	8001168 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2208      	movs	r2, #8
 8001160:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f8f4 	bl	8001350 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d07b      	beq.n	800126a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b00      	cmp	r3, #0
 800117a:	d072      	beq.n	8001262 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d008      	beq.n	8001198 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d008      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d008      	beq.n	80011d0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d043      	beq.n	8001262 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d03e      	beq.n	8001262 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011ea:	2b60      	cmp	r3, #96	; 0x60
 80011ec:	d02b      	beq.n	8001246 <HAL_CAN_IRQHandler+0x32a>
 80011ee:	2b60      	cmp	r3, #96	; 0x60
 80011f0:	d82e      	bhi.n	8001250 <HAL_CAN_IRQHandler+0x334>
 80011f2:	2b50      	cmp	r3, #80	; 0x50
 80011f4:	d022      	beq.n	800123c <HAL_CAN_IRQHandler+0x320>
 80011f6:	2b50      	cmp	r3, #80	; 0x50
 80011f8:	d82a      	bhi.n	8001250 <HAL_CAN_IRQHandler+0x334>
 80011fa:	2b40      	cmp	r3, #64	; 0x40
 80011fc:	d019      	beq.n	8001232 <HAL_CAN_IRQHandler+0x316>
 80011fe:	2b40      	cmp	r3, #64	; 0x40
 8001200:	d826      	bhi.n	8001250 <HAL_CAN_IRQHandler+0x334>
 8001202:	2b30      	cmp	r3, #48	; 0x30
 8001204:	d010      	beq.n	8001228 <HAL_CAN_IRQHandler+0x30c>
 8001206:	2b30      	cmp	r3, #48	; 0x30
 8001208:	d822      	bhi.n	8001250 <HAL_CAN_IRQHandler+0x334>
 800120a:	2b10      	cmp	r3, #16
 800120c:	d002      	beq.n	8001214 <HAL_CAN_IRQHandler+0x2f8>
 800120e:	2b20      	cmp	r3, #32
 8001210:	d005      	beq.n	800121e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001212:	e01d      	b.n	8001250 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800121c:	e019      	b.n	8001252 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	f043 0310 	orr.w	r3, r3, #16
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001226:	e014      	b.n	8001252 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	f043 0320 	orr.w	r3, r3, #32
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001230:	e00f      	b.n	8001252 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800123a:	e00a      	b.n	8001252 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001244:	e005      	b.n	8001252 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800124e:	e000      	b.n	8001252 <HAL_CAN_IRQHandler+0x336>
            break;
 8001250:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	699a      	ldr	r2, [r3, #24]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001260:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2204      	movs	r2, #4
 8001268:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f870 	bl	8001362 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4906      	ldr	r1, [pc, #24]	; (800140c <__NVIC_EnableIRQ+0x34>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	; (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	; (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff90 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff2d 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff42 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff90 	bl	8001464 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5f 	bl	8001410 <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff35 	bl	80013d8 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa2 	bl	80014c8 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b480      	push	{r7}
 8001592:	b08b      	sub	sp, #44	; 0x2c
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a2:	e169      	b.n	8001878 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015a4:	2201      	movs	r2, #1
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	429a      	cmp	r2, r3
 80015be:	f040 8158 	bne.w	8001872 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4a9a      	ldr	r2, [pc, #616]	; (8001830 <HAL_GPIO_Init+0x2a0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d05e      	beq.n	800168a <HAL_GPIO_Init+0xfa>
 80015cc:	4a98      	ldr	r2, [pc, #608]	; (8001830 <HAL_GPIO_Init+0x2a0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d875      	bhi.n	80016be <HAL_GPIO_Init+0x12e>
 80015d2:	4a98      	ldr	r2, [pc, #608]	; (8001834 <HAL_GPIO_Init+0x2a4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d058      	beq.n	800168a <HAL_GPIO_Init+0xfa>
 80015d8:	4a96      	ldr	r2, [pc, #600]	; (8001834 <HAL_GPIO_Init+0x2a4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d86f      	bhi.n	80016be <HAL_GPIO_Init+0x12e>
 80015de:	4a96      	ldr	r2, [pc, #600]	; (8001838 <HAL_GPIO_Init+0x2a8>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d052      	beq.n	800168a <HAL_GPIO_Init+0xfa>
 80015e4:	4a94      	ldr	r2, [pc, #592]	; (8001838 <HAL_GPIO_Init+0x2a8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d869      	bhi.n	80016be <HAL_GPIO_Init+0x12e>
 80015ea:	4a94      	ldr	r2, [pc, #592]	; (800183c <HAL_GPIO_Init+0x2ac>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d04c      	beq.n	800168a <HAL_GPIO_Init+0xfa>
 80015f0:	4a92      	ldr	r2, [pc, #584]	; (800183c <HAL_GPIO_Init+0x2ac>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d863      	bhi.n	80016be <HAL_GPIO_Init+0x12e>
 80015f6:	4a92      	ldr	r2, [pc, #584]	; (8001840 <HAL_GPIO_Init+0x2b0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d046      	beq.n	800168a <HAL_GPIO_Init+0xfa>
 80015fc:	4a90      	ldr	r2, [pc, #576]	; (8001840 <HAL_GPIO_Init+0x2b0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d85d      	bhi.n	80016be <HAL_GPIO_Init+0x12e>
 8001602:	2b12      	cmp	r3, #18
 8001604:	d82a      	bhi.n	800165c <HAL_GPIO_Init+0xcc>
 8001606:	2b12      	cmp	r3, #18
 8001608:	d859      	bhi.n	80016be <HAL_GPIO_Init+0x12e>
 800160a:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <HAL_GPIO_Init+0x80>)
 800160c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001610:	0800168b 	.word	0x0800168b
 8001614:	08001665 	.word	0x08001665
 8001618:	08001677 	.word	0x08001677
 800161c:	080016b9 	.word	0x080016b9
 8001620:	080016bf 	.word	0x080016bf
 8001624:	080016bf 	.word	0x080016bf
 8001628:	080016bf 	.word	0x080016bf
 800162c:	080016bf 	.word	0x080016bf
 8001630:	080016bf 	.word	0x080016bf
 8001634:	080016bf 	.word	0x080016bf
 8001638:	080016bf 	.word	0x080016bf
 800163c:	080016bf 	.word	0x080016bf
 8001640:	080016bf 	.word	0x080016bf
 8001644:	080016bf 	.word	0x080016bf
 8001648:	080016bf 	.word	0x080016bf
 800164c:	080016bf 	.word	0x080016bf
 8001650:	080016bf 	.word	0x080016bf
 8001654:	0800166d 	.word	0x0800166d
 8001658:	08001681 	.word	0x08001681
 800165c:	4a79      	ldr	r2, [pc, #484]	; (8001844 <HAL_GPIO_Init+0x2b4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001662:	e02c      	b.n	80016be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	623b      	str	r3, [r7, #32]
          break;
 800166a:	e029      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	3304      	adds	r3, #4
 8001672:	623b      	str	r3, [r7, #32]
          break;
 8001674:	e024      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	3308      	adds	r3, #8
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e01f      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	330c      	adds	r3, #12
 8001686:	623b      	str	r3, [r7, #32]
          break;
 8001688:	e01a      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d102      	bne.n	8001698 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001692:	2304      	movs	r3, #4
 8001694:	623b      	str	r3, [r7, #32]
          break;
 8001696:	e013      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a0:	2308      	movs	r3, #8
 80016a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	611a      	str	r2, [r3, #16]
          break;
 80016aa:	e009      	b.n	80016c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ac:	2308      	movs	r3, #8
 80016ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	615a      	str	r2, [r3, #20]
          break;
 80016b6:	e003      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
          break;
 80016bc:	e000      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          break;
 80016be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	2bff      	cmp	r3, #255	; 0xff
 80016c4:	d801      	bhi.n	80016ca <HAL_GPIO_Init+0x13a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	e001      	b.n	80016ce <HAL_GPIO_Init+0x13e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3304      	adds	r3, #4
 80016ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	2bff      	cmp	r3, #255	; 0xff
 80016d4:	d802      	bhi.n	80016dc <HAL_GPIO_Init+0x14c>
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	e002      	b.n	80016e2 <HAL_GPIO_Init+0x152>
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	3b08      	subs	r3, #8
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	210f      	movs	r1, #15
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	401a      	ands	r2, r3
 80016f4:	6a39      	ldr	r1, [r7, #32]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	431a      	orrs	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80b1 	beq.w	8001872 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001710:	4b4d      	ldr	r3, [pc, #308]	; (8001848 <HAL_GPIO_Init+0x2b8>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a4c      	ldr	r2, [pc, #304]	; (8001848 <HAL_GPIO_Init+0x2b8>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <HAL_GPIO_Init+0x2b8>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001728:	4a48      	ldr	r2, [pc, #288]	; (800184c <HAL_GPIO_Init+0x2bc>)
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001734:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a40      	ldr	r2, [pc, #256]	; (8001850 <HAL_GPIO_Init+0x2c0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d013      	beq.n	800177c <HAL_GPIO_Init+0x1ec>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a3f      	ldr	r2, [pc, #252]	; (8001854 <HAL_GPIO_Init+0x2c4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d00d      	beq.n	8001778 <HAL_GPIO_Init+0x1e8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a3e      	ldr	r2, [pc, #248]	; (8001858 <HAL_GPIO_Init+0x2c8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d007      	beq.n	8001774 <HAL_GPIO_Init+0x1e4>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a3d      	ldr	r2, [pc, #244]	; (800185c <HAL_GPIO_Init+0x2cc>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d101      	bne.n	8001770 <HAL_GPIO_Init+0x1e0>
 800176c:	2303      	movs	r3, #3
 800176e:	e006      	b.n	800177e <HAL_GPIO_Init+0x1ee>
 8001770:	2304      	movs	r3, #4
 8001772:	e004      	b.n	800177e <HAL_GPIO_Init+0x1ee>
 8001774:	2302      	movs	r3, #2
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0x1ee>
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <HAL_GPIO_Init+0x1ee>
 800177c:	2300      	movs	r3, #0
 800177e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001780:	f002 0203 	and.w	r2, r2, #3
 8001784:	0092      	lsls	r2, r2, #2
 8001786:	4093      	lsls	r3, r2
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800178e:	492f      	ldr	r1, [pc, #188]	; (800184c <HAL_GPIO_Init+0x2bc>)
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	492c      	ldr	r1, [pc, #176]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017b6:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	43db      	mvns	r3, r3
 80017be:	4928      	ldr	r1, [pc, #160]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	4922      	ldr	r1, [pc, #136]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	60cb      	str	r3, [r1, #12]
 80017dc:	e006      	b.n	80017ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	491e      	ldr	r1, [pc, #120]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d006      	beq.n	8001806 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4918      	ldr	r1, [pc, #96]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	43db      	mvns	r3, r3
 800180e:	4914      	ldr	r1, [pc, #80]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 8001810:	4013      	ands	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d021      	beq.n	8001864 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	490e      	ldr	r1, [pc, #56]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
 800182c:	e021      	b.n	8001872 <HAL_GPIO_Init+0x2e2>
 800182e:	bf00      	nop
 8001830:	10320000 	.word	0x10320000
 8001834:	10310000 	.word	0x10310000
 8001838:	10220000 	.word	0x10220000
 800183c:	10210000 	.word	0x10210000
 8001840:	10120000 	.word	0x10120000
 8001844:	10110000 	.word	0x10110000
 8001848:	40021000 	.word	0x40021000
 800184c:	40010000 	.word	0x40010000
 8001850:	40010800 	.word	0x40010800
 8001854:	40010c00 	.word	0x40010c00
 8001858:	40011000 	.word	0x40011000
 800185c:	40011400 	.word	0x40011400
 8001860:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_GPIO_Init+0x304>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	43db      	mvns	r3, r3
 800186c:	4909      	ldr	r1, [pc, #36]	; (8001894 <HAL_GPIO_Init+0x304>)
 800186e:	4013      	ands	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	3301      	adds	r3, #1
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	fa22 f303 	lsr.w	r3, r2, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	f47f ae8e 	bne.w	80015a4 <HAL_GPIO_Init+0x14>
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	372c      	adds	r7, #44	; 0x2c
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40010400 	.word	0x40010400

08001898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
 80018a4:	4613      	mov	r3, r2
 80018a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a8:	787b      	ldrb	r3, [r7, #1]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ae:	887a      	ldrh	r2, [r7, #2]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018b4:	e003      	b.n	80018be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018b6:	887b      	ldrh	r3, [r7, #2]
 80018b8:	041a      	lsls	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	611a      	str	r2, [r3, #16]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e272      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8087 	beq.w	80019f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e8:	4b92      	ldr	r3, [pc, #584]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d00c      	beq.n	800190e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018f4:	4b8f      	ldr	r3, [pc, #572]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d112      	bne.n	8001926 <HAL_RCC_OscConfig+0x5e>
 8001900:	4b8c      	ldr	r3, [pc, #560]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190c:	d10b      	bne.n	8001926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190e:	4b89      	ldr	r3, [pc, #548]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d06c      	beq.n	80019f4 <HAL_RCC_OscConfig+0x12c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d168      	bne.n	80019f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e24c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x76>
 8001930:	4b80      	ldr	r3, [pc, #512]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a7f      	ldr	r2, [pc, #508]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	e02e      	b.n	800199c <HAL_RCC_OscConfig+0xd4>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x98>
 8001946:	4b7b      	ldr	r3, [pc, #492]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a7a      	ldr	r2, [pc, #488]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 800194c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b78      	ldr	r3, [pc, #480]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a77      	ldr	r2, [pc, #476]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e01d      	b.n	800199c <HAL_RCC_OscConfig+0xd4>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0xbc>
 800196a:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a71      	ldr	r2, [pc, #452]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b6f      	ldr	r3, [pc, #444]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a6e      	ldr	r2, [pc, #440]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e00b      	b.n	800199c <HAL_RCC_OscConfig+0xd4>
 8001984:	4b6b      	ldr	r3, [pc, #428]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a6a      	ldr	r2, [pc, #424]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 800198a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b68      	ldr	r3, [pc, #416]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a67      	ldr	r2, [pc, #412]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7fe ff60 	bl	8000868 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ac:	f7fe ff5c 	bl	8000868 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e200      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b5d      	ldr	r3, [pc, #372]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0xe4>
 80019ca:	e014      	b.n	80019f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7fe ff4c 	bl	8000868 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d4:	f7fe ff48 	bl	8000868 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e1ec      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e6:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x10c>
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d063      	beq.n	8001aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a02:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a0e:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d11c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x18c>
 8001a1a:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d116      	bne.n	8001a54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_RCC_OscConfig+0x176>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e1c0      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4939      	ldr	r1, [pc, #228]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a52:	e03a      	b.n	8001aca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7fe ff01 	bl	8000868 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6a:	f7fe fefd 	bl	8000868 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e1a1      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a88:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4927      	ldr	r1, [pc, #156]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
 8001a9c:	e015      	b.n	8001aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7fe fee0 	bl	8000868 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aac:	f7fe fedc 	bl	8000868 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e180      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d03a      	beq.n	8001b4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d019      	beq.n	8001b12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae4:	f7fe fec0 	bl	8000868 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aec:	f7fe febc 	bl	8000868 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e160      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f000 face 	bl	80020ac <RCC_Delay>
 8001b10:	e01c      	b.n	8001b4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b18:	f7fe fea6 	bl	8000868 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1e:	e00f      	b.n	8001b40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b20:	f7fe fea2 	bl	8000868 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d908      	bls.n	8001b40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e146      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	42420000 	.word	0x42420000
 8001b3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b40:	4b92      	ldr	r3, [pc, #584]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e9      	bne.n	8001b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80a6 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5e:	4b8b      	ldr	r3, [pc, #556]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10d      	bne.n	8001b86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4b88      	ldr	r3, [pc, #544]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a87      	ldr	r2, [pc, #540]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	61d3      	str	r3, [r2, #28]
 8001b76:	4b85      	ldr	r3, [pc, #532]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b82:	2301      	movs	r3, #1
 8001b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b86:	4b82      	ldr	r3, [pc, #520]	; (8001d90 <HAL_RCC_OscConfig+0x4c8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d118      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b92:	4b7f      	ldr	r3, [pc, #508]	; (8001d90 <HAL_RCC_OscConfig+0x4c8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a7e      	ldr	r2, [pc, #504]	; (8001d90 <HAL_RCC_OscConfig+0x4c8>)
 8001b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9e:	f7fe fe63 	bl	8000868 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba6:	f7fe fe5f 	bl	8000868 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b64      	cmp	r3, #100	; 0x64
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e103      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	4b75      	ldr	r3, [pc, #468]	; (8001d90 <HAL_RCC_OscConfig+0x4c8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x312>
 8001bcc:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a6e      	ldr	r2, [pc, #440]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	e02d      	b.n	8001c36 <HAL_RCC_OscConfig+0x36e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x334>
 8001be2:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a69      	ldr	r2, [pc, #420]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6213      	str	r3, [r2, #32]
 8001bee:	4b67      	ldr	r3, [pc, #412]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a66      	ldr	r2, [pc, #408]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
 8001bf8:	6213      	str	r3, [r2, #32]
 8001bfa:	e01c      	b.n	8001c36 <HAL_RCC_OscConfig+0x36e>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	d10c      	bne.n	8001c1e <HAL_RCC_OscConfig+0x356>
 8001c04:	4b61      	ldr	r3, [pc, #388]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4a60      	ldr	r2, [pc, #384]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6213      	str	r3, [r2, #32]
 8001c10:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4a5d      	ldr	r2, [pc, #372]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6213      	str	r3, [r2, #32]
 8001c1c:	e00b      	b.n	8001c36 <HAL_RCC_OscConfig+0x36e>
 8001c1e:	4b5b      	ldr	r3, [pc, #364]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a5a      	ldr	r2, [pc, #360]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6213      	str	r3, [r2, #32]
 8001c2a:	4b58      	ldr	r3, [pc, #352]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4a57      	ldr	r2, [pc, #348]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d015      	beq.n	8001c6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7fe fe13 	bl	8000868 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c46:	f7fe fe0f 	bl	8000868 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e0b1      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5c:	4b4b      	ldr	r3, [pc, #300]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0ee      	beq.n	8001c46 <HAL_RCC_OscConfig+0x37e>
 8001c68:	e014      	b.n	8001c94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6a:	f7fe fdfd 	bl	8000868 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c70:	e00a      	b.n	8001c88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c72:	f7fe fdf9 	bl	8000868 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e09b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c88:	4b40      	ldr	r3, [pc, #256]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ee      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d105      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9a:	4b3c      	ldr	r3, [pc, #240]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	4a3b      	ldr	r2, [pc, #236]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8087 	beq.w	8001dbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb0:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d061      	beq.n	8001d80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d146      	bne.n	8001d52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc4:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <HAL_RCC_OscConfig+0x4cc>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7fe fdcd 	bl	8000868 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7fe fdc9 	bl	8000868 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e06d      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce4:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf8:	d108      	bne.n	8001d0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4921      	ldr	r1, [pc, #132]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a19      	ldr	r1, [r3, #32]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	491b      	ldr	r1, [pc, #108]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d24:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <HAL_RCC_OscConfig+0x4cc>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7fe fd9d 	bl	8000868 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7fe fd99 	bl	8000868 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e03d      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x46a>
 8001d50:	e035      	b.n	8001dbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_RCC_OscConfig+0x4cc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7fe fd86 	bl	8000868 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7fe fd82 	bl	8000868 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e026      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x498>
 8001d7e:	e01e      	b.n	8001dbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e019      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40007000 	.word	0x40007000
 8001d94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_OscConfig+0x500>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000

08001dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0d0      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b6a      	ldr	r3, [pc, #424]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d910      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b67      	ldr	r3, [pc, #412]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0207 	bic.w	r2, r3, #7
 8001df6:	4965      	ldr	r1, [pc, #404]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b63      	ldr	r3, [pc, #396]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0b8      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e28:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a58      	ldr	r2, [pc, #352]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e40:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a52      	ldr	r2, [pc, #328]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	494d      	ldr	r1, [pc, #308]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d040      	beq.n	8001eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d115      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e07f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e073      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e06b      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eaa:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f023 0203 	bic.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4936      	ldr	r1, [pc, #216]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fcd4 	bl	8000868 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec4:	f7fe fcd0 	bl	8000868 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e053      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 020c 	and.w	r2, r3, #12
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d1eb      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d210      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 0207 	bic.w	r2, r3, #7
 8001f02:	4922      	ldr	r1, [pc, #136]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e032      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4916      	ldr	r1, [pc, #88]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	490e      	ldr	r1, [pc, #56]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f5a:	f000 f821 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	490a      	ldr	r1, [pc, #40]	; (8001f94 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	5ccb      	ldrb	r3, [r1, r3]
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	4a09      	ldr	r2, [pc, #36]	; (8001f98 <HAL_RCC_ClockConfig+0x1cc>)
 8001f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_RCC_ClockConfig+0x1d0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fc32 	bl	80007e4 <HAL_InitTick>

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	08002e1c 	.word	0x08002e1c
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fba:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d002      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x30>
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x36>
 8001fce:	e027      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd2:	613b      	str	r3, [r7, #16]
      break;
 8001fd4:	e027      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	0c9b      	lsrs	r3, r3, #18
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fe0:	5cd3      	ldrb	r3, [r2, r3]
 8001fe2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	0c5b      	lsrs	r3, r3, #17
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	4a11      	ldr	r2, [pc, #68]	; (8002040 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ffa:	5cd3      	ldrb	r3, [r2, r3]
 8001ffc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <HAL_RCC_GetSysClockFreq+0x98>)
 8002002:	fb03 f202 	mul.w	r2, r3, r2
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e004      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	613b      	str	r3, [r7, #16]
      break;
 800201e:	e002      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCC_GetSysClockFreq+0x98>)
 8002022:	613b      	str	r3, [r7, #16]
      break;
 8002024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002026:	693b      	ldr	r3, [r7, #16]
}
 8002028:	4618      	mov	r0, r3
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	007a1200 	.word	0x007a1200
 800203c:	08002e34 	.word	0x08002e34
 8002040:	08002e44 	.word	0x08002e44
 8002044:	003d0900 	.word	0x003d0900

08002048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <HAL_RCC_GetHCLKFreq+0x10>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	20000000 	.word	0x20000000

0800205c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002060:	f7ff fff2 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4903      	ldr	r1, [pc, #12]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021000 	.word	0x40021000
 8002080:	08002e2c 	.word	0x08002e2c

08002084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002088:	f7ff ffde 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	0adb      	lsrs	r3, r3, #11
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	4903      	ldr	r1, [pc, #12]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08002e2c 	.word	0x08002e2c

080020ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <RCC_Delay+0x34>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <RCC_Delay+0x38>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	0a5b      	lsrs	r3, r3, #9
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020c8:	bf00      	nop
  }
  while (Delay --);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	60fa      	str	r2, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f9      	bne.n	80020c8 <RCC_Delay+0x1c>
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	20000000 	.word	0x20000000
 80020e4:	10624dd3 	.word	0x10624dd3

080020e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e042      	b.n	8002180 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fa56 	bl	80005c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2224      	movs	r2, #36	; 0x24
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800212a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f91d 	bl	800236c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d16d      	bne.n	8002284 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <HAL_UART_Transmit+0x2c>
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e066      	b.n	8002286 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2221      	movs	r2, #33	; 0x21
 80021c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021c6:	f7fe fb4f 	bl	8000868 <HAL_GetTick>
 80021ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e0:	d108      	bne.n	80021f4 <HAL_UART_Transmit+0x6c>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d104      	bne.n	80021f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	e003      	b.n	80021fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021fc:	e02a      	b.n	8002254 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2200      	movs	r2, #0
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f840 	bl	800228e <UART_WaitOnFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e036      	b.n	8002286 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10b      	bne.n	8002236 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800222c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	3302      	adds	r3, #2
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	e007      	b.n	8002246 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3301      	adds	r3, #1
 8002244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1cf      	bne.n	80021fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2200      	movs	r2, #0
 8002266:	2140      	movs	r1, #64	; 0x40
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f810 	bl	800228e <UART_WaitOnFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e006      	b.n	8002286 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	e000      	b.n	8002286 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002284:	2302      	movs	r3, #2
  }
}
 8002286:	4618      	mov	r0, r3
 8002288:	3720      	adds	r7, #32
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b090      	sub	sp, #64	; 0x40
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4613      	mov	r3, r2
 800229c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800229e:	e050      	b.n	8002342 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a6:	d04c      	beq.n	8002342 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <UART_WaitOnFlagUntilTimeout+0x30>
 80022ae:	f7fe fadb 	bl	8000868 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d241      	bcs.n	8002342 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	e853 3f00 	ldrex	r3, [r3]
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	330c      	adds	r3, #12
 80022dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022de:	637a      	str	r2, [r7, #52]	; 0x34
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e6:	e841 2300 	strex	r3, r2, [r1]
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1e5      	bne.n	80022be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3314      	adds	r3, #20
 80022f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	e853 3f00 	ldrex	r3, [r3]
 8002300:	613b      	str	r3, [r7, #16]
   return(result);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3314      	adds	r3, #20
 8002310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002312:	623a      	str	r2, [r7, #32]
 8002314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002316:	69f9      	ldr	r1, [r7, #28]
 8002318:	6a3a      	ldr	r2, [r7, #32]
 800231a:	e841 2300 	strex	r3, r2, [r1]
 800231e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1e5      	bne.n	80022f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e00f      	b.n	8002362 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4013      	ands	r3, r2
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	429a      	cmp	r2, r3
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	429a      	cmp	r2, r3
 800235e:	d09f      	beq.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3740      	adds	r7, #64	; 0x40
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023a6:	f023 030c 	bic.w	r3, r3, #12
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2c      	ldr	r2, [pc, #176]	; (8002480 <UART_SetConfig+0x114>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d103      	bne.n	80023dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023d4:	f7ff fe56 	bl	8002084 <HAL_RCC_GetPCLK2Freq>
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	e002      	b.n	80023e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023dc:	f7ff fe3e 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 80023e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	009a      	lsls	r2, r3, #2
 80023ec:	441a      	add	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	4a22      	ldr	r2, [pc, #136]	; (8002484 <UART_SetConfig+0x118>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	0119      	lsls	r1, r3, #4
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009a      	lsls	r2, r3, #2
 800240c:	441a      	add	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fbb2 f2f3 	udiv	r2, r2, r3
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <UART_SetConfig+0x118>)
 800241a:	fba3 0302 	umull	r0, r3, r3, r2
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2064      	movs	r0, #100	; 0x64
 8002422:	fb00 f303 	mul.w	r3, r0, r3
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	3332      	adds	r3, #50	; 0x32
 800242c:	4a15      	ldr	r2, [pc, #84]	; (8002484 <UART_SetConfig+0x118>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002438:	4419      	add	r1, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	009a      	lsls	r2, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <UART_SetConfig+0x118>)
 8002452:	fba3 0302 	umull	r0, r3, r3, r2
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2064      	movs	r0, #100	; 0x64
 800245a:	fb00 f303 	mul.w	r3, r0, r3
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	3332      	adds	r3, #50	; 0x32
 8002464:	4a07      	ldr	r2, [pc, #28]	; (8002484 <UART_SetConfig+0x118>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	f003 020f 	and.w	r2, r3, #15
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	440a      	add	r2, r1
 8002476:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40013800 	.word	0x40013800
 8002484:	51eb851f 	.word	0x51eb851f

08002488 <siprintf>:
 8002488:	b40e      	push	{r1, r2, r3}
 800248a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800248e:	b500      	push	{lr}
 8002490:	b09c      	sub	sp, #112	; 0x70
 8002492:	ab1d      	add	r3, sp, #116	; 0x74
 8002494:	9002      	str	r0, [sp, #8]
 8002496:	9006      	str	r0, [sp, #24]
 8002498:	9107      	str	r1, [sp, #28]
 800249a:	9104      	str	r1, [sp, #16]
 800249c:	4808      	ldr	r0, [pc, #32]	; (80024c0 <siprintf+0x38>)
 800249e:	4909      	ldr	r1, [pc, #36]	; (80024c4 <siprintf+0x3c>)
 80024a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80024a4:	9105      	str	r1, [sp, #20]
 80024a6:	6800      	ldr	r0, [r0, #0]
 80024a8:	a902      	add	r1, sp, #8
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	f000 f98e 	bl	80027cc <_svfiprintf_r>
 80024b0:	2200      	movs	r2, #0
 80024b2:	9b02      	ldr	r3, [sp, #8]
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	b01c      	add	sp, #112	; 0x70
 80024b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80024bc:	b003      	add	sp, #12
 80024be:	4770      	bx	lr
 80024c0:	20000058 	.word	0x20000058
 80024c4:	ffff0208 	.word	0xffff0208

080024c8 <memset>:
 80024c8:	4603      	mov	r3, r0
 80024ca:	4402      	add	r2, r0
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d100      	bne.n	80024d2 <memset+0xa>
 80024d0:	4770      	bx	lr
 80024d2:	f803 1b01 	strb.w	r1, [r3], #1
 80024d6:	e7f9      	b.n	80024cc <memset+0x4>

080024d8 <__errno>:
 80024d8:	4b01      	ldr	r3, [pc, #4]	; (80024e0 <__errno+0x8>)
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000058 	.word	0x20000058

080024e4 <__libc_init_array>:
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	2600      	movs	r6, #0
 80024e8:	4d0c      	ldr	r5, [pc, #48]	; (800251c <__libc_init_array+0x38>)
 80024ea:	4c0d      	ldr	r4, [pc, #52]	; (8002520 <__libc_init_array+0x3c>)
 80024ec:	1b64      	subs	r4, r4, r5
 80024ee:	10a4      	asrs	r4, r4, #2
 80024f0:	42a6      	cmp	r6, r4
 80024f2:	d109      	bne.n	8002508 <__libc_init_array+0x24>
 80024f4:	f000 fc7a 	bl	8002dec <_init>
 80024f8:	2600      	movs	r6, #0
 80024fa:	4d0a      	ldr	r5, [pc, #40]	; (8002524 <__libc_init_array+0x40>)
 80024fc:	4c0a      	ldr	r4, [pc, #40]	; (8002528 <__libc_init_array+0x44>)
 80024fe:	1b64      	subs	r4, r4, r5
 8002500:	10a4      	asrs	r4, r4, #2
 8002502:	42a6      	cmp	r6, r4
 8002504:	d105      	bne.n	8002512 <__libc_init_array+0x2e>
 8002506:	bd70      	pop	{r4, r5, r6, pc}
 8002508:	f855 3b04 	ldr.w	r3, [r5], #4
 800250c:	4798      	blx	r3
 800250e:	3601      	adds	r6, #1
 8002510:	e7ee      	b.n	80024f0 <__libc_init_array+0xc>
 8002512:	f855 3b04 	ldr.w	r3, [r5], #4
 8002516:	4798      	blx	r3
 8002518:	3601      	adds	r6, #1
 800251a:	e7f2      	b.n	8002502 <__libc_init_array+0x1e>
 800251c:	08002e7c 	.word	0x08002e7c
 8002520:	08002e7c 	.word	0x08002e7c
 8002524:	08002e7c 	.word	0x08002e7c
 8002528:	08002e80 	.word	0x08002e80

0800252c <__retarget_lock_acquire_recursive>:
 800252c:	4770      	bx	lr

0800252e <__retarget_lock_release_recursive>:
 800252e:	4770      	bx	lr

08002530 <_free_r>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	4605      	mov	r5, r0
 8002534:	2900      	cmp	r1, #0
 8002536:	d040      	beq.n	80025ba <_free_r+0x8a>
 8002538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800253c:	1f0c      	subs	r4, r1, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	bfb8      	it	lt
 8002542:	18e4      	addlt	r4, r4, r3
 8002544:	f000 f8dc 	bl	8002700 <__malloc_lock>
 8002548:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <_free_r+0x8c>)
 800254a:	6813      	ldr	r3, [r2, #0]
 800254c:	b933      	cbnz	r3, 800255c <_free_r+0x2c>
 800254e:	6063      	str	r3, [r4, #4]
 8002550:	6014      	str	r4, [r2, #0]
 8002552:	4628      	mov	r0, r5
 8002554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002558:	f000 b8d8 	b.w	800270c <__malloc_unlock>
 800255c:	42a3      	cmp	r3, r4
 800255e:	d908      	bls.n	8002572 <_free_r+0x42>
 8002560:	6820      	ldr	r0, [r4, #0]
 8002562:	1821      	adds	r1, r4, r0
 8002564:	428b      	cmp	r3, r1
 8002566:	bf01      	itttt	eq
 8002568:	6819      	ldreq	r1, [r3, #0]
 800256a:	685b      	ldreq	r3, [r3, #4]
 800256c:	1809      	addeq	r1, r1, r0
 800256e:	6021      	streq	r1, [r4, #0]
 8002570:	e7ed      	b.n	800254e <_free_r+0x1e>
 8002572:	461a      	mov	r2, r3
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	b10b      	cbz	r3, 800257c <_free_r+0x4c>
 8002578:	42a3      	cmp	r3, r4
 800257a:	d9fa      	bls.n	8002572 <_free_r+0x42>
 800257c:	6811      	ldr	r1, [r2, #0]
 800257e:	1850      	adds	r0, r2, r1
 8002580:	42a0      	cmp	r0, r4
 8002582:	d10b      	bne.n	800259c <_free_r+0x6c>
 8002584:	6820      	ldr	r0, [r4, #0]
 8002586:	4401      	add	r1, r0
 8002588:	1850      	adds	r0, r2, r1
 800258a:	4283      	cmp	r3, r0
 800258c:	6011      	str	r1, [r2, #0]
 800258e:	d1e0      	bne.n	8002552 <_free_r+0x22>
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4408      	add	r0, r1
 8002596:	6010      	str	r0, [r2, #0]
 8002598:	6053      	str	r3, [r2, #4]
 800259a:	e7da      	b.n	8002552 <_free_r+0x22>
 800259c:	d902      	bls.n	80025a4 <_free_r+0x74>
 800259e:	230c      	movs	r3, #12
 80025a0:	602b      	str	r3, [r5, #0]
 80025a2:	e7d6      	b.n	8002552 <_free_r+0x22>
 80025a4:	6820      	ldr	r0, [r4, #0]
 80025a6:	1821      	adds	r1, r4, r0
 80025a8:	428b      	cmp	r3, r1
 80025aa:	bf01      	itttt	eq
 80025ac:	6819      	ldreq	r1, [r3, #0]
 80025ae:	685b      	ldreq	r3, [r3, #4]
 80025b0:	1809      	addeq	r1, r1, r0
 80025b2:	6021      	streq	r1, [r4, #0]
 80025b4:	6063      	str	r3, [r4, #4]
 80025b6:	6054      	str	r4, [r2, #4]
 80025b8:	e7cb      	b.n	8002552 <_free_r+0x22>
 80025ba:	bd38      	pop	{r3, r4, r5, pc}
 80025bc:	20000230 	.word	0x20000230

080025c0 <sbrk_aligned>:
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	4e0e      	ldr	r6, [pc, #56]	; (80025fc <sbrk_aligned+0x3c>)
 80025c4:	460c      	mov	r4, r1
 80025c6:	6831      	ldr	r1, [r6, #0]
 80025c8:	4605      	mov	r5, r0
 80025ca:	b911      	cbnz	r1, 80025d2 <sbrk_aligned+0x12>
 80025cc:	f000 fbaa 	bl	8002d24 <_sbrk_r>
 80025d0:	6030      	str	r0, [r6, #0]
 80025d2:	4621      	mov	r1, r4
 80025d4:	4628      	mov	r0, r5
 80025d6:	f000 fba5 	bl	8002d24 <_sbrk_r>
 80025da:	1c43      	adds	r3, r0, #1
 80025dc:	d00a      	beq.n	80025f4 <sbrk_aligned+0x34>
 80025de:	1cc4      	adds	r4, r0, #3
 80025e0:	f024 0403 	bic.w	r4, r4, #3
 80025e4:	42a0      	cmp	r0, r4
 80025e6:	d007      	beq.n	80025f8 <sbrk_aligned+0x38>
 80025e8:	1a21      	subs	r1, r4, r0
 80025ea:	4628      	mov	r0, r5
 80025ec:	f000 fb9a 	bl	8002d24 <_sbrk_r>
 80025f0:	3001      	adds	r0, #1
 80025f2:	d101      	bne.n	80025f8 <sbrk_aligned+0x38>
 80025f4:	f04f 34ff 	mov.w	r4, #4294967295
 80025f8:	4620      	mov	r0, r4
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
 80025fc:	20000234 	.word	0x20000234

08002600 <_malloc_r>:
 8002600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002604:	1ccd      	adds	r5, r1, #3
 8002606:	f025 0503 	bic.w	r5, r5, #3
 800260a:	3508      	adds	r5, #8
 800260c:	2d0c      	cmp	r5, #12
 800260e:	bf38      	it	cc
 8002610:	250c      	movcc	r5, #12
 8002612:	2d00      	cmp	r5, #0
 8002614:	4607      	mov	r7, r0
 8002616:	db01      	blt.n	800261c <_malloc_r+0x1c>
 8002618:	42a9      	cmp	r1, r5
 800261a:	d905      	bls.n	8002628 <_malloc_r+0x28>
 800261c:	230c      	movs	r3, #12
 800261e:	2600      	movs	r6, #0
 8002620:	603b      	str	r3, [r7, #0]
 8002622:	4630      	mov	r0, r6
 8002624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002628:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80026fc <_malloc_r+0xfc>
 800262c:	f000 f868 	bl	8002700 <__malloc_lock>
 8002630:	f8d8 3000 	ldr.w	r3, [r8]
 8002634:	461c      	mov	r4, r3
 8002636:	bb5c      	cbnz	r4, 8002690 <_malloc_r+0x90>
 8002638:	4629      	mov	r1, r5
 800263a:	4638      	mov	r0, r7
 800263c:	f7ff ffc0 	bl	80025c0 <sbrk_aligned>
 8002640:	1c43      	adds	r3, r0, #1
 8002642:	4604      	mov	r4, r0
 8002644:	d155      	bne.n	80026f2 <_malloc_r+0xf2>
 8002646:	f8d8 4000 	ldr.w	r4, [r8]
 800264a:	4626      	mov	r6, r4
 800264c:	2e00      	cmp	r6, #0
 800264e:	d145      	bne.n	80026dc <_malloc_r+0xdc>
 8002650:	2c00      	cmp	r4, #0
 8002652:	d048      	beq.n	80026e6 <_malloc_r+0xe6>
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	4631      	mov	r1, r6
 8002658:	4638      	mov	r0, r7
 800265a:	eb04 0903 	add.w	r9, r4, r3
 800265e:	f000 fb61 	bl	8002d24 <_sbrk_r>
 8002662:	4581      	cmp	r9, r0
 8002664:	d13f      	bne.n	80026e6 <_malloc_r+0xe6>
 8002666:	6821      	ldr	r1, [r4, #0]
 8002668:	4638      	mov	r0, r7
 800266a:	1a6d      	subs	r5, r5, r1
 800266c:	4629      	mov	r1, r5
 800266e:	f7ff ffa7 	bl	80025c0 <sbrk_aligned>
 8002672:	3001      	adds	r0, #1
 8002674:	d037      	beq.n	80026e6 <_malloc_r+0xe6>
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	442b      	add	r3, r5
 800267a:	6023      	str	r3, [r4, #0]
 800267c:	f8d8 3000 	ldr.w	r3, [r8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d038      	beq.n	80026f6 <_malloc_r+0xf6>
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	42a2      	cmp	r2, r4
 8002688:	d12b      	bne.n	80026e2 <_malloc_r+0xe2>
 800268a:	2200      	movs	r2, #0
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e00f      	b.n	80026b0 <_malloc_r+0xb0>
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	1b52      	subs	r2, r2, r5
 8002694:	d41f      	bmi.n	80026d6 <_malloc_r+0xd6>
 8002696:	2a0b      	cmp	r2, #11
 8002698:	d917      	bls.n	80026ca <_malloc_r+0xca>
 800269a:	1961      	adds	r1, r4, r5
 800269c:	42a3      	cmp	r3, r4
 800269e:	6025      	str	r5, [r4, #0]
 80026a0:	bf18      	it	ne
 80026a2:	6059      	strne	r1, [r3, #4]
 80026a4:	6863      	ldr	r3, [r4, #4]
 80026a6:	bf08      	it	eq
 80026a8:	f8c8 1000 	streq.w	r1, [r8]
 80026ac:	5162      	str	r2, [r4, r5]
 80026ae:	604b      	str	r3, [r1, #4]
 80026b0:	4638      	mov	r0, r7
 80026b2:	f104 060b 	add.w	r6, r4, #11
 80026b6:	f000 f829 	bl	800270c <__malloc_unlock>
 80026ba:	f026 0607 	bic.w	r6, r6, #7
 80026be:	1d23      	adds	r3, r4, #4
 80026c0:	1af2      	subs	r2, r6, r3
 80026c2:	d0ae      	beq.n	8002622 <_malloc_r+0x22>
 80026c4:	1b9b      	subs	r3, r3, r6
 80026c6:	50a3      	str	r3, [r4, r2]
 80026c8:	e7ab      	b.n	8002622 <_malloc_r+0x22>
 80026ca:	42a3      	cmp	r3, r4
 80026cc:	6862      	ldr	r2, [r4, #4]
 80026ce:	d1dd      	bne.n	800268c <_malloc_r+0x8c>
 80026d0:	f8c8 2000 	str.w	r2, [r8]
 80026d4:	e7ec      	b.n	80026b0 <_malloc_r+0xb0>
 80026d6:	4623      	mov	r3, r4
 80026d8:	6864      	ldr	r4, [r4, #4]
 80026da:	e7ac      	b.n	8002636 <_malloc_r+0x36>
 80026dc:	4634      	mov	r4, r6
 80026de:	6876      	ldr	r6, [r6, #4]
 80026e0:	e7b4      	b.n	800264c <_malloc_r+0x4c>
 80026e2:	4613      	mov	r3, r2
 80026e4:	e7cc      	b.n	8002680 <_malloc_r+0x80>
 80026e6:	230c      	movs	r3, #12
 80026e8:	4638      	mov	r0, r7
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	f000 f80e 	bl	800270c <__malloc_unlock>
 80026f0:	e797      	b.n	8002622 <_malloc_r+0x22>
 80026f2:	6025      	str	r5, [r4, #0]
 80026f4:	e7dc      	b.n	80026b0 <_malloc_r+0xb0>
 80026f6:	605b      	str	r3, [r3, #4]
 80026f8:	deff      	udf	#255	; 0xff
 80026fa:	bf00      	nop
 80026fc:	20000230 	.word	0x20000230

08002700 <__malloc_lock>:
 8002700:	4801      	ldr	r0, [pc, #4]	; (8002708 <__malloc_lock+0x8>)
 8002702:	f7ff bf13 	b.w	800252c <__retarget_lock_acquire_recursive>
 8002706:	bf00      	nop
 8002708:	2000022c 	.word	0x2000022c

0800270c <__malloc_unlock>:
 800270c:	4801      	ldr	r0, [pc, #4]	; (8002714 <__malloc_unlock+0x8>)
 800270e:	f7ff bf0e 	b.w	800252e <__retarget_lock_release_recursive>
 8002712:	bf00      	nop
 8002714:	2000022c 	.word	0x2000022c

08002718 <__ssputs_r>:
 8002718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800271c:	461f      	mov	r7, r3
 800271e:	688e      	ldr	r6, [r1, #8]
 8002720:	4682      	mov	sl, r0
 8002722:	42be      	cmp	r6, r7
 8002724:	460c      	mov	r4, r1
 8002726:	4690      	mov	r8, r2
 8002728:	680b      	ldr	r3, [r1, #0]
 800272a:	d82c      	bhi.n	8002786 <__ssputs_r+0x6e>
 800272c:	898a      	ldrh	r2, [r1, #12]
 800272e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002732:	d026      	beq.n	8002782 <__ssputs_r+0x6a>
 8002734:	6965      	ldr	r5, [r4, #20]
 8002736:	6909      	ldr	r1, [r1, #16]
 8002738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800273c:	eba3 0901 	sub.w	r9, r3, r1
 8002740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002744:	1c7b      	adds	r3, r7, #1
 8002746:	444b      	add	r3, r9
 8002748:	106d      	asrs	r5, r5, #1
 800274a:	429d      	cmp	r5, r3
 800274c:	bf38      	it	cc
 800274e:	461d      	movcc	r5, r3
 8002750:	0553      	lsls	r3, r2, #21
 8002752:	d527      	bpl.n	80027a4 <__ssputs_r+0x8c>
 8002754:	4629      	mov	r1, r5
 8002756:	f7ff ff53 	bl	8002600 <_malloc_r>
 800275a:	4606      	mov	r6, r0
 800275c:	b360      	cbz	r0, 80027b8 <__ssputs_r+0xa0>
 800275e:	464a      	mov	r2, r9
 8002760:	6921      	ldr	r1, [r4, #16]
 8002762:	f000 fafd 	bl	8002d60 <memcpy>
 8002766:	89a3      	ldrh	r3, [r4, #12]
 8002768:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800276c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002770:	81a3      	strh	r3, [r4, #12]
 8002772:	6126      	str	r6, [r4, #16]
 8002774:	444e      	add	r6, r9
 8002776:	6026      	str	r6, [r4, #0]
 8002778:	463e      	mov	r6, r7
 800277a:	6165      	str	r5, [r4, #20]
 800277c:	eba5 0509 	sub.w	r5, r5, r9
 8002780:	60a5      	str	r5, [r4, #8]
 8002782:	42be      	cmp	r6, r7
 8002784:	d900      	bls.n	8002788 <__ssputs_r+0x70>
 8002786:	463e      	mov	r6, r7
 8002788:	4632      	mov	r2, r6
 800278a:	4641      	mov	r1, r8
 800278c:	6820      	ldr	r0, [r4, #0]
 800278e:	f000 faaf 	bl	8002cf0 <memmove>
 8002792:	2000      	movs	r0, #0
 8002794:	68a3      	ldr	r3, [r4, #8]
 8002796:	1b9b      	subs	r3, r3, r6
 8002798:	60a3      	str	r3, [r4, #8]
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	4433      	add	r3, r6
 800279e:	6023      	str	r3, [r4, #0]
 80027a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027a4:	462a      	mov	r2, r5
 80027a6:	f000 fae9 	bl	8002d7c <_realloc_r>
 80027aa:	4606      	mov	r6, r0
 80027ac:	2800      	cmp	r0, #0
 80027ae:	d1e0      	bne.n	8002772 <__ssputs_r+0x5a>
 80027b0:	4650      	mov	r0, sl
 80027b2:	6921      	ldr	r1, [r4, #16]
 80027b4:	f7ff febc 	bl	8002530 <_free_r>
 80027b8:	230c      	movs	r3, #12
 80027ba:	f8ca 3000 	str.w	r3, [sl]
 80027be:	89a3      	ldrh	r3, [r4, #12]
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c8:	81a3      	strh	r3, [r4, #12]
 80027ca:	e7e9      	b.n	80027a0 <__ssputs_r+0x88>

080027cc <_svfiprintf_r>:
 80027cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d0:	4698      	mov	r8, r3
 80027d2:	898b      	ldrh	r3, [r1, #12]
 80027d4:	4607      	mov	r7, r0
 80027d6:	061b      	lsls	r3, r3, #24
 80027d8:	460d      	mov	r5, r1
 80027da:	4614      	mov	r4, r2
 80027dc:	b09d      	sub	sp, #116	; 0x74
 80027de:	d50e      	bpl.n	80027fe <_svfiprintf_r+0x32>
 80027e0:	690b      	ldr	r3, [r1, #16]
 80027e2:	b963      	cbnz	r3, 80027fe <_svfiprintf_r+0x32>
 80027e4:	2140      	movs	r1, #64	; 0x40
 80027e6:	f7ff ff0b 	bl	8002600 <_malloc_r>
 80027ea:	6028      	str	r0, [r5, #0]
 80027ec:	6128      	str	r0, [r5, #16]
 80027ee:	b920      	cbnz	r0, 80027fa <_svfiprintf_r+0x2e>
 80027f0:	230c      	movs	r3, #12
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	e0d0      	b.n	800299c <_svfiprintf_r+0x1d0>
 80027fa:	2340      	movs	r3, #64	; 0x40
 80027fc:	616b      	str	r3, [r5, #20]
 80027fe:	2300      	movs	r3, #0
 8002800:	9309      	str	r3, [sp, #36]	; 0x24
 8002802:	2320      	movs	r3, #32
 8002804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002808:	2330      	movs	r3, #48	; 0x30
 800280a:	f04f 0901 	mov.w	r9, #1
 800280e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002812:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80029b4 <_svfiprintf_r+0x1e8>
 8002816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800281a:	4623      	mov	r3, r4
 800281c:	469a      	mov	sl, r3
 800281e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002822:	b10a      	cbz	r2, 8002828 <_svfiprintf_r+0x5c>
 8002824:	2a25      	cmp	r2, #37	; 0x25
 8002826:	d1f9      	bne.n	800281c <_svfiprintf_r+0x50>
 8002828:	ebba 0b04 	subs.w	fp, sl, r4
 800282c:	d00b      	beq.n	8002846 <_svfiprintf_r+0x7a>
 800282e:	465b      	mov	r3, fp
 8002830:	4622      	mov	r2, r4
 8002832:	4629      	mov	r1, r5
 8002834:	4638      	mov	r0, r7
 8002836:	f7ff ff6f 	bl	8002718 <__ssputs_r>
 800283a:	3001      	adds	r0, #1
 800283c:	f000 80a9 	beq.w	8002992 <_svfiprintf_r+0x1c6>
 8002840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002842:	445a      	add	r2, fp
 8002844:	9209      	str	r2, [sp, #36]	; 0x24
 8002846:	f89a 3000 	ldrb.w	r3, [sl]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80a1 	beq.w	8002992 <_svfiprintf_r+0x1c6>
 8002850:	2300      	movs	r3, #0
 8002852:	f04f 32ff 	mov.w	r2, #4294967295
 8002856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800285a:	f10a 0a01 	add.w	sl, sl, #1
 800285e:	9304      	str	r3, [sp, #16]
 8002860:	9307      	str	r3, [sp, #28]
 8002862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002866:	931a      	str	r3, [sp, #104]	; 0x68
 8002868:	4654      	mov	r4, sl
 800286a:	2205      	movs	r2, #5
 800286c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002870:	4850      	ldr	r0, [pc, #320]	; (80029b4 <_svfiprintf_r+0x1e8>)
 8002872:	f000 fa67 	bl	8002d44 <memchr>
 8002876:	9a04      	ldr	r2, [sp, #16]
 8002878:	b9d8      	cbnz	r0, 80028b2 <_svfiprintf_r+0xe6>
 800287a:	06d0      	lsls	r0, r2, #27
 800287c:	bf44      	itt	mi
 800287e:	2320      	movmi	r3, #32
 8002880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002884:	0711      	lsls	r1, r2, #28
 8002886:	bf44      	itt	mi
 8002888:	232b      	movmi	r3, #43	; 0x2b
 800288a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800288e:	f89a 3000 	ldrb.w	r3, [sl]
 8002892:	2b2a      	cmp	r3, #42	; 0x2a
 8002894:	d015      	beq.n	80028c2 <_svfiprintf_r+0xf6>
 8002896:	4654      	mov	r4, sl
 8002898:	2000      	movs	r0, #0
 800289a:	f04f 0c0a 	mov.w	ip, #10
 800289e:	9a07      	ldr	r2, [sp, #28]
 80028a0:	4621      	mov	r1, r4
 80028a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028a6:	3b30      	subs	r3, #48	; 0x30
 80028a8:	2b09      	cmp	r3, #9
 80028aa:	d94d      	bls.n	8002948 <_svfiprintf_r+0x17c>
 80028ac:	b1b0      	cbz	r0, 80028dc <_svfiprintf_r+0x110>
 80028ae:	9207      	str	r2, [sp, #28]
 80028b0:	e014      	b.n	80028dc <_svfiprintf_r+0x110>
 80028b2:	eba0 0308 	sub.w	r3, r0, r8
 80028b6:	fa09 f303 	lsl.w	r3, r9, r3
 80028ba:	4313      	orrs	r3, r2
 80028bc:	46a2      	mov	sl, r4
 80028be:	9304      	str	r3, [sp, #16]
 80028c0:	e7d2      	b.n	8002868 <_svfiprintf_r+0x9c>
 80028c2:	9b03      	ldr	r3, [sp, #12]
 80028c4:	1d19      	adds	r1, r3, #4
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	9103      	str	r1, [sp, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bfbb      	ittet	lt
 80028ce:	425b      	neglt	r3, r3
 80028d0:	f042 0202 	orrlt.w	r2, r2, #2
 80028d4:	9307      	strge	r3, [sp, #28]
 80028d6:	9307      	strlt	r3, [sp, #28]
 80028d8:	bfb8      	it	lt
 80028da:	9204      	strlt	r2, [sp, #16]
 80028dc:	7823      	ldrb	r3, [r4, #0]
 80028de:	2b2e      	cmp	r3, #46	; 0x2e
 80028e0:	d10c      	bne.n	80028fc <_svfiprintf_r+0x130>
 80028e2:	7863      	ldrb	r3, [r4, #1]
 80028e4:	2b2a      	cmp	r3, #42	; 0x2a
 80028e6:	d134      	bne.n	8002952 <_svfiprintf_r+0x186>
 80028e8:	9b03      	ldr	r3, [sp, #12]
 80028ea:	3402      	adds	r4, #2
 80028ec:	1d1a      	adds	r2, r3, #4
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	9203      	str	r2, [sp, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bfb8      	it	lt
 80028f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80028fa:	9305      	str	r3, [sp, #20]
 80028fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80029b8 <_svfiprintf_r+0x1ec>
 8002900:	2203      	movs	r2, #3
 8002902:	4650      	mov	r0, sl
 8002904:	7821      	ldrb	r1, [r4, #0]
 8002906:	f000 fa1d 	bl	8002d44 <memchr>
 800290a:	b138      	cbz	r0, 800291c <_svfiprintf_r+0x150>
 800290c:	2240      	movs	r2, #64	; 0x40
 800290e:	9b04      	ldr	r3, [sp, #16]
 8002910:	eba0 000a 	sub.w	r0, r0, sl
 8002914:	4082      	lsls	r2, r0
 8002916:	4313      	orrs	r3, r2
 8002918:	3401      	adds	r4, #1
 800291a:	9304      	str	r3, [sp, #16]
 800291c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002920:	2206      	movs	r2, #6
 8002922:	4826      	ldr	r0, [pc, #152]	; (80029bc <_svfiprintf_r+0x1f0>)
 8002924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002928:	f000 fa0c 	bl	8002d44 <memchr>
 800292c:	2800      	cmp	r0, #0
 800292e:	d038      	beq.n	80029a2 <_svfiprintf_r+0x1d6>
 8002930:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <_svfiprintf_r+0x1f4>)
 8002932:	bb1b      	cbnz	r3, 800297c <_svfiprintf_r+0x1b0>
 8002934:	9b03      	ldr	r3, [sp, #12]
 8002936:	3307      	adds	r3, #7
 8002938:	f023 0307 	bic.w	r3, r3, #7
 800293c:	3308      	adds	r3, #8
 800293e:	9303      	str	r3, [sp, #12]
 8002940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002942:	4433      	add	r3, r6
 8002944:	9309      	str	r3, [sp, #36]	; 0x24
 8002946:	e768      	b.n	800281a <_svfiprintf_r+0x4e>
 8002948:	460c      	mov	r4, r1
 800294a:	2001      	movs	r0, #1
 800294c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002950:	e7a6      	b.n	80028a0 <_svfiprintf_r+0xd4>
 8002952:	2300      	movs	r3, #0
 8002954:	f04f 0c0a 	mov.w	ip, #10
 8002958:	4619      	mov	r1, r3
 800295a:	3401      	adds	r4, #1
 800295c:	9305      	str	r3, [sp, #20]
 800295e:	4620      	mov	r0, r4
 8002960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002964:	3a30      	subs	r2, #48	; 0x30
 8002966:	2a09      	cmp	r2, #9
 8002968:	d903      	bls.n	8002972 <_svfiprintf_r+0x1a6>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0c6      	beq.n	80028fc <_svfiprintf_r+0x130>
 800296e:	9105      	str	r1, [sp, #20]
 8002970:	e7c4      	b.n	80028fc <_svfiprintf_r+0x130>
 8002972:	4604      	mov	r4, r0
 8002974:	2301      	movs	r3, #1
 8002976:	fb0c 2101 	mla	r1, ip, r1, r2
 800297a:	e7f0      	b.n	800295e <_svfiprintf_r+0x192>
 800297c:	ab03      	add	r3, sp, #12
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	462a      	mov	r2, r5
 8002982:	4638      	mov	r0, r7
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <_svfiprintf_r+0x1f8>)
 8002986:	a904      	add	r1, sp, #16
 8002988:	f3af 8000 	nop.w
 800298c:	1c42      	adds	r2, r0, #1
 800298e:	4606      	mov	r6, r0
 8002990:	d1d6      	bne.n	8002940 <_svfiprintf_r+0x174>
 8002992:	89ab      	ldrh	r3, [r5, #12]
 8002994:	065b      	lsls	r3, r3, #25
 8002996:	f53f af2d 	bmi.w	80027f4 <_svfiprintf_r+0x28>
 800299a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800299c:	b01d      	add	sp, #116	; 0x74
 800299e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029a2:	ab03      	add	r3, sp, #12
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	462a      	mov	r2, r5
 80029a8:	4638      	mov	r0, r7
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <_svfiprintf_r+0x1f8>)
 80029ac:	a904      	add	r1, sp, #16
 80029ae:	f000 f87d 	bl	8002aac <_printf_i>
 80029b2:	e7eb      	b.n	800298c <_svfiprintf_r+0x1c0>
 80029b4:	08002e46 	.word	0x08002e46
 80029b8:	08002e4c 	.word	0x08002e4c
 80029bc:	08002e50 	.word	0x08002e50
 80029c0:	00000000 	.word	0x00000000
 80029c4:	08002719 	.word	0x08002719

080029c8 <_printf_common>:
 80029c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029cc:	4616      	mov	r6, r2
 80029ce:	4699      	mov	r9, r3
 80029d0:	688a      	ldr	r2, [r1, #8]
 80029d2:	690b      	ldr	r3, [r1, #16]
 80029d4:	4607      	mov	r7, r0
 80029d6:	4293      	cmp	r3, r2
 80029d8:	bfb8      	it	lt
 80029da:	4613      	movlt	r3, r2
 80029dc:	6033      	str	r3, [r6, #0]
 80029de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029e2:	460c      	mov	r4, r1
 80029e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029e8:	b10a      	cbz	r2, 80029ee <_printf_common+0x26>
 80029ea:	3301      	adds	r3, #1
 80029ec:	6033      	str	r3, [r6, #0]
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	0699      	lsls	r1, r3, #26
 80029f2:	bf42      	ittt	mi
 80029f4:	6833      	ldrmi	r3, [r6, #0]
 80029f6:	3302      	addmi	r3, #2
 80029f8:	6033      	strmi	r3, [r6, #0]
 80029fa:	6825      	ldr	r5, [r4, #0]
 80029fc:	f015 0506 	ands.w	r5, r5, #6
 8002a00:	d106      	bne.n	8002a10 <_printf_common+0x48>
 8002a02:	f104 0a19 	add.w	sl, r4, #25
 8002a06:	68e3      	ldr	r3, [r4, #12]
 8002a08:	6832      	ldr	r2, [r6, #0]
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	42ab      	cmp	r3, r5
 8002a0e:	dc2b      	bgt.n	8002a68 <_printf_common+0xa0>
 8002a10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a14:	1e13      	subs	r3, r2, #0
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	bf18      	it	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	0692      	lsls	r2, r2, #26
 8002a1e:	d430      	bmi.n	8002a82 <_printf_common+0xba>
 8002a20:	4649      	mov	r1, r9
 8002a22:	4638      	mov	r0, r7
 8002a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a28:	47c0      	blx	r8
 8002a2a:	3001      	adds	r0, #1
 8002a2c:	d023      	beq.n	8002a76 <_printf_common+0xae>
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	6922      	ldr	r2, [r4, #16]
 8002a32:	f003 0306 	and.w	r3, r3, #6
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	bf14      	ite	ne
 8002a3a:	2500      	movne	r5, #0
 8002a3c:	6833      	ldreq	r3, [r6, #0]
 8002a3e:	f04f 0600 	mov.w	r6, #0
 8002a42:	bf08      	it	eq
 8002a44:	68e5      	ldreq	r5, [r4, #12]
 8002a46:	f104 041a 	add.w	r4, r4, #26
 8002a4a:	bf08      	it	eq
 8002a4c:	1aed      	subeq	r5, r5, r3
 8002a4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a52:	bf08      	it	eq
 8002a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bfc4      	itt	gt
 8002a5c:	1a9b      	subgt	r3, r3, r2
 8002a5e:	18ed      	addgt	r5, r5, r3
 8002a60:	42b5      	cmp	r5, r6
 8002a62:	d11a      	bne.n	8002a9a <_printf_common+0xd2>
 8002a64:	2000      	movs	r0, #0
 8002a66:	e008      	b.n	8002a7a <_printf_common+0xb2>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	4652      	mov	r2, sl
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	4638      	mov	r0, r7
 8002a70:	47c0      	blx	r8
 8002a72:	3001      	adds	r0, #1
 8002a74:	d103      	bne.n	8002a7e <_printf_common+0xb6>
 8002a76:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a7e:	3501      	adds	r5, #1
 8002a80:	e7c1      	b.n	8002a06 <_printf_common+0x3e>
 8002a82:	2030      	movs	r0, #48	; 0x30
 8002a84:	18e1      	adds	r1, r4, r3
 8002a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a90:	4422      	add	r2, r4
 8002a92:	3302      	adds	r3, #2
 8002a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a98:	e7c2      	b.n	8002a20 <_printf_common+0x58>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	4622      	mov	r2, r4
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	4638      	mov	r0, r7
 8002aa2:	47c0      	blx	r8
 8002aa4:	3001      	adds	r0, #1
 8002aa6:	d0e6      	beq.n	8002a76 <_printf_common+0xae>
 8002aa8:	3601      	adds	r6, #1
 8002aaa:	e7d9      	b.n	8002a60 <_printf_common+0x98>

08002aac <_printf_i>:
 8002aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ab0:	7e0f      	ldrb	r7, [r1, #24]
 8002ab2:	4691      	mov	r9, r2
 8002ab4:	2f78      	cmp	r7, #120	; 0x78
 8002ab6:	4680      	mov	r8, r0
 8002ab8:	460c      	mov	r4, r1
 8002aba:	469a      	mov	sl, r3
 8002abc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002abe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ac2:	d807      	bhi.n	8002ad4 <_printf_i+0x28>
 8002ac4:	2f62      	cmp	r7, #98	; 0x62
 8002ac6:	d80a      	bhi.n	8002ade <_printf_i+0x32>
 8002ac8:	2f00      	cmp	r7, #0
 8002aca:	f000 80d5 	beq.w	8002c78 <_printf_i+0x1cc>
 8002ace:	2f58      	cmp	r7, #88	; 0x58
 8002ad0:	f000 80c1 	beq.w	8002c56 <_printf_i+0x1aa>
 8002ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002adc:	e03a      	b.n	8002b54 <_printf_i+0xa8>
 8002ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ae2:	2b15      	cmp	r3, #21
 8002ae4:	d8f6      	bhi.n	8002ad4 <_printf_i+0x28>
 8002ae6:	a101      	add	r1, pc, #4	; (adr r1, 8002aec <_printf_i+0x40>)
 8002ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002aec:	08002b45 	.word	0x08002b45
 8002af0:	08002b59 	.word	0x08002b59
 8002af4:	08002ad5 	.word	0x08002ad5
 8002af8:	08002ad5 	.word	0x08002ad5
 8002afc:	08002ad5 	.word	0x08002ad5
 8002b00:	08002ad5 	.word	0x08002ad5
 8002b04:	08002b59 	.word	0x08002b59
 8002b08:	08002ad5 	.word	0x08002ad5
 8002b0c:	08002ad5 	.word	0x08002ad5
 8002b10:	08002ad5 	.word	0x08002ad5
 8002b14:	08002ad5 	.word	0x08002ad5
 8002b18:	08002c5f 	.word	0x08002c5f
 8002b1c:	08002b85 	.word	0x08002b85
 8002b20:	08002c19 	.word	0x08002c19
 8002b24:	08002ad5 	.word	0x08002ad5
 8002b28:	08002ad5 	.word	0x08002ad5
 8002b2c:	08002c81 	.word	0x08002c81
 8002b30:	08002ad5 	.word	0x08002ad5
 8002b34:	08002b85 	.word	0x08002b85
 8002b38:	08002ad5 	.word	0x08002ad5
 8002b3c:	08002ad5 	.word	0x08002ad5
 8002b40:	08002c21 	.word	0x08002c21
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	1d1a      	adds	r2, r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	602a      	str	r2, [r5, #0]
 8002b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0a0      	b.n	8002c9a <_printf_i+0x1ee>
 8002b58:	6820      	ldr	r0, [r4, #0]
 8002b5a:	682b      	ldr	r3, [r5, #0]
 8002b5c:	0607      	lsls	r7, r0, #24
 8002b5e:	f103 0104 	add.w	r1, r3, #4
 8002b62:	6029      	str	r1, [r5, #0]
 8002b64:	d501      	bpl.n	8002b6a <_printf_i+0xbe>
 8002b66:	681e      	ldr	r6, [r3, #0]
 8002b68:	e003      	b.n	8002b72 <_printf_i+0xc6>
 8002b6a:	0646      	lsls	r6, r0, #25
 8002b6c:	d5fb      	bpl.n	8002b66 <_printf_i+0xba>
 8002b6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002b72:	2e00      	cmp	r6, #0
 8002b74:	da03      	bge.n	8002b7e <_printf_i+0xd2>
 8002b76:	232d      	movs	r3, #45	; 0x2d
 8002b78:	4276      	negs	r6, r6
 8002b7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b7e:	230a      	movs	r3, #10
 8002b80:	4859      	ldr	r0, [pc, #356]	; (8002ce8 <_printf_i+0x23c>)
 8002b82:	e012      	b.n	8002baa <_printf_i+0xfe>
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	6820      	ldr	r0, [r4, #0]
 8002b88:	1d19      	adds	r1, r3, #4
 8002b8a:	6029      	str	r1, [r5, #0]
 8002b8c:	0605      	lsls	r5, r0, #24
 8002b8e:	d501      	bpl.n	8002b94 <_printf_i+0xe8>
 8002b90:	681e      	ldr	r6, [r3, #0]
 8002b92:	e002      	b.n	8002b9a <_printf_i+0xee>
 8002b94:	0641      	lsls	r1, r0, #25
 8002b96:	d5fb      	bpl.n	8002b90 <_printf_i+0xe4>
 8002b98:	881e      	ldrh	r6, [r3, #0]
 8002b9a:	2f6f      	cmp	r7, #111	; 0x6f
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2308      	moveq	r3, #8
 8002ba0:	230a      	movne	r3, #10
 8002ba2:	4851      	ldr	r0, [pc, #324]	; (8002ce8 <_printf_i+0x23c>)
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002baa:	6865      	ldr	r5, [r4, #4]
 8002bac:	2d00      	cmp	r5, #0
 8002bae:	bfa8      	it	ge
 8002bb0:	6821      	ldrge	r1, [r4, #0]
 8002bb2:	60a5      	str	r5, [r4, #8]
 8002bb4:	bfa4      	itt	ge
 8002bb6:	f021 0104 	bicge.w	r1, r1, #4
 8002bba:	6021      	strge	r1, [r4, #0]
 8002bbc:	b90e      	cbnz	r6, 8002bc2 <_printf_i+0x116>
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	d04b      	beq.n	8002c5a <_printf_i+0x1ae>
 8002bc2:	4615      	mov	r5, r2
 8002bc4:	fbb6 f1f3 	udiv	r1, r6, r3
 8002bc8:	fb03 6711 	mls	r7, r3, r1, r6
 8002bcc:	5dc7      	ldrb	r7, [r0, r7]
 8002bce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bd2:	4637      	mov	r7, r6
 8002bd4:	42bb      	cmp	r3, r7
 8002bd6:	460e      	mov	r6, r1
 8002bd8:	d9f4      	bls.n	8002bc4 <_printf_i+0x118>
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d10b      	bne.n	8002bf6 <_printf_i+0x14a>
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	07de      	lsls	r6, r3, #31
 8002be2:	d508      	bpl.n	8002bf6 <_printf_i+0x14a>
 8002be4:	6923      	ldr	r3, [r4, #16]
 8002be6:	6861      	ldr	r1, [r4, #4]
 8002be8:	4299      	cmp	r1, r3
 8002bea:	bfde      	ittt	le
 8002bec:	2330      	movle	r3, #48	; 0x30
 8002bee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bf2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002bf6:	1b52      	subs	r2, r2, r5
 8002bf8:	6122      	str	r2, [r4, #16]
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	4640      	mov	r0, r8
 8002c00:	f8cd a000 	str.w	sl, [sp]
 8002c04:	aa03      	add	r2, sp, #12
 8002c06:	f7ff fedf 	bl	80029c8 <_printf_common>
 8002c0a:	3001      	adds	r0, #1
 8002c0c:	d14a      	bne.n	8002ca4 <_printf_i+0x1f8>
 8002c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c12:	b004      	add	sp, #16
 8002c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	f043 0320 	orr.w	r3, r3, #32
 8002c1e:	6023      	str	r3, [r4, #0]
 8002c20:	2778      	movs	r7, #120	; 0x78
 8002c22:	4832      	ldr	r0, [pc, #200]	; (8002cec <_printf_i+0x240>)
 8002c24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c28:	6823      	ldr	r3, [r4, #0]
 8002c2a:	6829      	ldr	r1, [r5, #0]
 8002c2c:	061f      	lsls	r7, r3, #24
 8002c2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c32:	d402      	bmi.n	8002c3a <_printf_i+0x18e>
 8002c34:	065f      	lsls	r7, r3, #25
 8002c36:	bf48      	it	mi
 8002c38:	b2b6      	uxthmi	r6, r6
 8002c3a:	07df      	lsls	r7, r3, #31
 8002c3c:	bf48      	it	mi
 8002c3e:	f043 0320 	orrmi.w	r3, r3, #32
 8002c42:	6029      	str	r1, [r5, #0]
 8002c44:	bf48      	it	mi
 8002c46:	6023      	strmi	r3, [r4, #0]
 8002c48:	b91e      	cbnz	r6, 8002c52 <_printf_i+0x1a6>
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	f023 0320 	bic.w	r3, r3, #32
 8002c50:	6023      	str	r3, [r4, #0]
 8002c52:	2310      	movs	r3, #16
 8002c54:	e7a6      	b.n	8002ba4 <_printf_i+0xf8>
 8002c56:	4824      	ldr	r0, [pc, #144]	; (8002ce8 <_printf_i+0x23c>)
 8002c58:	e7e4      	b.n	8002c24 <_printf_i+0x178>
 8002c5a:	4615      	mov	r5, r2
 8002c5c:	e7bd      	b.n	8002bda <_printf_i+0x12e>
 8002c5e:	682b      	ldr	r3, [r5, #0]
 8002c60:	6826      	ldr	r6, [r4, #0]
 8002c62:	1d18      	adds	r0, r3, #4
 8002c64:	6961      	ldr	r1, [r4, #20]
 8002c66:	6028      	str	r0, [r5, #0]
 8002c68:	0635      	lsls	r5, r6, #24
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	d501      	bpl.n	8002c72 <_printf_i+0x1c6>
 8002c6e:	6019      	str	r1, [r3, #0]
 8002c70:	e002      	b.n	8002c78 <_printf_i+0x1cc>
 8002c72:	0670      	lsls	r0, r6, #25
 8002c74:	d5fb      	bpl.n	8002c6e <_printf_i+0x1c2>
 8002c76:	8019      	strh	r1, [r3, #0]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	4615      	mov	r5, r2
 8002c7c:	6123      	str	r3, [r4, #16]
 8002c7e:	e7bc      	b.n	8002bfa <_printf_i+0x14e>
 8002c80:	682b      	ldr	r3, [r5, #0]
 8002c82:	2100      	movs	r1, #0
 8002c84:	1d1a      	adds	r2, r3, #4
 8002c86:	602a      	str	r2, [r5, #0]
 8002c88:	681d      	ldr	r5, [r3, #0]
 8002c8a:	6862      	ldr	r2, [r4, #4]
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f000 f859 	bl	8002d44 <memchr>
 8002c92:	b108      	cbz	r0, 8002c98 <_printf_i+0x1ec>
 8002c94:	1b40      	subs	r0, r0, r5
 8002c96:	6060      	str	r0, [r4, #4]
 8002c98:	6863      	ldr	r3, [r4, #4]
 8002c9a:	6123      	str	r3, [r4, #16]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ca2:	e7aa      	b.n	8002bfa <_printf_i+0x14e>
 8002ca4:	462a      	mov	r2, r5
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	4640      	mov	r0, r8
 8002caa:	6923      	ldr	r3, [r4, #16]
 8002cac:	47d0      	blx	sl
 8002cae:	3001      	adds	r0, #1
 8002cb0:	d0ad      	beq.n	8002c0e <_printf_i+0x162>
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	079b      	lsls	r3, r3, #30
 8002cb6:	d413      	bmi.n	8002ce0 <_printf_i+0x234>
 8002cb8:	68e0      	ldr	r0, [r4, #12]
 8002cba:	9b03      	ldr	r3, [sp, #12]
 8002cbc:	4298      	cmp	r0, r3
 8002cbe:	bfb8      	it	lt
 8002cc0:	4618      	movlt	r0, r3
 8002cc2:	e7a6      	b.n	8002c12 <_printf_i+0x166>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	4632      	mov	r2, r6
 8002cc8:	4649      	mov	r1, r9
 8002cca:	4640      	mov	r0, r8
 8002ccc:	47d0      	blx	sl
 8002cce:	3001      	adds	r0, #1
 8002cd0:	d09d      	beq.n	8002c0e <_printf_i+0x162>
 8002cd2:	3501      	adds	r5, #1
 8002cd4:	68e3      	ldr	r3, [r4, #12]
 8002cd6:	9903      	ldr	r1, [sp, #12]
 8002cd8:	1a5b      	subs	r3, r3, r1
 8002cda:	42ab      	cmp	r3, r5
 8002cdc:	dcf2      	bgt.n	8002cc4 <_printf_i+0x218>
 8002cde:	e7eb      	b.n	8002cb8 <_printf_i+0x20c>
 8002ce0:	2500      	movs	r5, #0
 8002ce2:	f104 0619 	add.w	r6, r4, #25
 8002ce6:	e7f5      	b.n	8002cd4 <_printf_i+0x228>
 8002ce8:	08002e57 	.word	0x08002e57
 8002cec:	08002e68 	.word	0x08002e68

08002cf0 <memmove>:
 8002cf0:	4288      	cmp	r0, r1
 8002cf2:	b510      	push	{r4, lr}
 8002cf4:	eb01 0402 	add.w	r4, r1, r2
 8002cf8:	d902      	bls.n	8002d00 <memmove+0x10>
 8002cfa:	4284      	cmp	r4, r0
 8002cfc:	4623      	mov	r3, r4
 8002cfe:	d807      	bhi.n	8002d10 <memmove+0x20>
 8002d00:	1e43      	subs	r3, r0, #1
 8002d02:	42a1      	cmp	r1, r4
 8002d04:	d008      	beq.n	8002d18 <memmove+0x28>
 8002d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d0e:	e7f8      	b.n	8002d02 <memmove+0x12>
 8002d10:	4601      	mov	r1, r0
 8002d12:	4402      	add	r2, r0
 8002d14:	428a      	cmp	r2, r1
 8002d16:	d100      	bne.n	8002d1a <memmove+0x2a>
 8002d18:	bd10      	pop	{r4, pc}
 8002d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d22:	e7f7      	b.n	8002d14 <memmove+0x24>

08002d24 <_sbrk_r>:
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	2300      	movs	r3, #0
 8002d28:	4d05      	ldr	r5, [pc, #20]	; (8002d40 <_sbrk_r+0x1c>)
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	602b      	str	r3, [r5, #0]
 8002d30:	f7fd fce0 	bl	80006f4 <_sbrk>
 8002d34:	1c43      	adds	r3, r0, #1
 8002d36:	d102      	bne.n	8002d3e <_sbrk_r+0x1a>
 8002d38:	682b      	ldr	r3, [r5, #0]
 8002d3a:	b103      	cbz	r3, 8002d3e <_sbrk_r+0x1a>
 8002d3c:	6023      	str	r3, [r4, #0]
 8002d3e:	bd38      	pop	{r3, r4, r5, pc}
 8002d40:	20000228 	.word	0x20000228

08002d44 <memchr>:
 8002d44:	4603      	mov	r3, r0
 8002d46:	b510      	push	{r4, lr}
 8002d48:	b2c9      	uxtb	r1, r1
 8002d4a:	4402      	add	r2, r0
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	d101      	bne.n	8002d56 <memchr+0x12>
 8002d52:	2000      	movs	r0, #0
 8002d54:	e003      	b.n	8002d5e <memchr+0x1a>
 8002d56:	7804      	ldrb	r4, [r0, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	428c      	cmp	r4, r1
 8002d5c:	d1f6      	bne.n	8002d4c <memchr+0x8>
 8002d5e:	bd10      	pop	{r4, pc}

08002d60 <memcpy>:
 8002d60:	440a      	add	r2, r1
 8002d62:	4291      	cmp	r1, r2
 8002d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d68:	d100      	bne.n	8002d6c <memcpy+0xc>
 8002d6a:	4770      	bx	lr
 8002d6c:	b510      	push	{r4, lr}
 8002d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d72:	4291      	cmp	r1, r2
 8002d74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d78:	d1f9      	bne.n	8002d6e <memcpy+0xe>
 8002d7a:	bd10      	pop	{r4, pc}

08002d7c <_realloc_r>:
 8002d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d80:	4680      	mov	r8, r0
 8002d82:	4614      	mov	r4, r2
 8002d84:	460e      	mov	r6, r1
 8002d86:	b921      	cbnz	r1, 8002d92 <_realloc_r+0x16>
 8002d88:	4611      	mov	r1, r2
 8002d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d8e:	f7ff bc37 	b.w	8002600 <_malloc_r>
 8002d92:	b92a      	cbnz	r2, 8002da0 <_realloc_r+0x24>
 8002d94:	f7ff fbcc 	bl	8002530 <_free_r>
 8002d98:	4625      	mov	r5, r4
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002da0:	f000 f81b 	bl	8002dda <_malloc_usable_size_r>
 8002da4:	4284      	cmp	r4, r0
 8002da6:	4607      	mov	r7, r0
 8002da8:	d802      	bhi.n	8002db0 <_realloc_r+0x34>
 8002daa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002dae:	d812      	bhi.n	8002dd6 <_realloc_r+0x5a>
 8002db0:	4621      	mov	r1, r4
 8002db2:	4640      	mov	r0, r8
 8002db4:	f7ff fc24 	bl	8002600 <_malloc_r>
 8002db8:	4605      	mov	r5, r0
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d0ed      	beq.n	8002d9a <_realloc_r+0x1e>
 8002dbe:	42bc      	cmp	r4, r7
 8002dc0:	4622      	mov	r2, r4
 8002dc2:	4631      	mov	r1, r6
 8002dc4:	bf28      	it	cs
 8002dc6:	463a      	movcs	r2, r7
 8002dc8:	f7ff ffca 	bl	8002d60 <memcpy>
 8002dcc:	4631      	mov	r1, r6
 8002dce:	4640      	mov	r0, r8
 8002dd0:	f7ff fbae 	bl	8002530 <_free_r>
 8002dd4:	e7e1      	b.n	8002d9a <_realloc_r+0x1e>
 8002dd6:	4635      	mov	r5, r6
 8002dd8:	e7df      	b.n	8002d9a <_realloc_r+0x1e>

08002dda <_malloc_usable_size_r>:
 8002dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dde:	1f18      	subs	r0, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bfbc      	itt	lt
 8002de4:	580b      	ldrlt	r3, [r1, r0]
 8002de6:	18c0      	addlt	r0, r0, r3
 8002de8:	4770      	bx	lr
	...

08002dec <_init>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	bf00      	nop
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr

08002df8 <_fini>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	bf00      	nop
 8002dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfe:	bc08      	pop	{r3}
 8002e00:	469e      	mov	lr, r3
 8002e02:	4770      	bx	lr
