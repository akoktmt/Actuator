
MotorEncoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c714  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800c828  0800c828  0001c828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd58  0800cd58  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800cd58  0800cd58  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cd58  0800cd58  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd58  0800cd58  0001cd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd5c  0800cd5c  0001cd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800cd60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d2c  200001d8  0800cf38  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001f04  0800cf38  00021f04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a734  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004515  00000000  00000000  0003a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  0003ee90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a7  00000000  00000000  00040580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bfe9  00000000  00000000  00041727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be2d  00000000  00000000  0005d710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099212  00000000  00000000  0007953d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000073b8  00000000  00000000  00112750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00119b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c80c 	.word	0x0800c80c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800c80c 	.word	0x0800c80c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <CAN_Config_filtering>:
	if(HAL_CAN_AddTxMessage(&hcan, &Txheader, data, &TxMailbox)!=HAL_OK){
		Error_Handler();
	}
}
void CAN_Config_filtering(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation=ENABLE;
 800109a:	2301      	movs	r3, #1
 800109c:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterBank=0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdHigh=0x0000;
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
	Can_filter_init.FilterIdLow= 0x0000;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
	Can_filter_init.FilterMaskIdHigh= 0x0000;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterMaskIdLow= 0x0000;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61fb      	str	r3, [r7, #28]
	if(HAL_CAN_ConfigFilter(&hcan,&Can_filter_init)!=HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	; (80010dc <CAN_Config_filtering+0x48>)
 80010c4:	f001 f881 	bl	80021ca <HAL_CAN_ConfigFilter>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <CAN_Config_filtering+0x3e>
	{
		Error_Handler();
 80010ce:	f000 fab7 	bl	8001640 <Error_Handler>
	}
}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	; 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000021c 	.word	0x2000021c

080010e0 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback (CAN_HandleTypeDef *hcan){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rxheader, rcdata)==HAL_OK){
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80010ec:	2100      	movs	r1, #0
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f001 f978 	bl	80023e4 <HAL_CAN_GetRxMessage>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		Can_RecFlag=1;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
	}
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000210 	.word	0x20000210
 800110c:	200001f4 	.word	0x200001f4
 8001110:	20000218 	.word	0x20000218

08001114 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_CAN_Init+0x64>)
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <MX_CAN_Init+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_CAN_Init+0x64>)
 8001120:	2204      	movs	r2, #4
 8001122:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_CAN_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_CAN_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_CAN_Init+0x64>)
 8001132:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001136:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_CAN_Init+0x64>)
 800113a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800113e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <MX_CAN_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_CAN_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_CAN_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_CAN_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MX_CAN_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_CAN_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_CAN_Init+0x64>)
 8001166:	f000 ff35 	bl	8001fd4 <HAL_CAN_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001170:	f000 fa66 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000021c 	.word	0x2000021c
 800117c:	40006400 	.word	0x40006400

08001180 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a2d      	ldr	r2, [pc, #180]	; (8001250 <HAL_CAN_MspInit+0xd0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d153      	bne.n	8001248 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <HAL_CAN_MspInit+0xd4>)
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	4a2b      	ldr	r2, [pc, #172]	; (8001254 <HAL_CAN_MspInit+0xd4>)
 80011a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011aa:	61d3      	str	r3, [r2, #28]
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_CAN_MspInit+0xd4>)
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_CAN_MspInit+0xd4>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a25      	ldr	r2, [pc, #148]	; (8001254 <HAL_CAN_MspInit+0xd4>)
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_CAN_MspInit+0xd4>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	481c      	ldr	r0, [pc, #112]	; (8001258 <HAL_CAN_MspInit+0xd8>)
 80011e6:	f001 fd47 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4816      	ldr	r0, [pc, #88]	; (8001258 <HAL_CAN_MspInit+0xd8>)
 8001200:	f001 fd3a 	bl	8002c78 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_CAN_MspInit+0xdc>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_CAN_MspInit+0xdc>)
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2105      	movs	r1, #5
 800122c:	2013      	movs	r0, #19
 800122e:	f001 fcf8 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001232:	2013      	movs	r0, #19
 8001234:	f001 fd11 	bl	8002c5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2105      	movs	r1, #5
 800123c:	2014      	movs	r0, #20
 800123e:	f001 fcf0 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001242:	2014      	movs	r0, #20
 8001244:	f001 fd09 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40006400 	.word	0x40006400
 8001254:	40021000 	.word	0x40021000
 8001258:	40010c00 	.word	0x40010c00
 800125c:	40010000 	.word	0x40010000

08001260 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */
	VelSetpoint = 2;
 8001266:	492a      	ldr	r1, [pc, #168]	; (8001310 <MX_FREERTOS_Init+0xb0>)
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001270:	e9c1 2300 	strd	r2, r3, [r1]
	VNH3SP30_Init(&driver);
 8001274:	4827      	ldr	r0, [pc, #156]	; (8001314 <MX_FREERTOS_Init+0xb4>)
 8001276:	f006 fb70 	bl	800795a <VNH3SP30_Init>
	Encoder_Init(&Enco);
 800127a:	4827      	ldr	r0, [pc, #156]	; (8001318 <MX_FREERTOS_Init+0xb8>)
 800127c:	f006 fa96 	bl	80077ac <Encoder_Init>
	PID(&TPID, &speed, &PIDOut, &VelSetpoint, 4, 0, 3, _PID_P_ON_E, _PID_CD_DIRECT);
 8001280:	2300      	movs	r3, #0
 8001282:	9307      	str	r3, [sp, #28]
 8001284:	2301      	movs	r3, #1
 8001286:	9306      	str	r3, [sp, #24]
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <MX_FREERTOS_Init+0xbc>)
 800128e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <MX_FREERTOS_Init+0xc0>)
 80012a4:	e9cd 2300 	strd	r2, r3, [sp]
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_FREERTOS_Init+0xb0>)
 80012aa:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <MX_FREERTOS_Init+0xc4>)
 80012ac:	491e      	ldr	r1, [pc, #120]	; (8001328 <MX_FREERTOS_Init+0xc8>)
 80012ae:	481f      	ldr	r0, [pc, #124]	; (800132c <MX_FREERTOS_Init+0xcc>)
 80012b0:	f006 fc06 	bl	8007ac0 <PID>
	PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80012b4:	2101      	movs	r1, #1
 80012b6:	481d      	ldr	r0, [pc, #116]	; (800132c <MX_FREERTOS_Init+0xcc>)
 80012b8:	f006 fd34 	bl	8007d24 <PID_SetMode>
	PID_SetSampleTime(&TPID, 50);
 80012bc:	2132      	movs	r1, #50	; 0x32
 80012be:	481b      	ldr	r0, [pc, #108]	; (800132c <MX_FREERTOS_Init+0xcc>)
 80012c0:	f006 fe9e 	bl	8008000 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPID, -1, 1);
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_FREERTOS_Init+0xd0>)
 80012ca:	e9cd 2300 	strd	r2, r3, [sp]
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_FREERTOS_Init+0xd4>)
 80012d4:	4815      	ldr	r0, [pc, #84]	; (800132c <MX_FREERTOS_Init+0xcc>)
 80012d6:	f006 fd43 	bl	8007d60 <PID_SetOutputLimits>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mControl_PIDTas */
  mControl_PIDTasHandle = osThreadNew(Control_PIDTask, NULL, &mControl_PIDTas_attributes);
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <MX_FREERTOS_Init+0xd8>)
 80012dc:	2100      	movs	r1, #0
 80012de:	4817      	ldr	r0, [pc, #92]	; (800133c <MX_FREERTOS_Init+0xdc>)
 80012e0:	f003 fdf2 	bl	8004ec8 <osThreadNew>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <MX_FREERTOS_Init+0xe0>)
 80012e8:	6013      	str	r3, [r2, #0]

  /* creation of mCAN_RecTask */
  mCAN_RecTaskHandle = osThreadNew(CAN_RecTask, NULL, &mCAN_RecTask_attributes);
 80012ea:	4a16      	ldr	r2, [pc, #88]	; (8001344 <MX_FREERTOS_Init+0xe4>)
 80012ec:	2100      	movs	r1, #0
 80012ee:	4816      	ldr	r0, [pc, #88]	; (8001348 <MX_FREERTOS_Init+0xe8>)
 80012f0:	f003 fdea 	bl	8004ec8 <osThreadNew>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4a15      	ldr	r2, [pc, #84]	; (800134c <MX_FREERTOS_Init+0xec>)
 80012f8:	6013      	str	r3, [r2, #0]

  /* creation of myCAN_TransmitT */
  myCAN_TransmitTHandle = osThreadNew(CAN_TransmitTask, NULL, &myCAN_TransmitT_attributes);
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <MX_FREERTOS_Init+0xf0>)
 80012fc:	2100      	movs	r1, #0
 80012fe:	4815      	ldr	r0, [pc, #84]	; (8001354 <MX_FREERTOS_Init+0xf4>)
 8001300:	f003 fde2 	bl	8004ec8 <osThreadNew>
 8001304:	4603      	mov	r3, r0
 8001306:	4a14      	ldr	r2, [pc, #80]	; (8001358 <MX_FREERTOS_Init+0xf8>)
 8001308:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000248 	.word	0x20000248
 8001314:	200002e8 	.word	0x200002e8
 8001318:	20000250 	.word	0x20000250
 800131c:	40080000 	.word	0x40080000
 8001320:	40100000 	.word	0x40100000
 8001324:	20000268 	.word	0x20000268
 8001328:	20000260 	.word	0x20000260
 800132c:	20000278 	.word	0x20000278
 8001330:	3ff00000 	.word	0x3ff00000
 8001334:	bff00000 	.word	0xbff00000
 8001338:	0800c894 	.word	0x0800c894
 800133c:	0800135d 	.word	0x0800135d
 8001340:	200002ec 	.word	0x200002ec
 8001344:	0800c8b8 	.word	0x0800c8b8
 8001348:	080013e5 	.word	0x080013e5
 800134c:	200002f0 	.word	0x200002f0
 8001350:	0800c8dc 	.word	0x0800c8dc
 8001354:	08001411 	.word	0x08001411
 8001358:	200002f4 	.word	0x200002f4

0800135c <Control_PIDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Control_PIDTask */
void Control_PIDTask(void *argument)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Control_PIDTask */
	uint32_t Time=50;
 8001364:	2332      	movs	r3, #50	; 0x32
 8001366:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  PWM += PIDOut;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <Control_PIDTask+0x70>)
 800136a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <Control_PIDTask+0x74>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7fe fefa 	bl	800016c <__adddf3>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4913      	ldr	r1, [pc, #76]	; (80013cc <Control_PIDTask+0x70>)
 800137e:	e9c1 2300 	strd	r2, r3, [r1]
	  VNH3SP30_SetSpeed(&driver,PWM);
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <Control_PIDTask+0x70>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fb54 	bl	8000a38 <__aeabi_d2iz>
 8001390:	4603      	mov	r3, r0
 8001392:	b21b      	sxth	r3, r3
 8001394:	4619      	mov	r1, r3
 8001396:	480f      	ldr	r0, [pc, #60]	; (80013d4 <Control_PIDTask+0x78>)
 8001398:	f006 faee 	bl	8007978 <VNH3SP30_SetSpeed>
	  Encoder_CaculateSpeed(&Enco,Time);
 800139c:	68f9      	ldr	r1, [r7, #12]
 800139e:	480e      	ldr	r0, [pc, #56]	; (80013d8 <Control_PIDTask+0x7c>)
 80013a0:	f006 fa5a 	bl	8007858 <Encoder_CaculateSpeed>
	  speed=Get_Speed(&Enco);
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <Control_PIDTask+0x7c>)
 80013a6:	f006 facd 	bl	8007944 <Get_Speed>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f83b 	bl	8000428 <__aeabi_f2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4909      	ldr	r1, [pc, #36]	; (80013dc <Control_PIDTask+0x80>)
 80013b8:	e9c1 2300 	strd	r2, r3, [r1]
	  PID_Compute(&TPID);
 80013bc:	4808      	ldr	r0, [pc, #32]	; (80013e0 <Control_PIDTask+0x84>)
 80013be:	f006 fbc7 	bl	8007b50 <PID_Compute>
	  osDelay(Time);
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f003 fe2a 	bl	800501c <osDelay>
	  PWM += PIDOut;
 80013c8:	e7ce      	b.n	8001368 <Control_PIDTask+0xc>
 80013ca:	bf00      	nop
 80013cc:	20000270 	.word	0x20000270
 80013d0:	20000268 	.word	0x20000268
 80013d4:	200002e8 	.word	0x200002e8
 80013d8:	20000250 	.word	0x20000250
 80013dc:	20000260 	.word	0x20000260
 80013e0:	20000278 	.word	0x20000278

080013e4 <CAN_RecTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_RecTask */
void CAN_RecTask(void *argument)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_RecTask */
  /* Infinite loop */
  for(;;)
  {
	  if(Can_RecFlag==1){
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <CAN_RecTask+0x24>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d104      	bne.n	80013fe <CAN_RecTask+0x1a>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <CAN_RecTask+0x28>)
 80013fa:	f001 fdd9 	bl	8002fb0 <HAL_GPIO_TogglePin>
	  }
    osDelay(200);
 80013fe:	20c8      	movs	r0, #200	; 0xc8
 8001400:	f003 fe0c 	bl	800501c <osDelay>
	  if(Can_RecFlag==1){
 8001404:	e7f2      	b.n	80013ec <CAN_RecTask+0x8>
 8001406:	bf00      	nop
 8001408:	20000218 	.word	0x20000218
 800140c:	40011000 	.word	0x40011000

08001410 <CAN_TransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_TransmitTask */
void CAN_TransmitTask(void *argument)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_TransmitTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001418:	2001      	movs	r0, #1
 800141a:	f003 fdff 	bl	800501c <osDelay>
 800141e:	e7fb      	b.n	8001418 <CAN_TransmitTask+0x8>

08001420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001434:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001452:	f043 0320 	orr.w	r3, r3, #32
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0320 	and.w	r3, r3, #32
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149a:	4816      	ldr	r0, [pc, #88]	; (80014f4 <MX_GPIO_Init+0xd4>)
 800149c:	f001 fd70 	bl	8002f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80014a6:	4814      	ldr	r0, [pc, #80]	; (80014f8 <MX_GPIO_Init+0xd8>)
 80014a8:	f001 fd6a 	bl	8002f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	4619      	mov	r1, r3
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014c6:	f001 fbd7 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2302      	movs	r3, #2
 80014da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	4619      	mov	r1, r3
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_GPIO_Init+0xd8>)
 80014e4:	f001 fbc8 	bl	8002c78 <HAL_GPIO_Init>

}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40011000 	.word	0x40011000
 80014f8:	40010c00 	.word	0x40010c00

080014fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001500:	f000 fd36 	bl	8001f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001504:	f000 f844 	bl	8001590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001508:	f7ff ff8a 	bl	8001420 <MX_GPIO_Init>
  MX_TIM2_Init();
 800150c:	f000 fae8 	bl	8001ae0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001510:	f000 fa3a 	bl	8001988 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001514:	f000 fb38 	bl	8001b88 <MX_TIM4_Init>
  MX_CAN_Init();
 8001518:	f7ff fdfc 	bl	8001114 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800151c:	f000 fc78 	bl	8001e10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001520:	2100      	movs	r1, #0
 8001522:	4815      	ldr	r0, [pc, #84]	; (8001578 <main+0x7c>)
 8001524:	f002 fa98 	bl	8003a58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001528:	2100      	movs	r1, #0
 800152a:	4814      	ldr	r0, [pc, #80]	; (800157c <main+0x80>)
 800152c:	f002 fa94 	bl	8003a58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001530:	210c      	movs	r1, #12
 8001532:	4812      	ldr	r0, [pc, #72]	; (800157c <main+0x80>)
 8001534:	f002 fa90 	bl	8003a58 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001538:	213c      	movs	r1, #60	; 0x3c
 800153a:	4811      	ldr	r0, [pc, #68]	; (8001580 <main+0x84>)
 800153c:	f002 fbd0 	bl	8003ce0 <HAL_TIM_Encoder_Start_IT>
  CAN_Config_filtering();
 8001540:	f7ff fda8 	bl	8001094 <CAN_Config_filtering>
 if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK){
 8001544:	2103      	movs	r1, #3
 8001546:	480f      	ldr	r0, [pc, #60]	; (8001584 <main+0x88>)
 8001548:	f001 f86d 	bl	8002626 <HAL_CAN_ActivateNotification>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <main+0x5c>
	 printf("Start CAN IT Error");
 8001552:	480d      	ldr	r0, [pc, #52]	; (8001588 <main+0x8c>)
 8001554:	f007 fcbe 	bl	8008ed4 <iprintf>
 }
  if(HAL_CAN_Start(&hcan)!=HAL_OK){
 8001558:	480a      	ldr	r0, [pc, #40]	; (8001584 <main+0x88>)
 800155a:	f000 feff 	bl	800235c <HAL_CAN_Start>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <main+0x6e>
	 printf("Start CAN Error");
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <main+0x90>)
 8001566:	f007 fcb5 	bl	8008ed4 <iprintf>
 }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800156a:	f003 fc47 	bl	8004dfc <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800156e:	f7ff fe77 	bl	8001260 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001572:	f003 fc75 	bl	8004e60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001576:	e7fe      	b.n	8001576 <main+0x7a>
 8001578:	200003d4 	.word	0x200003d4
 800157c:	20000344 	.word	0x20000344
 8001580:	2000038c 	.word	0x2000038c
 8001584:	2000021c 	.word	0x2000021c
 8001588:	0800c858 	.word	0x0800c858
 800158c:	0800c86c 	.word	0x0800c86c

08001590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b090      	sub	sp, #64	; 0x40
 8001594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	2228      	movs	r2, #40	; 0x28
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f007 fd0d 	bl	8008fbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c0:	2301      	movs	r3, #1
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c4:	2302      	movs	r3, #2
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 fd03 	bl	8002fe4 <HAL_RCC_OscConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015e4:	f000 f82c 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e8:	230f      	movs	r3, #15
 80015ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ec:	2302      	movs	r3, #2
 80015ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2102      	movs	r1, #2
 8001602:	4618      	mov	r0, r3
 8001604:	f001 ff70 	bl	80034e8 <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800160e:	f000 f817 	bl	8001640 <Error_Handler>
  }
}
 8001612:	bf00      	nop
 8001614:	3740      	adds	r7, #64	; 0x40
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800162e:	f000 fcb5 	bl	8001f9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40000400 	.word	0x40000400

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_MspInit+0x68>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a17      	ldr	r2, [pc, #92]	; (80016b4 <HAL_MspInit+0x68>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_MspInit+0x68>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_MspInit+0x68>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_MspInit+0x68>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_MspInit+0x68>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	210f      	movs	r1, #15
 8001686:	f06f 0001 	mvn.w	r0, #1
 800168a:	f001 faca 	bl	8002c22 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_MspInit+0x6c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <HAL_MspInit+0x6c>)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010000 	.word	0x40010000

080016bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	; 0x38
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <HAL_InitTick+0xe8>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <HAL_InitTick+0xe8>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_InitTick+0xe8>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ea:	f107 0210 	add.w	r2, r7, #16
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 f867 	bl	80037c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001704:	f002 f838 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 8001708:	6378      	str	r0, [r7, #52]	; 0x34
 800170a:	e004      	b.n	8001716 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800170c:	f002 f834 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 8001710:	4603      	mov	r3, r0
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001718:	4a23      	ldr	r2, [pc, #140]	; (80017a8 <HAL_InitTick+0xec>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9b      	lsrs	r3, r3, #18
 8001720:	3b01      	subs	r3, #1
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_InitTick+0xf0>)
 8001726:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <HAL_InitTick+0xf4>)
 8001728:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_InitTick+0xf0>)
 800172c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001730:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001732:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <HAL_InitTick+0xf0>)
 8001734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001736:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_InitTick+0xf0>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_InitTick+0xf0>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_InitTick+0xf0>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800174a:	4818      	ldr	r0, [pc, #96]	; (80017ac <HAL_InitTick+0xf0>)
 800174c:	f002 f88a 	bl	8003864 <HAL_TIM_Base_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001756:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800175a:	2b00      	cmp	r3, #0
 800175c:	d11b      	bne.n	8001796 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800175e:	4813      	ldr	r0, [pc, #76]	; (80017ac <HAL_InitTick+0xf0>)
 8001760:	f002 f8d0 	bl	8003904 <HAL_TIM_Base_Start_IT>
 8001764:	4603      	mov	r3, r0
 8001766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800176a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800176e:	2b00      	cmp	r3, #0
 8001770:	d111      	bne.n	8001796 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001772:	201d      	movs	r0, #29
 8001774:	f001 fa71 	bl	8002c5a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b0f      	cmp	r3, #15
 800177c:	d808      	bhi.n	8001790 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800177e:	2200      	movs	r2, #0
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	201d      	movs	r0, #29
 8001784:	f001 fa4d 	bl	8002c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_InitTick+0xf8>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e002      	b.n	8001796 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001796:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800179a:	4618      	mov	r0, r3
 800179c:	3738      	adds	r7, #56	; 0x38
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	431bde83 	.word	0x431bde83
 80017ac:	200002f8 	.word	0x200002f8
 80017b0:	40000400 	.word	0x40000400
 80017b4:	20000004 	.word	0x20000004

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017bc:	e7fe      	b.n	80017bc <NMI_Handler+0x4>

080017be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <MemManage_Handler+0x4>

080017ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
	...

080017e4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80017ea:	f000 ff41 	bl	8002670 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000021c 	.word	0x2000021c

080017f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80017fe:	f000 ff37 	bl	8002670 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000021c 	.word	0x2000021c

0800180c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM2_IRQHandler+0x10>)
 8001812:	f002 fb13 	bl	8003e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000038c 	.word	0x2000038c

08001820 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <TIM3_IRQHandler+0x10>)
 8001826:	f002 fb09 	bl	8003e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200002f8 	.word	0x200002f8

08001834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <_kill>:

int _kill(int pid, int sig)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800184c:	f007 fc0a 	bl	8009064 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	2216      	movs	r2, #22
 8001854:	601a      	str	r2, [r3, #0]
  return -1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_exit>:

void _exit (int status)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800186a:	f04f 31ff 	mov.w	r1, #4294967295
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffe7 	bl	8001842 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001874:	e7fe      	b.n	8001874 <_exit+0x12>

08001876 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e00a      	b.n	800189e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001888:	f3af 8000 	nop.w
 800188c:	4601      	mov	r1, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	60ba      	str	r2, [r7, #8]
 8001894:	b2ca      	uxtb	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	dbf0      	blt.n	8001888 <_read+0x12>
  }

  return len;
 80018a6:	687b      	ldr	r3, [r7, #4]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d6:	605a      	str	r2, [r3, #4]
  return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <_isatty>:

int _isatty(int file)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f007 fb90 	bl	8009064 <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20005000 	.word	0x20005000
 8001970:	00000400 	.word	0x00000400
 8001974:	20000340 	.word	0x20000340
 8001978:	20001f08 	.word	0x20001f08

0800197c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b096      	sub	sp, #88	; 0x58
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2220      	movs	r2, #32
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f007 fafc 	bl	8008fbe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019c6:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <MX_TIM1_Init+0x150>)
 80019c8:	4a44      	ldr	r2, [pc, #272]	; (8001adc <MX_TIM1_Init+0x154>)
 80019ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80019cc:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <MX_TIM1_Init+0x150>)
 80019ce:	2247      	movs	r2, #71	; 0x47
 80019d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <MX_TIM1_Init+0x150>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80019d8:	4b3f      	ldr	r3, [pc, #252]	; (8001ad8 <MX_TIM1_Init+0x150>)
 80019da:	2263      	movs	r2, #99	; 0x63
 80019dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b3e      	ldr	r3, [pc, #248]	; (8001ad8 <MX_TIM1_Init+0x150>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019e4:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <MX_TIM1_Init+0x150>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <MX_TIM1_Init+0x150>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019f0:	4839      	ldr	r0, [pc, #228]	; (8001ad8 <MX_TIM1_Init+0x150>)
 80019f2:	f001 ff37 	bl	8003864 <HAL_TIM_Base_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80019fc:	f7ff fe20 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4832      	ldr	r0, [pc, #200]	; (8001ad8 <MX_TIM1_Init+0x150>)
 8001a0e:	f002 fbdf 	bl	80041d0 <HAL_TIM_ConfigClockSource>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001a18:	f7ff fe12 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a1c:	482e      	ldr	r0, [pc, #184]	; (8001ad8 <MX_TIM1_Init+0x150>)
 8001a1e:	f001 ffc3 	bl	80039a8 <HAL_TIM_PWM_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a28:	f7ff fe0a 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4827      	ldr	r0, [pc, #156]	; (8001ad8 <MX_TIM1_Init+0x150>)
 8001a3c:	f002 ff4e 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001a46:	f7ff fdfb 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4a:	2360      	movs	r3, #96	; 0x60
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a56:	2300      	movs	r3, #0
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	481a      	ldr	r0, [pc, #104]	; (8001ad8 <MX_TIM1_Init+0x150>)
 8001a70:	f002 faec 	bl	800404c <HAL_TIM_PWM_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001a7a:	f7ff fde1 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a82:	220c      	movs	r2, #12
 8001a84:	4619      	mov	r1, r3
 8001a86:	4814      	ldr	r0, [pc, #80]	; (8001ad8 <MX_TIM1_Init+0x150>)
 8001a88:	f002 fae0 	bl	800404c <HAL_TIM_PWM_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001a92:	f7ff fdd5 	bl	8001640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4807      	ldr	r0, [pc, #28]	; (8001ad8 <MX_TIM1_Init+0x150>)
 8001aba:	f002 ff6d 	bl	8004998 <HAL_TIMEx_ConfigBreakDeadTime>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001ac4:	f7ff fdbc 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ac8:	4803      	ldr	r0, [pc, #12]	; (8001ad8 <MX_TIM1_Init+0x150>)
 8001aca:	f000 f94b 	bl	8001d64 <HAL_TIM_MspPostInit>

}
 8001ace:	bf00      	nop
 8001ad0:	3758      	adds	r7, #88	; 0x58
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000344 	.word	0x20000344
 8001adc:	40012c00 	.word	0x40012c00

08001ae0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	2224      	movs	r2, #36	; 0x24
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f007 fa65 	bl	8008fbe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <MX_TIM2_Init+0xa4>)
 8001afe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <MX_TIM2_Init+0xa4>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <MX_TIM2_Init+0xa4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <MX_TIM2_Init+0xa4>)
 8001b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <MX_TIM2_Init+0xa4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <MX_TIM2_Init+0xa4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b24:	2303      	movs	r3, #3
 8001b26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480d      	ldr	r0, [pc, #52]	; (8001b84 <MX_TIM2_Init+0xa4>)
 8001b50:	f002 f824 	bl	8003b9c <HAL_TIM_Encoder_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b5a:	f7ff fd71 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4806      	ldr	r0, [pc, #24]	; (8001b84 <MX_TIM2_Init+0xa4>)
 8001b6c:	f002 feb6 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b76:	f7ff fd63 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	3730      	adds	r7, #48	; 0x30
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000038c 	.word	0x2000038c

08001b88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08e      	sub	sp, #56	; 0x38
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	f107 0320 	add.w	r3, r7, #32
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
 8001bb4:	615a      	str	r2, [r3, #20]
 8001bb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <MX_TIM4_Init+0xe8>)
 8001bba:	4a2e      	ldr	r2, [pc, #184]	; (8001c74 <MX_TIM4_Init+0xec>)
 8001bbc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1439;
 8001bbe:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <MX_TIM4_Init+0xe8>)
 8001bc0:	f240 529f 	movw	r2, #1439	; 0x59f
 8001bc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <MX_TIM4_Init+0xe8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <MX_TIM4_Init+0xe8>)
 8001bce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bd2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <MX_TIM4_Init+0xe8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <MX_TIM4_Init+0xe8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001be0:	4823      	ldr	r0, [pc, #140]	; (8001c70 <MX_TIM4_Init+0xe8>)
 8001be2:	f001 fe3f 	bl	8003864 <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001bec:	f7ff fd28 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	481c      	ldr	r0, [pc, #112]	; (8001c70 <MX_TIM4_Init+0xe8>)
 8001bfe:	f002 fae7 	bl	80041d0 <HAL_TIM_ConfigClockSource>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001c08:	f7ff fd1a 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c0c:	4818      	ldr	r0, [pc, #96]	; (8001c70 <MX_TIM4_Init+0xe8>)
 8001c0e:	f001 fecb 	bl	80039a8 <HAL_TIM_PWM_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001c18:	f7ff fd12 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4811      	ldr	r0, [pc, #68]	; (8001c70 <MX_TIM4_Init+0xe8>)
 8001c2c:	f002 fe56 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001c36:	f7ff fd03 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3a:	2360      	movs	r3, #96	; 0x60
 8001c3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4807      	ldr	r0, [pc, #28]	; (8001c70 <MX_TIM4_Init+0xe8>)
 8001c52:	f002 f9fb 	bl	800404c <HAL_TIM_PWM_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001c5c:	f7ff fcf0 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c60:	4803      	ldr	r0, [pc, #12]	; (8001c70 <MX_TIM4_Init+0xe8>)
 8001c62:	f000 f87f 	bl	8001d64 <HAL_TIM_MspPostInit>

}
 8001c66:	bf00      	nop
 8001c68:	3738      	adds	r7, #56	; 0x38
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200003d4 	.word	0x200003d4
 8001c74:	40000800 	.word	0x40000800

08001c78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_TIM_Base_MspInit+0x58>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10c      	bne.n	8001ca4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_TIM_Base_MspInit+0x5c>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <HAL_TIM_Base_MspInit+0x5c>)
 8001c90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c94:	6193      	str	r3, [r2, #24]
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_TIM_Base_MspInit+0x5c>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ca2:	e010      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <HAL_TIM_Base_MspInit+0x60>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d10b      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_TIM_Base_MspInit+0x5c>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <HAL_TIM_Base_MspInit+0x5c>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_TIM_Base_MspInit+0x5c>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	40012c00 	.word	0x40012c00
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40000800 	.word	0x40000800

08001cdc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfa:	d12b      	bne.n	8001d54 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_TIM_Encoder_MspInit+0x80>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <HAL_TIM_Encoder_MspInit+0x80>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	61d3      	str	r3, [r2, #28]
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <HAL_TIM_Encoder_MspInit+0x80>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_TIM_Encoder_MspInit+0x80>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <HAL_TIM_Encoder_MspInit+0x80>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_TIM_Encoder_MspInit+0x80>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4808      	ldr	r0, [pc, #32]	; (8001d60 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d40:	f000 ff9a 	bl	8002c78 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2105      	movs	r1, #5
 8001d48:	201c      	movs	r0, #28
 8001d4a:	f000 ff6a 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d4e:	201c      	movs	r0, #28
 8001d50:	f000 ff83 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010800 	.word	0x40010800

08001d64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <HAL_TIM_MspPostInit+0x98>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d119      	bne.n	8001db8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_TIM_MspPostInit+0x9c>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_TIM_MspPostInit+0x9c>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	6193      	str	r3, [r2, #24]
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_TIM_MspPostInit+0x9c>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8001d9c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001da0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	4619      	mov	r1, r3
 8001db0:	4814      	ldr	r0, [pc, #80]	; (8001e04 <HAL_TIM_MspPostInit+0xa0>)
 8001db2:	f000 ff61 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001db6:	e01c      	b.n	8001df2 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_TIM_MspPostInit+0xa4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d117      	bne.n	8001df2 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_TIM_MspPostInit+0x9c>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_TIM_MspPostInit+0x9c>)
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	6193      	str	r3, [r2, #24]
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_TIM_MspPostInit+0x9c>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dda:	2340      	movs	r3, #64	; 0x40
 8001ddc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	f107 0310 	add.w	r3, r7, #16
 8001dea:	4619      	mov	r1, r3
 8001dec:	4807      	ldr	r0, [pc, #28]	; (8001e0c <HAL_TIM_MspPostInit+0xa8>)
 8001dee:	f000 ff43 	bl	8002c78 <HAL_GPIO_Init>
}
 8001df2:	bf00      	nop
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40012c00 	.word	0x40012c00
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010800 	.word	0x40010800
 8001e08:	40000800 	.word	0x40000800
 8001e0c:	40010c00 	.word	0x40010c00

08001e10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <MX_USART1_UART_Init+0x50>)
 8001e18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e48:	f002 fe09 	bl	8004a5e <HAL_UART_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e52:	f7ff fbf5 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000041c 	.word	0x2000041c
 8001e60:	40013800 	.word	0x40013800

08001e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_UART_MspInit+0x8c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d131      	bne.n	8001ee8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_UART_MspInit+0x90>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <HAL_UART_MspInit+0x90>)
 8001e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_UART_MspInit+0x90>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_UART_MspInit+0x90>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <HAL_UART_MspInit+0x90>)
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_UART_MspInit+0x90>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0310 	add.w	r3, r7, #16
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <HAL_UART_MspInit+0x94>)
 8001eca:	f000 fed5 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <HAL_UART_MspInit+0x94>)
 8001ee4:	f000 fec8 	bl	8002c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40013800 	.word	0x40013800
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40010800 	.word	0x40010800

08001efc <_write>:
}

/* USER CODE BEGIN 1 */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, UART_Delay);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	4803      	ldr	r0, [pc, #12]	; (8001f20 <_write+0x24>)
 8001f12:	f002 fdf4 	bl	8004afe <HAL_UART_Transmit>
  return len;
 8001f16:	687b      	ldr	r3, [r7, #4]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000041c 	.word	0x2000041c

08001f24 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/

    bl  SystemInit
 8001f24:	f7ff fd2a 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f2a:	490c      	ldr	r1, [pc, #48]	; (8001f5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f40:	4c09      	ldr	r4, [pc, #36]	; (8001f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f007 f88f 	bl	8009070 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f52:	f7ff fad3 	bl	80014fc <main>
  bx lr
 8001f56:	4770      	bx	lr
  ldr r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f5c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f60:	0800cd60 	.word	0x0800cd60
  ldr r2, =_sbss
 8001f64:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f68:	20001f04 	.word	0x20001f04

08001f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC1_2_IRQHandler>
	...

08001f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_Init+0x28>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <HAL_Init+0x28>)
 8001f7a:	f043 0310 	orr.w	r3, r3, #16
 8001f7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f80:	2003      	movs	r0, #3
 8001f82:	f000 fe43 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f86:	200f      	movs	r0, #15
 8001f88:	f7ff fb98 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f8c:	f7ff fb5e 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40022000 	.word	0x40022000

08001f9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_IncTick+0x1c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_IncTick+0x20>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a03      	ldr	r2, [pc, #12]	; (8001fbc <HAL_IncTick+0x20>)
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000464 	.word	0x20000464

08001fc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <HAL_GetTick+0x10>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	20000464 	.word	0x20000464

08001fd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0ed      	b.n	80021c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff f8c4 	bl	8001180 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002008:	f7ff ffda 	bl	8001fc0 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800200e:	e012      	b.n	8002036 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002010:	f7ff ffd6 	bl	8001fc0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b0a      	cmp	r3, #10
 800201c:	d90b      	bls.n	8002036 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2205      	movs	r2, #5
 800202e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0c5      	b.n	80021c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0e5      	beq.n	8002010 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0202 	bic.w	r2, r2, #2
 8002052:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002054:	f7ff ffb4 	bl	8001fc0 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800205a:	e012      	b.n	8002082 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800205c:	f7ff ffb0 	bl	8001fc0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b0a      	cmp	r3, #10
 8002068:	d90b      	bls.n	8002082 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2205      	movs	r2, #5
 800207a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e09f      	b.n	80021c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e5      	bne.n	800205c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7e1b      	ldrb	r3, [r3, #24]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d108      	bne.n	80020aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e007      	b.n	80020ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7e5b      	ldrb	r3, [r3, #25]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d108      	bne.n	80020d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e007      	b.n	80020e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7e9b      	ldrb	r3, [r3, #26]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d108      	bne.n	80020fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0220 	orr.w	r2, r2, #32
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e007      	b.n	800210e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0220 	bic.w	r2, r2, #32
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7edb      	ldrb	r3, [r3, #27]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d108      	bne.n	8002128 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0210 	bic.w	r2, r2, #16
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e007      	b.n	8002138 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0210 	orr.w	r2, r2, #16
 8002136:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7f1b      	ldrb	r3, [r3, #28]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d108      	bne.n	8002152 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0208 	orr.w	r2, r2, #8
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e007      	b.n	8002162 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0208 	bic.w	r2, r2, #8
 8002160:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7f5b      	ldrb	r3, [r3, #29]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d108      	bne.n	800217c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0204 	orr.w	r2, r2, #4
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e007      	b.n	800218c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0204 	bic.w	r2, r2, #4
 800218a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	ea42 0103 	orr.w	r1, r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	1e5a      	subs	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b087      	sub	sp, #28
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80021e2:	7cfb      	ldrb	r3, [r7, #19]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d003      	beq.n	80021f0 <HAL_CAN_ConfigFilter+0x26>
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	f040 80aa 	bne.w	8002344 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	2201      	movs	r2, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43db      	mvns	r3, r3
 800221a:	401a      	ands	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d123      	bne.n	8002272 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	43db      	mvns	r3, r3
 8002234:	401a      	ands	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800224c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3248      	adds	r2, #72	; 0x48
 8002252:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002266:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002268:	6979      	ldr	r1, [r7, #20]
 800226a:	3348      	adds	r3, #72	; 0x48
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d122      	bne.n	80022c0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	431a      	orrs	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800229a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3248      	adds	r2, #72	; 0x48
 80022a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022b6:	6979      	ldr	r1, [r7, #20]
 80022b8:	3348      	adds	r3, #72	; 0x48
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	401a      	ands	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80022da:	e007      	b.n	80022ec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d109      	bne.n	8002308 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	401a      	ands	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002306:	e007      	b.n	8002318 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	431a      	orrs	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d107      	bne.n	8002330 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	431a      	orrs	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002336:	f023 0201 	bic.w	r2, r3, #1
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e006      	b.n	8002352 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
  }
}
 8002352:	4618      	mov	r0, r3
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d12e      	bne.n	80023ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002388:	f7ff fe1a 	bl	8001fc0 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800238e:	e012      	b.n	80023b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002390:	f7ff fe16 	bl	8001fc0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b0a      	cmp	r3, #10
 800239c:	d90b      	bls.n	80023b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2205      	movs	r2, #5
 80023ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e012      	b.n	80023dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e5      	bne.n	8002390 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e006      	b.n	80023dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
  }
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d003      	beq.n	8002408 <HAL_CAN_GetRxMessage+0x24>
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	2b02      	cmp	r3, #2
 8002404:	f040 8103 	bne.w	800260e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10e      	bne.n	800242c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d116      	bne.n	800244a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0f7      	b.n	800261c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d107      	bne.n	800244a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0e8      	b.n	800261c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	331b      	adds	r3, #27
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0204 	and.w	r2, r3, #4
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10c      	bne.n	8002482 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	331b      	adds	r3, #27
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	4413      	add	r3, r2
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0d5b      	lsrs	r3, r3, #21
 8002478:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e00b      	b.n	800249a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	331b      	adds	r3, #27
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	4413      	add	r3, r2
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	08db      	lsrs	r3, r3, #3
 8002492:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	331b      	adds	r3, #27
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	4413      	add	r3, r2
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0202 	and.w	r2, r3, #2
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	331b      	adds	r3, #27
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	4413      	add	r3, r2
 80024bc:	3304      	adds	r3, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2208      	movs	r2, #8
 80024cc:	611a      	str	r2, [r3, #16]
 80024ce:	e00b      	b.n	80024e8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	331b      	adds	r3, #27
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	4413      	add	r3, r2
 80024dc:	3304      	adds	r3, #4
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 020f 	and.w	r2, r3, #15
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	331b      	adds	r3, #27
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	4413      	add	r3, r2
 80024f4:	3304      	adds	r3, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	331b      	adds	r3, #27
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4413      	add	r3, r2
 800250c:	3304      	adds	r3, #4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	b29a      	uxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	4413      	add	r3, r2
 8002522:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	4413      	add	r3, r2
 8002538:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0a1a      	lsrs	r2, r3, #8
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	4413      	add	r3, r2
 8002552:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	0c1a      	lsrs	r2, r3, #16
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	3302      	adds	r3, #2
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	4413      	add	r3, r2
 800256c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	0e1a      	lsrs	r2, r3, #24
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	3303      	adds	r3, #3
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	4413      	add	r3, r2
 8002586:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	3304      	adds	r3, #4
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	4413      	add	r3, r2
 800259e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0a1a      	lsrs	r2, r3, #8
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	3305      	adds	r3, #5
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	0c1a      	lsrs	r2, r3, #16
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	3306      	adds	r3, #6
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0e1a      	lsrs	r2, r3, #24
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	3307      	adds	r3, #7
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d108      	bne.n	80025fa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0220 	orr.w	r2, r2, #32
 80025f6:	60da      	str	r2, [r3, #12]
 80025f8:	e007      	b.n	800260a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0220 	orr.w	r2, r2, #32
 8002608:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	e006      	b.n	800261c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
  }
}
 800261c:	4618      	mov	r0, r3
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002636:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d002      	beq.n	8002644 <HAL_CAN_ActivateNotification+0x1e>
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d109      	bne.n	8002658 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6959      	ldr	r1, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e006      	b.n	8002666 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
  }
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d07c      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d023      	beq.n	8002708 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f983 	bl	80029de <HAL_CAN_TxMailbox0CompleteCallback>
 80026d8:	e016      	b.n	8002708 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
 80026ec:	e00c      	b.n	8002708 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d004      	beq.n	8002702 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002700:	e002      	b.n	8002708 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f986 	bl	8002a14 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d024      	beq.n	800275c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800271a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f962 	bl	80029f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800272c:	e016      	b.n	800275c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
 8002740:	e00c      	b.n	800275c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002748:	2b00      	cmp	r3, #0
 800274a:	d004      	beq.n	8002756 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
 8002754:	e002      	b.n	800275c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f965 	bl	8002a26 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d024      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800276e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f941 	bl	8002a02 <HAL_CAN_TxMailbox2CompleteCallback>
 8002780:	e016      	b.n	80027b0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
 8002794:	e00c      	b.n	80027b0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
 80027a8:	e002      	b.n	80027b0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f944 	bl	8002a38 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2208      	movs	r2, #8
 80027ee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f92a 	bl	8002a4a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fc66 	bl	80010e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00c      	beq.n	8002838 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800282e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2210      	movs	r2, #16
 8002836:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2208      	movs	r2, #8
 8002852:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f90a 	bl	8002a6e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	d009      	beq.n	8002878 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f8f2 	bl	8002a5c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2210      	movs	r2, #16
 8002892:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f8f3 	bl	8002a80 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00b      	beq.n	80028bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2208      	movs	r2, #8
 80028b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f8eb 	bl	8002a92 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d07b      	beq.n	80029be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d072      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	f043 0302 	orr.w	r3, r3, #2
 8002906:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292a:	2b00      	cmp	r3, #0
 800292c:	d043      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002934:	2b00      	cmp	r3, #0
 8002936:	d03e      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800293e:	2b60      	cmp	r3, #96	; 0x60
 8002940:	d02b      	beq.n	800299a <HAL_CAN_IRQHandler+0x32a>
 8002942:	2b60      	cmp	r3, #96	; 0x60
 8002944:	d82e      	bhi.n	80029a4 <HAL_CAN_IRQHandler+0x334>
 8002946:	2b50      	cmp	r3, #80	; 0x50
 8002948:	d022      	beq.n	8002990 <HAL_CAN_IRQHandler+0x320>
 800294a:	2b50      	cmp	r3, #80	; 0x50
 800294c:	d82a      	bhi.n	80029a4 <HAL_CAN_IRQHandler+0x334>
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d019      	beq.n	8002986 <HAL_CAN_IRQHandler+0x316>
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d826      	bhi.n	80029a4 <HAL_CAN_IRQHandler+0x334>
 8002956:	2b30      	cmp	r3, #48	; 0x30
 8002958:	d010      	beq.n	800297c <HAL_CAN_IRQHandler+0x30c>
 800295a:	2b30      	cmp	r3, #48	; 0x30
 800295c:	d822      	bhi.n	80029a4 <HAL_CAN_IRQHandler+0x334>
 800295e:	2b10      	cmp	r3, #16
 8002960:	d002      	beq.n	8002968 <HAL_CAN_IRQHandler+0x2f8>
 8002962:	2b20      	cmp	r3, #32
 8002964:	d005      	beq.n	8002972 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002966:	e01d      	b.n	80029a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	f043 0308 	orr.w	r3, r3, #8
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002970:	e019      	b.n	80029a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	f043 0310 	orr.w	r3, r3, #16
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800297a:	e014      	b.n	80029a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	f043 0320 	orr.w	r3, r3, #32
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002984:	e00f      	b.n	80029a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800298e:	e00a      	b.n	80029a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002998:	e005      	b.n	80029a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029a2:	e000      	b.n	80029a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80029a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2204      	movs	r2, #4
 80029bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f867 	bl	8002aa4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029d6:	bf00      	nop
 80029d8:	3728      	adds	r7, #40	; 0x28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
	...

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4906      	ldr	r1, [pc, #24]	; (8002b50 <__NVIC_EnableIRQ+0x34>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	e000e100 	.word	0xe000e100

08002b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db0a      	blt.n	8002b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	490c      	ldr	r1, [pc, #48]	; (8002ba0 <__NVIC_SetPriority+0x4c>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b7c:	e00a      	b.n	8002b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4908      	ldr	r1, [pc, #32]	; (8002ba4 <__NVIC_SetPriority+0x50>)
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	3b04      	subs	r3, #4
 8002b8c:	0112      	lsls	r2, r2, #4
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	440b      	add	r3, r1
 8002b92:	761a      	strb	r2, [r3, #24]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f1c3 0307 	rsb	r3, r3, #7
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	bf28      	it	cs
 8002bc6:	2304      	movcs	r3, #4
 8002bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d902      	bls.n	8002bd8 <NVIC_EncodePriority+0x30>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3b03      	subs	r3, #3
 8002bd6:	e000      	b.n	8002bda <NVIC_EncodePriority+0x32>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	401a      	ands	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43d9      	mvns	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	4313      	orrs	r3, r2
         );
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	; 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ff4f 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c34:	f7ff ff64 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f7ff ffb2 	bl	8002ba8 <NVIC_EncodePriority>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff81 	bl	8002b54 <__NVIC_SetPriority>
}
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff57 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b08b      	sub	sp, #44	; 0x2c
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c8a:	e169      	b.n	8002f60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f040 8158 	bne.w	8002f5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a9a      	ldr	r2, [pc, #616]	; (8002f18 <HAL_GPIO_Init+0x2a0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d05e      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cb4:	4a98      	ldr	r2, [pc, #608]	; (8002f18 <HAL_GPIO_Init+0x2a0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d875      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cba:	4a98      	ldr	r2, [pc, #608]	; (8002f1c <HAL_GPIO_Init+0x2a4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d058      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cc0:	4a96      	ldr	r2, [pc, #600]	; (8002f1c <HAL_GPIO_Init+0x2a4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d86f      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cc6:	4a96      	ldr	r2, [pc, #600]	; (8002f20 <HAL_GPIO_Init+0x2a8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d052      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002ccc:	4a94      	ldr	r2, [pc, #592]	; (8002f20 <HAL_GPIO_Init+0x2a8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d869      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cd2:	4a94      	ldr	r2, [pc, #592]	; (8002f24 <HAL_GPIO_Init+0x2ac>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d04c      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cd8:	4a92      	ldr	r2, [pc, #584]	; (8002f24 <HAL_GPIO_Init+0x2ac>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d863      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cde:	4a92      	ldr	r2, [pc, #584]	; (8002f28 <HAL_GPIO_Init+0x2b0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d046      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002ce4:	4a90      	ldr	r2, [pc, #576]	; (8002f28 <HAL_GPIO_Init+0x2b0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d85d      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cea:	2b12      	cmp	r3, #18
 8002cec:	d82a      	bhi.n	8002d44 <HAL_GPIO_Init+0xcc>
 8002cee:	2b12      	cmp	r3, #18
 8002cf0:	d859      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cf2:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <HAL_GPIO_Init+0x80>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d73 	.word	0x08002d73
 8002cfc:	08002d4d 	.word	0x08002d4d
 8002d00:	08002d5f 	.word	0x08002d5f
 8002d04:	08002da1 	.word	0x08002da1
 8002d08:	08002da7 	.word	0x08002da7
 8002d0c:	08002da7 	.word	0x08002da7
 8002d10:	08002da7 	.word	0x08002da7
 8002d14:	08002da7 	.word	0x08002da7
 8002d18:	08002da7 	.word	0x08002da7
 8002d1c:	08002da7 	.word	0x08002da7
 8002d20:	08002da7 	.word	0x08002da7
 8002d24:	08002da7 	.word	0x08002da7
 8002d28:	08002da7 	.word	0x08002da7
 8002d2c:	08002da7 	.word	0x08002da7
 8002d30:	08002da7 	.word	0x08002da7
 8002d34:	08002da7 	.word	0x08002da7
 8002d38:	08002da7 	.word	0x08002da7
 8002d3c:	08002d55 	.word	0x08002d55
 8002d40:	08002d69 	.word	0x08002d69
 8002d44:	4a79      	ldr	r2, [pc, #484]	; (8002f2c <HAL_GPIO_Init+0x2b4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d4a:	e02c      	b.n	8002da6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e029      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	623b      	str	r3, [r7, #32]
          break;
 8002d5c:	e024      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	3308      	adds	r3, #8
 8002d64:	623b      	str	r3, [r7, #32]
          break;
 8002d66:	e01f      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	623b      	str	r3, [r7, #32]
          break;
 8002d70:	e01a      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	623b      	str	r3, [r7, #32]
          break;
 8002d7e:	e013      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	611a      	str	r2, [r3, #16]
          break;
 8002d92:	e009      	b.n	8002da8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d94:	2308      	movs	r3, #8
 8002d96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	615a      	str	r2, [r3, #20]
          break;
 8002d9e:	e003      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]
          break;
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          break;
 8002da6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2bff      	cmp	r3, #255	; 0xff
 8002dac:	d801      	bhi.n	8002db2 <HAL_GPIO_Init+0x13a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	e001      	b.n	8002db6 <HAL_GPIO_Init+0x13e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3304      	adds	r3, #4
 8002db6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2bff      	cmp	r3, #255	; 0xff
 8002dbc:	d802      	bhi.n	8002dc4 <HAL_GPIO_Init+0x14c>
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	e002      	b.n	8002dca <HAL_GPIO_Init+0x152>
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	3b08      	subs	r3, #8
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	210f      	movs	r1, #15
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	401a      	ands	r2, r3
 8002ddc:	6a39      	ldr	r1, [r7, #32]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	431a      	orrs	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80b1 	beq.w	8002f5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002df8:	4b4d      	ldr	r3, [pc, #308]	; (8002f30 <HAL_GPIO_Init+0x2b8>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	4a4c      	ldr	r2, [pc, #304]	; (8002f30 <HAL_GPIO_Init+0x2b8>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6193      	str	r3, [r2, #24]
 8002e04:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <HAL_GPIO_Init+0x2b8>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e10:	4a48      	ldr	r2, [pc, #288]	; (8002f34 <HAL_GPIO_Init+0x2bc>)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a40      	ldr	r2, [pc, #256]	; (8002f38 <HAL_GPIO_Init+0x2c0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_GPIO_Init+0x1ec>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a3f      	ldr	r2, [pc, #252]	; (8002f3c <HAL_GPIO_Init+0x2c4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00d      	beq.n	8002e60 <HAL_GPIO_Init+0x1e8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a3e      	ldr	r2, [pc, #248]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <HAL_GPIO_Init+0x1e4>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a3d      	ldr	r2, [pc, #244]	; (8002f44 <HAL_GPIO_Init+0x2cc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_GPIO_Init+0x1e0>
 8002e54:	2303      	movs	r3, #3
 8002e56:	e006      	b.n	8002e66 <HAL_GPIO_Init+0x1ee>
 8002e58:	2304      	movs	r3, #4
 8002e5a:	e004      	b.n	8002e66 <HAL_GPIO_Init+0x1ee>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e002      	b.n	8002e66 <HAL_GPIO_Init+0x1ee>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_GPIO_Init+0x1ee>
 8002e64:	2300      	movs	r3, #0
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	f002 0203 	and.w	r2, r2, #3
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	4093      	lsls	r3, r2
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e76:	492f      	ldr	r1, [pc, #188]	; (8002f34 <HAL_GPIO_Init+0x2bc>)
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e90:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	492c      	ldr	r1, [pc, #176]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	4928      	ldr	r1, [pc, #160]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002eb8:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	4922      	ldr	r1, [pc, #136]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60cb      	str	r3, [r1, #12]
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ec6:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	491e      	ldr	r1, [pc, #120]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4918      	ldr	r1, [pc, #96]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eee:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	4914      	ldr	r1, [pc, #80]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d021      	beq.n	8002f4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	490e      	ldr	r1, [pc, #56]	; (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
 8002f14:	e021      	b.n	8002f5a <HAL_GPIO_Init+0x2e2>
 8002f16:	bf00      	nop
 8002f18:	10320000 	.word	0x10320000
 8002f1c:	10310000 	.word	0x10310000
 8002f20:	10220000 	.word	0x10220000
 8002f24:	10210000 	.word	0x10210000
 8002f28:	10120000 	.word	0x10120000
 8002f2c:	10110000 	.word	0x10110000
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40010800 	.word	0x40010800
 8002f3c:	40010c00 	.word	0x40010c00
 8002f40:	40011000 	.word	0x40011000
 8002f44:	40011400 	.word	0x40011400
 8002f48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_GPIO_Init+0x304>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	4909      	ldr	r1, [pc, #36]	; (8002f7c <HAL_GPIO_Init+0x304>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f47f ae8e 	bne.w	8002c8c <HAL_GPIO_Init+0x14>
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	372c      	adds	r7, #44	; 0x2c
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40010400 	.word	0x40010400

08002f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f90:	787b      	ldrb	r3, [r7, #1]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f9c:	e003      	b.n	8002fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f9e:	887b      	ldrh	r3, [r7, #2]
 8002fa0:	041a      	lsls	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	041a      	lsls	r2, r3, #16
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	43d9      	mvns	r1, r3
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	400b      	ands	r3, r1
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	611a      	str	r2, [r3, #16]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e272      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8087 	beq.w	8003112 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003004:	4b92      	ldr	r3, [pc, #584]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b04      	cmp	r3, #4
 800300e:	d00c      	beq.n	800302a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003010:	4b8f      	ldr	r3, [pc, #572]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b08      	cmp	r3, #8
 800301a:	d112      	bne.n	8003042 <HAL_RCC_OscConfig+0x5e>
 800301c:	4b8c      	ldr	r3, [pc, #560]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003028:	d10b      	bne.n	8003042 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302a:	4b89      	ldr	r3, [pc, #548]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d06c      	beq.n	8003110 <HAL_RCC_OscConfig+0x12c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d168      	bne.n	8003110 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e24c      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x76>
 800304c:	4b80      	ldr	r3, [pc, #512]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a7f      	ldr	r2, [pc, #508]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	e02e      	b.n	80030b8 <HAL_RCC_OscConfig+0xd4>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x98>
 8003062:	4b7b      	ldr	r3, [pc, #492]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a7a      	ldr	r2, [pc, #488]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b78      	ldr	r3, [pc, #480]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a77      	ldr	r2, [pc, #476]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e01d      	b.n	80030b8 <HAL_RCC_OscConfig+0xd4>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0xbc>
 8003086:	4b72      	ldr	r3, [pc, #456]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a71      	ldr	r2, [pc, #452]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6e      	ldr	r2, [pc, #440]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0xd4>
 80030a0:	4b6b      	ldr	r3, [pc, #428]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a6a      	ldr	r2, [pc, #424]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b68      	ldr	r3, [pc, #416]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a67      	ldr	r2, [pc, #412]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe ff7e 	bl	8001fc0 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fe ff7a 	bl	8001fc0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e200      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b5d      	ldr	r3, [pc, #372]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0xe4>
 80030e6:	e014      	b.n	8003112 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe ff6a 	bl	8001fc0 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe ff66 	bl	8001fc0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1ec      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x10c>
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d063      	beq.n	80031e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800311e:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800312a:	4b49      	ldr	r3, [pc, #292]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b08      	cmp	r3, #8
 8003134:	d11c      	bne.n	8003170 <HAL_RCC_OscConfig+0x18c>
 8003136:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x176>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e1c0      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4939      	ldr	r1, [pc, #228]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	e03a      	b.n	80031e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003178:	4b36      	ldr	r3, [pc, #216]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe ff1f 	bl	8001fc0 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003186:	f7fe ff1b 	bl	8001fc0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1a1      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4927      	ldr	r1, [pc, #156]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
 80031b8:	e015      	b.n	80031e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ba:	4b26      	ldr	r3, [pc, #152]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fe fefe 	bl	8001fc0 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fe fefa 	bl	8001fc0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e180      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d03a      	beq.n	8003268 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d019      	beq.n	800322e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fa:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_RCC_OscConfig+0x274>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003200:	f7fe fede 	bl	8001fc0 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003208:	f7fe feda 	bl	8001fc0 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e160      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003226:	2001      	movs	r0, #1
 8003228:	f000 fafe 	bl	8003828 <RCC_Delay>
 800322c:	e01c      	b.n	8003268 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <HAL_RCC_OscConfig+0x274>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003234:	f7fe fec4 	bl	8001fc0 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323a:	e00f      	b.n	800325c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323c:	f7fe fec0 	bl	8001fc0 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d908      	bls.n	800325c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e146      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	42420000 	.word	0x42420000
 8003258:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325c:	4b92      	ldr	r3, [pc, #584]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e9      	bne.n	800323c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80a6 	beq.w	80033c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003276:	2300      	movs	r3, #0
 8003278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327a:	4b8b      	ldr	r3, [pc, #556]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	4a87      	ldr	r2, [pc, #540]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	61d3      	str	r3, [r2, #28]
 8003292:	4b85      	ldr	r3, [pc, #532]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b82      	ldr	r3, [pc, #520]	; (80034ac <HAL_RCC_OscConfig+0x4c8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b7f      	ldr	r3, [pc, #508]	; (80034ac <HAL_RCC_OscConfig+0x4c8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a7e      	ldr	r2, [pc, #504]	; (80034ac <HAL_RCC_OscConfig+0x4c8>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fe fe81 	bl	8001fc0 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fe fe7d 	bl	8001fc0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b64      	cmp	r3, #100	; 0x64
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e103      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b75      	ldr	r3, [pc, #468]	; (80034ac <HAL_RCC_OscConfig+0x4c8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x312>
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4a6e      	ldr	r2, [pc, #440]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6213      	str	r3, [r2, #32]
 80032f4:	e02d      	b.n	8003352 <HAL_RCC_OscConfig+0x36e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x334>
 80032fe:	4b6a      	ldr	r3, [pc, #424]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4a69      	ldr	r2, [pc, #420]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	f023 0301 	bic.w	r3, r3, #1
 8003308:	6213      	str	r3, [r2, #32]
 800330a:	4b67      	ldr	r3, [pc, #412]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4a66      	ldr	r2, [pc, #408]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003310:	f023 0304 	bic.w	r3, r3, #4
 8003314:	6213      	str	r3, [r2, #32]
 8003316:	e01c      	b.n	8003352 <HAL_RCC_OscConfig+0x36e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b05      	cmp	r3, #5
 800331e:	d10c      	bne.n	800333a <HAL_RCC_OscConfig+0x356>
 8003320:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	4a60      	ldr	r2, [pc, #384]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003326:	f043 0304 	orr.w	r3, r3, #4
 800332a:	6213      	str	r3, [r2, #32]
 800332c:	4b5e      	ldr	r3, [pc, #376]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	4a5d      	ldr	r2, [pc, #372]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6213      	str	r3, [r2, #32]
 8003338:	e00b      	b.n	8003352 <HAL_RCC_OscConfig+0x36e>
 800333a:	4b5b      	ldr	r3, [pc, #364]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4a5a      	ldr	r2, [pc, #360]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	6213      	str	r3, [r2, #32]
 8003346:	4b58      	ldr	r3, [pc, #352]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4a57      	ldr	r2, [pc, #348]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 800334c:	f023 0304 	bic.w	r3, r3, #4
 8003350:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d015      	beq.n	8003386 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335a:	f7fe fe31 	bl	8001fc0 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7fe fe2d 	bl	8001fc0 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e0b1      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	4b4b      	ldr	r3, [pc, #300]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ee      	beq.n	8003362 <HAL_RCC_OscConfig+0x37e>
 8003384:	e014      	b.n	80033b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003386:	f7fe fe1b 	bl	8001fc0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fe fe17 	bl	8001fc0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e09b      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a4:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1ee      	bne.n	800338e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d105      	bne.n	80033c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b6:	4b3c      	ldr	r3, [pc, #240]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	4a3b      	ldr	r2, [pc, #236]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8087 	beq.w	80034da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d061      	beq.n	800349c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d146      	bne.n	800346e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e0:	4b33      	ldr	r3, [pc, #204]	; (80034b0 <HAL_RCC_OscConfig+0x4cc>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e6:	f7fe fdeb 	bl	8001fc0 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fe fde7 	bl	8001fc0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e06d      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003400:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003414:	d108      	bne.n	8003428 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003416:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	4921      	ldr	r1, [pc, #132]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003428:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a19      	ldr	r1, [r3, #32]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	430b      	orrs	r3, r1
 800343a:	491b      	ldr	r1, [pc, #108]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <HAL_RCC_OscConfig+0x4cc>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003446:	f7fe fdbb 	bl	8001fc0 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344e:	f7fe fdb7 	bl	8001fc0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e03d      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x46a>
 800346c:	e035      	b.n	80034da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <HAL_RCC_OscConfig+0x4cc>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe fda4 	bl	8001fc0 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe fda0 	bl	8001fc0 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e026      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_OscConfig+0x4c4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x498>
 800349a:	e01e      	b.n	80034da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d107      	bne.n	80034b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e019      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40007000 	.word	0x40007000
 80034b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_OscConfig+0x500>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000

080034e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0d0      	b.n	800369e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034fc:	4b6a      	ldr	r3, [pc, #424]	; (80036a8 <HAL_RCC_ClockConfig+0x1c0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d910      	bls.n	800352c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b67      	ldr	r3, [pc, #412]	; (80036a8 <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 0207 	bic.w	r2, r3, #7
 8003512:	4965      	ldr	r1, [pc, #404]	; (80036a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0b8      	b.n	800369e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d020      	beq.n	800357a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4a58      	ldr	r2, [pc, #352]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800354e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a52      	ldr	r2, [pc, #328]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003566:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003568:	4b50      	ldr	r3, [pc, #320]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	494d      	ldr	r1, [pc, #308]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d040      	beq.n	8003608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d115      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e07f      	b.n	800369e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	4b41      	ldr	r3, [pc, #260]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e073      	b.n	800369e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b6:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e06b      	b.n	800369e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c6:	4b39      	ldr	r3, [pc, #228]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f023 0203 	bic.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4936      	ldr	r1, [pc, #216]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d8:	f7fe fcf2 	bl	8001fc0 <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e0:	f7fe fcee 	bl	8001fc0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e053      	b.n	800369e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 020c 	and.w	r2, r3, #12
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	429a      	cmp	r2, r3
 8003606:	d1eb      	bne.n	80035e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003608:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <HAL_RCC_ClockConfig+0x1c0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d210      	bcs.n	8003638 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 0207 	bic.w	r2, r3, #7
 800361e:	4922      	ldr	r1, [pc, #136]	; (80036a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e032      	b.n	800369e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4916      	ldr	r1, [pc, #88]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	490e      	ldr	r1, [pc, #56]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003676:	f000 f821 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 800367a:	4602      	mov	r2, r0
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	490a      	ldr	r1, [pc, #40]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003688:	5ccb      	ldrb	r3, [r1, r3]
 800368a:	fa22 f303 	lsr.w	r3, r2, r3
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe f810 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40022000 	.word	0x40022000
 80036ac:	40021000 	.word	0x40021000
 80036b0:	0800c900 	.word	0x0800c900
 80036b4:	20000000 	.word	0x20000000
 80036b8:	20000004 	.word	0x20000004

080036bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036d6:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <HAL_RCC_GetSysClockFreq+0x94>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d002      	beq.n	80036ec <HAL_RCC_GetSysClockFreq+0x30>
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d003      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0x36>
 80036ea:	e027      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_RCC_GetSysClockFreq+0x98>)
 80036ee:	613b      	str	r3, [r7, #16]
      break;
 80036f0:	e027      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	0c9b      	lsrs	r3, r3, #18
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036fc:	5cd3      	ldrb	r3, [r2, r3]
 80036fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d010      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800370a:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_RCC_GetSysClockFreq+0x94>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	0c5b      	lsrs	r3, r3, #17
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	4a11      	ldr	r2, [pc, #68]	; (800375c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003716:	5cd3      	ldrb	r3, [r2, r3]
 8003718:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a0d      	ldr	r2, [pc, #52]	; (8003754 <HAL_RCC_GetSysClockFreq+0x98>)
 800371e:	fb03 f202 	mul.w	r2, r3, r2
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e004      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a0c      	ldr	r2, [pc, #48]	; (8003760 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003730:	fb02 f303 	mul.w	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	613b      	str	r3, [r7, #16]
      break;
 800373a:	e002      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCC_GetSysClockFreq+0x98>)
 800373e:	613b      	str	r3, [r7, #16]
      break;
 8003740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003742:	693b      	ldr	r3, [r7, #16]
}
 8003744:	4618      	mov	r0, r3
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	007a1200 	.word	0x007a1200
 8003758:	0800c918 	.word	0x0800c918
 800375c:	0800c928 	.word	0x0800c928
 8003760:	003d0900 	.word	0x003d0900

08003764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003768:	4b02      	ldr	r3, [pc, #8]	; (8003774 <HAL_RCC_GetHCLKFreq+0x10>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	20000000 	.word	0x20000000

08003778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800377c:	f7ff fff2 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4903      	ldr	r1, [pc, #12]	; (800379c <HAL_RCC_GetPCLK1Freq+0x24>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	0800c910 	.word	0x0800c910

080037a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037a4:	f7ff ffde 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	0adb      	lsrs	r3, r3, #11
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b6:	5ccb      	ldrb	r3, [r1, r3]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000
 80037c4:	0800c910 	.word	0x0800c910

080037c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	220f      	movs	r2, #15
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_RCC_GetClockConfig+0x58>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0203 	and.w	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037e4:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_RCC_GetClockConfig+0x58>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_GetClockConfig+0x58>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <HAL_RCC_GetClockConfig+0x58>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	08db      	lsrs	r3, r3, #3
 8003802:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCC_GetClockConfig+0x5c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0207 	and.w	r2, r3, #7
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	40021000 	.word	0x40021000
 8003824:	40022000 	.word	0x40022000

08003828 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <RCC_Delay+0x34>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <RCC_Delay+0x38>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0a5b      	lsrs	r3, r3, #9
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003844:	bf00      	nop
  }
  while (Delay --);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1e5a      	subs	r2, r3, #1
 800384a:	60fa      	str	r2, [r7, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f9      	bne.n	8003844 <RCC_Delay+0x1c>
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	20000000 	.word	0x20000000
 8003860:	10624dd3 	.word	0x10624dd3

08003864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e041      	b.n	80038fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fe f9f4 	bl	8001c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f000 fd76 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d001      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e03a      	b.n	8003992 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a18      	ldr	r2, [pc, #96]	; (800399c <HAL_TIM_Base_Start_IT+0x98>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00e      	beq.n	800395c <HAL_TIM_Base_Start_IT+0x58>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003946:	d009      	beq.n	800395c <HAL_TIM_Base_Start_IT+0x58>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <HAL_TIM_Base_Start_IT+0x58>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d111      	bne.n	8003980 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b06      	cmp	r3, #6
 800396c:	d010      	beq.n	8003990 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397e:	e007      	b.n	8003990 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40000800 	.word	0x40000800

080039a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e041      	b.n	8003a3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f839 	bl	8003a46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	4619      	mov	r1, r3
 80039e6:	4610      	mov	r0, r2
 80039e8:	f000 fcd4 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_TIM_PWM_Start+0x24>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e022      	b.n	8003ac2 <HAL_TIM_PWM_Start+0x6a>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d109      	bne.n	8003a96 <HAL_TIM_PWM_Start+0x3e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	bf14      	ite	ne
 8003a8e:	2301      	movne	r3, #1
 8003a90:	2300      	moveq	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	e015      	b.n	8003ac2 <HAL_TIM_PWM_Start+0x6a>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d109      	bne.n	8003ab0 <HAL_TIM_PWM_Start+0x58>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e008      	b.n	8003ac2 <HAL_TIM_PWM_Start+0x6a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e05e      	b.n	8003b88 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_PWM_Start+0x82>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad8:	e013      	b.n	8003b02 <HAL_TIM_PWM_Start+0xaa>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_PWM_Start+0x92>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ae8:	e00b      	b.n	8003b02 <HAL_TIM_PWM_Start+0xaa>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d104      	bne.n	8003afa <HAL_TIM_PWM_Start+0xa2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af8:	e003      	b.n	8003b02 <HAL_TIM_PWM_Start+0xaa>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2202      	movs	r2, #2
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2201      	movs	r2, #1
 8003b08:	6839      	ldr	r1, [r7, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fec2 	bl	8004894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <HAL_TIM_PWM_Start+0x138>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d107      	bne.n	8003b2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_TIM_PWM_Start+0x138>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_TIM_PWM_Start+0xfa>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3c:	d009      	beq.n	8003b52 <HAL_TIM_PWM_Start+0xfa>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <HAL_TIM_PWM_Start+0x13c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_TIM_PWM_Start+0xfa>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <HAL_TIM_PWM_Start+0x140>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d111      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b06      	cmp	r3, #6
 8003b62:	d010      	beq.n	8003b86 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b74:	e007      	b.n	8003b86 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800

08003b9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e093      	b.n	8003cd8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7fe f889 	bl	8001cdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be0:	f023 0307 	bic.w	r3, r3, #7
 8003be4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f000 fbcf 	bl	8004394 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1e:	f023 0303 	bic.w	r3, r3, #3
 8003c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c3c:	f023 030c 	bic.w	r3, r3, #12
 8003c40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	011a      	lsls	r2, r3, #4
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	031b      	lsls	r3, r3, #12
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	4313      	orrs	r3, r2
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cf8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d00:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d08:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d110      	bne.n	8003d32 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d102      	bne.n	8003d1c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d16:	7b7b      	ldrb	r3, [r7, #13]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d001      	beq.n	8003d20 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e089      	b.n	8003e34 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d30:	e031      	b.n	8003d96 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d110      	bne.n	8003d5a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d38:	7bbb      	ldrb	r3, [r7, #14]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d102      	bne.n	8003d44 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d3e:	7b3b      	ldrb	r3, [r7, #12]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d001      	beq.n	8003d48 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e075      	b.n	8003e34 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d58:	e01d      	b.n	8003d96 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d108      	bne.n	8003d72 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d60:	7bbb      	ldrb	r3, [r7, #14]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d105      	bne.n	8003d72 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d66:	7b7b      	ldrb	r3, [r7, #13]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d102      	bne.n	8003d72 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d6c:	7b3b      	ldrb	r3, [r7, #12]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d001      	beq.n	8003d76 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e05e      	b.n	8003e34 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d010      	beq.n	8003dc4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003da2:	e01f      	b.n	8003de4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2201      	movs	r2, #1
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fd71 	bl	8004894 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0202 	orr.w	r2, r2, #2
 8003dc0:	60da      	str	r2, [r3, #12]
      break;
 8003dc2:	e02e      	b.n	8003e22 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	2104      	movs	r1, #4
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fd61 	bl	8004894 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0204 	orr.w	r2, r2, #4
 8003de0:	60da      	str	r2, [r3, #12]
      break;
 8003de2:	e01e      	b.n	8003e22 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2201      	movs	r2, #1
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fd51 	bl	8004894 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	2104      	movs	r1, #4
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fd4a 	bl	8004894 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0202 	orr.w	r2, r2, #2
 8003e0e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0204 	orr.w	r2, r2, #4
 8003e1e:	60da      	str	r2, [r3, #12]
      break;
 8003e20:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d122      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d11b      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0202 	mvn.w	r2, #2
 8003e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f003 fca8 	bl	80077d4 <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fa69 	bl	800435e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fa6f 	bl	8004370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d122      	bne.n	8003eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d11b      	bne.n	8003eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0204 	mvn.w	r2, #4
 8003ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f003 fc7e 	bl	80077d4 <HAL_TIM_IC_CaptureCallback>
 8003ed8:	e005      	b.n	8003ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fa3f 	bl	800435e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fa45 	bl	8004370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d122      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d11b      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0208 	mvn.w	r2, #8
 8003f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2204      	movs	r2, #4
 8003f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f003 fc54 	bl	80077d4 <HAL_TIM_IC_CaptureCallback>
 8003f2c:	e005      	b.n	8003f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fa15 	bl	800435e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fa1b 	bl	8004370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d122      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d11b      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0210 	mvn.w	r2, #16
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2208      	movs	r2, #8
 8003f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f003 fc2a 	bl	80077d4 <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f9eb 	bl	800435e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f9f1 	bl	8004370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d107      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0201 	mvn.w	r2, #1
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd fb2e 	bl	800161c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fca:	2b80      	cmp	r3, #128	; 0x80
 8003fcc:	d10e      	bne.n	8003fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d107      	bne.n	8003fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fd30 	bl	8004a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b40      	cmp	r3, #64	; 0x40
 8003ff8:	d10e      	bne.n	8004018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d107      	bne.n	8004018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f9b5 	bl	8004382 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b20      	cmp	r3, #32
 8004024:	d10e      	bne.n	8004044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b20      	cmp	r3, #32
 8004032:	d107      	bne.n	8004044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0220 	mvn.w	r2, #32
 800403c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fcfb 	bl	8004a3a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004066:	2302      	movs	r3, #2
 8004068:	e0ae      	b.n	80041c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b0c      	cmp	r3, #12
 8004076:	f200 809f 	bhi.w	80041b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	080040b5 	.word	0x080040b5
 8004084:	080041b9 	.word	0x080041b9
 8004088:	080041b9 	.word	0x080041b9
 800408c:	080041b9 	.word	0x080041b9
 8004090:	080040f5 	.word	0x080040f5
 8004094:	080041b9 	.word	0x080041b9
 8004098:	080041b9 	.word	0x080041b9
 800409c:	080041b9 	.word	0x080041b9
 80040a0:	08004137 	.word	0x08004137
 80040a4:	080041b9 	.word	0x080041b9
 80040a8:	080041b9 	.word	0x080041b9
 80040ac:	080041b9 	.word	0x080041b9
 80040b0:	08004177 	.word	0x08004177
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f9cc 	bl	8004458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0208 	orr.w	r2, r2, #8
 80040ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0204 	bic.w	r2, r2, #4
 80040de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6999      	ldr	r1, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	619a      	str	r2, [r3, #24]
      break;
 80040f2:	e064      	b.n	80041be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fa12 	bl	8004524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6999      	ldr	r1, [r3, #24]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	021a      	lsls	r2, r3, #8
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	619a      	str	r2, [r3, #24]
      break;
 8004134:	e043      	b.n	80041be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fa5b 	bl	80045f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0208 	orr.w	r2, r2, #8
 8004150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0204 	bic.w	r2, r2, #4
 8004160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69d9      	ldr	r1, [r3, #28]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	61da      	str	r2, [r3, #28]
      break;
 8004174:	e023      	b.n	80041be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 faa5 	bl	80046cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69d9      	ldr	r1, [r3, #28]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	021a      	lsls	r2, r3, #8
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	61da      	str	r2, [r3, #28]
      break;
 80041b6:	e002      	b.n	80041be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	75fb      	strb	r3, [r7, #23]
      break;
 80041bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_TIM_ConfigClockSource+0x1c>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e0b4      	b.n	8004356 <HAL_TIM_ConfigClockSource+0x186>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800420a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004224:	d03e      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422a:	f200 8087 	bhi.w	800433c <HAL_TIM_ConfigClockSource+0x16c>
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	f000 8086 	beq.w	8004342 <HAL_TIM_ConfigClockSource+0x172>
 8004236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423a:	d87f      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x16c>
 800423c:	2b70      	cmp	r3, #112	; 0x70
 800423e:	d01a      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0xa6>
 8004240:	2b70      	cmp	r3, #112	; 0x70
 8004242:	d87b      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x16c>
 8004244:	2b60      	cmp	r3, #96	; 0x60
 8004246:	d050      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x11a>
 8004248:	2b60      	cmp	r3, #96	; 0x60
 800424a:	d877      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x16c>
 800424c:	2b50      	cmp	r3, #80	; 0x50
 800424e:	d03c      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0xfa>
 8004250:	2b50      	cmp	r3, #80	; 0x50
 8004252:	d873      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x16c>
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d058      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x13a>
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	d86f      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x16c>
 800425c:	2b30      	cmp	r3, #48	; 0x30
 800425e:	d064      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x15a>
 8004260:	2b30      	cmp	r3, #48	; 0x30
 8004262:	d86b      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x16c>
 8004264:	2b20      	cmp	r3, #32
 8004266:	d060      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x15a>
 8004268:	2b20      	cmp	r3, #32
 800426a:	d867      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x16c>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d05c      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x15a>
 8004270:	2b10      	cmp	r3, #16
 8004272:	d05a      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x15a>
 8004274:	e062      	b.n	800433c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004286:	f000 fae6 	bl	8004856 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004298:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	609a      	str	r2, [r3, #8]
      break;
 80042a2:	e04f      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042b4:	f000 facf 	bl	8004856 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042c6:	609a      	str	r2, [r3, #8]
      break;
 80042c8:	e03c      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d6:	461a      	mov	r2, r3
 80042d8:	f000 fa46 	bl	8004768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2150      	movs	r1, #80	; 0x50
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fa9d 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 80042e8:	e02c      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042f6:	461a      	mov	r2, r3
 80042f8:	f000 fa64 	bl	80047c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2160      	movs	r1, #96	; 0x60
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fa8d 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 8004308:	e01c      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004316:	461a      	mov	r2, r3
 8004318:	f000 fa26 	bl	8004768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2140      	movs	r1, #64	; 0x40
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fa7d 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 8004328:	e00c      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f000 fa74 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 800433a:	e003      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
      break;
 8004340:	e000      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004354:	7bfb      	ldrb	r3, [r7, #15]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr

08004382 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a29      	ldr	r2, [pc, #164]	; (800444c <TIM_Base_SetConfig+0xb8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00b      	beq.n	80043c4 <TIM_Base_SetConfig+0x30>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b2:	d007      	beq.n	80043c4 <TIM_Base_SetConfig+0x30>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a26      	ldr	r2, [pc, #152]	; (8004450 <TIM_Base_SetConfig+0xbc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_Base_SetConfig+0x30>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a25      	ldr	r2, [pc, #148]	; (8004454 <TIM_Base_SetConfig+0xc0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d108      	bne.n	80043d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a1c      	ldr	r2, [pc, #112]	; (800444c <TIM_Base_SetConfig+0xb8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00b      	beq.n	80043f6 <TIM_Base_SetConfig+0x62>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e4:	d007      	beq.n	80043f6 <TIM_Base_SetConfig+0x62>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a19      	ldr	r2, [pc, #100]	; (8004450 <TIM_Base_SetConfig+0xbc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d003      	beq.n	80043f6 <TIM_Base_SetConfig+0x62>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a18      	ldr	r2, [pc, #96]	; (8004454 <TIM_Base_SetConfig+0xc0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d108      	bne.n	8004408 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a07      	ldr	r2, [pc, #28]	; (800444c <TIM_Base_SetConfig+0xb8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d103      	bne.n	800443c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	615a      	str	r2, [r3, #20]
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800

08004458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f023 0201 	bic.w	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f023 0302 	bic.w	r3, r3, #2
 80044a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a1c      	ldr	r2, [pc, #112]	; (8004520 <TIM_OC1_SetConfig+0xc8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10c      	bne.n	80044ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f023 0308 	bic.w	r3, r3, #8
 80044ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 0304 	bic.w	r3, r3, #4
 80044cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a13      	ldr	r2, [pc, #76]	; (8004520 <TIM_OC1_SetConfig+0xc8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d111      	bne.n	80044fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	621a      	str	r2, [r3, #32]
}
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40012c00 	.word	0x40012c00

08004524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f023 0210 	bic.w	r2, r3, #16
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f023 0320 	bic.w	r3, r3, #32
 800456e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <TIM_OC2_SetConfig+0xd0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d10d      	bne.n	80045a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800458a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <TIM_OC2_SetConfig+0xd0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d113      	bne.n	80045d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	40012c00 	.word	0x40012c00

080045f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <TIM_OC3_SetConfig+0xd0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d10d      	bne.n	8004672 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800465c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <TIM_OC3_SetConfig+0xd0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d113      	bne.n	80046a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	621a      	str	r2, [r3, #32]
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40012c00 	.word	0x40012c00

080046cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	031b      	lsls	r3, r3, #12
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a0f      	ldr	r2, [pc, #60]	; (8004764 <TIM_OC4_SetConfig+0x98>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d109      	bne.n	8004740 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	019b      	lsls	r3, r3, #6
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	621a      	str	r2, [r3, #32]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr
 8004764:	40012c00 	.word	0x40012c00

08004768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f023 0201 	bic.w	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 030a 	bic.w	r3, r3, #10
 80047a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f023 0210 	bic.w	r2, r3, #16
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	031b      	lsls	r3, r3, #12
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004800:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	f043 0307 	orr.w	r3, r3, #7
 8004844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004856:	b480      	push	{r7}
 8004858:	b087      	sub	sp, #28
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
 8004862:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004870:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	021a      	lsls	r2, r3, #8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	431a      	orrs	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4313      	orrs	r3, r2
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4313      	orrs	r3, r2
 8004882:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	609a      	str	r2, [r3, #8]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2201      	movs	r2, #1
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1a      	ldr	r2, [r3, #32]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	401a      	ands	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	431a      	orrs	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e046      	b.n	8004982 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a16      	ldr	r2, [pc, #88]	; (800498c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00e      	beq.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004940:	d009      	beq.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a12      	ldr	r2, [pc, #72]	; (8004990 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d004      	beq.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a10      	ldr	r2, [pc, #64]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d10c      	bne.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800495c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	4313      	orrs	r3, r2
 8004966:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800

08004998 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e03d      	b.n	8004a30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr

08004a3a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr

08004a5e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e042      	b.n	8004af6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fd f9ed 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2224      	movs	r2, #36	; 0x24
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f91c 	bl	8004ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b08a      	sub	sp, #40	; 0x28
 8004b02:	af02      	add	r7, sp, #8
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d16d      	bne.n	8004bfa <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_UART_Transmit+0x2c>
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e066      	b.n	8004bfc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2221      	movs	r2, #33	; 0x21
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b3c:	f7fd fa40 	bl	8001fc0 <HAL_GetTick>
 8004b40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	88fa      	ldrh	r2, [r7, #6]
 8004b46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b56:	d108      	bne.n	8004b6a <HAL_UART_Transmit+0x6c>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	e003      	b.n	8004b72 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b72:	e02a      	b.n	8004bca <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2180      	movs	r1, #128	; 0x80
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f840 	bl	8004c04 <UART_WaitOnFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e036      	b.n	8004bfc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e007      	b.n	8004bbc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	781a      	ldrb	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1cf      	bne.n	8004b74 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2140      	movs	r1, #64	; 0x40
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f810 	bl	8004c04 <UART_WaitOnFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e006      	b.n	8004bfc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e000      	b.n	8004bfc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
  }
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b090      	sub	sp, #64	; 0x40
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c14:	e050      	b.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d04c      	beq.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c24:	f7fd f9cc 	bl	8001fc0 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d241      	bcs.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c54:	637a      	str	r2, [r7, #52]	; 0x34
 8004c56:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e5      	bne.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3314      	adds	r3, #20
 8004c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	613b      	str	r3, [r7, #16]
   return(result);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f023 0301 	bic.w	r3, r3, #1
 8004c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3314      	adds	r3, #20
 8004c86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c88:	623a      	str	r2, [r7, #32]
 8004c8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	69f9      	ldr	r1, [r7, #28]
 8004c8e:	6a3a      	ldr	r2, [r7, #32]
 8004c90:	e841 2300 	strex	r3, r2, [r1]
 8004c94:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e5      	bne.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e00f      	b.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2301      	moveq	r3, #1
 8004cca:	2300      	movne	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d09f      	beq.n	8004c16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3740      	adds	r7, #64	; 0x40
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d1a:	f023 030c 	bic.w	r3, r3, #12
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	430b      	orrs	r3, r1
 8004d26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a2c      	ldr	r2, [pc, #176]	; (8004df4 <UART_SetConfig+0x114>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d103      	bne.n	8004d50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d48:	f7fe fd2a 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	e002      	b.n	8004d56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d50:	f7fe fd12 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 8004d54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009a      	lsls	r2, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	4a22      	ldr	r2, [pc, #136]	; (8004df8 <UART_SetConfig+0x118>)
 8004d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	0119      	lsls	r1, r3, #4
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009a      	lsls	r2, r3, #2
 8004d80:	441a      	add	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d8c:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <UART_SetConfig+0x118>)
 8004d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	2064      	movs	r0, #100	; 0x64
 8004d96:	fb00 f303 	mul.w	r3, r0, r3
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	3332      	adds	r3, #50	; 0x32
 8004da0:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <UART_SetConfig+0x118>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dac:	4419      	add	r1, r3
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	009a      	lsls	r2, r3, #2
 8004db8:	441a      	add	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <UART_SetConfig+0x118>)
 8004dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2064      	movs	r0, #100	; 0x64
 8004dce:	fb00 f303 	mul.w	r3, r0, r3
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	3332      	adds	r3, #50	; 0x32
 8004dd8:	4a07      	ldr	r2, [pc, #28]	; (8004df8 <UART_SetConfig+0x118>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	f003 020f 	and.w	r2, r3, #15
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	440a      	add	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40013800 	.word	0x40013800
 8004df8:	51eb851f 	.word	0x51eb851f

08004dfc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e02:	f3ef 8305 	mrs	r3, IPSR
 8004e06:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10f      	bne.n	8004e2e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e12:	607b      	str	r3, [r7, #4]
  return(result);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <osKernelInitialize+0x32>
 8004e1a:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <osKernelInitialize+0x60>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d109      	bne.n	8004e36 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e22:	f3ef 8311 	mrs	r3, BASEPRI
 8004e26:	603b      	str	r3, [r7, #0]
  return(result);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004e2e:	f06f 0305 	mvn.w	r3, #5
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e00c      	b.n	8004e50 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <osKernelInitialize+0x60>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d105      	bne.n	8004e4a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <osKernelInitialize+0x60>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e002      	b.n	8004e50 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e50:	68fb      	ldr	r3, [r7, #12]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	20000468 	.word	0x20000468

08004e60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e66:	f3ef 8305 	mrs	r3, IPSR
 8004e6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10f      	bne.n	8004e92 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e72:	f3ef 8310 	mrs	r3, PRIMASK
 8004e76:	607b      	str	r3, [r7, #4]
  return(result);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d109      	bne.n	8004e92 <osKernelStart+0x32>
 8004e7e:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <osKernelStart+0x64>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d109      	bne.n	8004e9a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e86:	f3ef 8311 	mrs	r3, BASEPRI
 8004e8a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004e92:	f06f 0305 	mvn.w	r3, #5
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	e00e      	b.n	8004eb8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <osKernelStart+0x64>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d107      	bne.n	8004eb2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <osKernelStart+0x64>)
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004ea8:	f001 f878 	bl	8005f9c <vTaskStartScheduler>
      stat = osOK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e002      	b.n	8004eb8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000468 	.word	0x20000468

08004ec8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b092      	sub	sp, #72	; 0x48
 8004ecc:	af04      	add	r7, sp, #16
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ed8:	f3ef 8305 	mrs	r3, IPSR
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f040 8094 	bne.w	800500e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eea:	623b      	str	r3, [r7, #32]
  return(result);
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 808d 	bne.w	800500e <osThreadNew+0x146>
 8004ef4:	4b48      	ldr	r3, [pc, #288]	; (8005018 <osThreadNew+0x150>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d106      	bne.n	8004f0a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004efc:	f3ef 8311 	mrs	r3, BASEPRI
 8004f00:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f040 8082 	bne.w	800500e <osThreadNew+0x146>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d07e      	beq.n	800500e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004f14:	2318      	movs	r3, #24
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004f18:	2300      	movs	r3, #0
 8004f1a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004f1c:	f107 031b 	add.w	r3, r7, #27
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004f22:	f04f 33ff 	mov.w	r3, #4294967295
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d045      	beq.n	8004fba <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <osThreadNew+0x74>
        name = attr->name;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <osThreadNew+0x9a>
 8004f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f52:	2b38      	cmp	r3, #56	; 0x38
 8004f54:	d805      	bhi.n	8004f62 <osThreadNew+0x9a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <osThreadNew+0x9e>
        return (NULL);
 8004f62:	2300      	movs	r3, #0
 8004f64:	e054      	b.n	8005010 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	089b      	lsrs	r3, r3, #2
 8004f74:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00e      	beq.n	8004f9c <osThreadNew+0xd4>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	2b5b      	cmp	r3, #91	; 0x5b
 8004f84:	d90a      	bls.n	8004f9c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d006      	beq.n	8004f9c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <osThreadNew+0xd4>
        mem = 1;
 8004f96:	2301      	movs	r3, #1
 8004f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f9a:	e010      	b.n	8004fbe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10c      	bne.n	8004fbe <osThreadNew+0xf6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d108      	bne.n	8004fbe <osThreadNew+0xf6>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d104      	bne.n	8004fbe <osThreadNew+0xf6>
          mem = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb8:	e001      	b.n	8004fbe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d110      	bne.n	8004fe6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fcc:	9202      	str	r2, [sp, #8]
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fe12 	bl	8005c04 <xTaskCreateStatic>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	e013      	b.n	800500e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d110      	bne.n	800500e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	f107 0314 	add.w	r3, r7, #20
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fe5c 	bl	8005cbc <xTaskCreate>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d001      	beq.n	800500e <osThreadNew+0x146>
          hTask = NULL;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800500e:	697b      	ldr	r3, [r7, #20]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3738      	adds	r7, #56	; 0x38
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	20000468 	.word	0x20000468

0800501c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005024:	f3ef 8305 	mrs	r3, IPSR
 8005028:	613b      	str	r3, [r7, #16]
  return(result);
 800502a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10f      	bne.n	8005050 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005030:	f3ef 8310 	mrs	r3, PRIMASK
 8005034:	60fb      	str	r3, [r7, #12]
  return(result);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <osDelay+0x34>
 800503c:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <osDelay+0x58>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d109      	bne.n	8005058 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005044:	f3ef 8311 	mrs	r3, BASEPRI
 8005048:	60bb      	str	r3, [r7, #8]
  return(result);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <osDelay+0x3c>
    stat = osErrorISR;
 8005050:	f06f 0305 	mvn.w	r3, #5
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	e007      	b.n	8005068 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 ff66 	bl	8005f34 <vTaskDelay>
    }
  }

  return (stat);
 8005068:	697b      	ldr	r3, [r7, #20]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000468 	.word	0x20000468

08005078 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <vApplicationGetIdleTaskMemory+0x28>)
 8005088:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4a05      	ldr	r2, [pc, #20]	; (80050a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800508e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2280      	movs	r2, #128	; 0x80
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr
 80050a0:	2000046c 	.word	0x2000046c
 80050a4:	200004c8 	.word	0x200004c8

080050a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a07      	ldr	r2, [pc, #28]	; (80050d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80050b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4a06      	ldr	r2, [pc, #24]	; (80050d8 <vApplicationGetTimerTaskMemory+0x30>)
 80050be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050c6:	601a      	str	r2, [r3, #0]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	200006c8 	.word	0x200006c8
 80050d8:	20000724 	.word	0x20000724

080050dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f103 0208 	add.w	r2, r3, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f04f 32ff 	mov.w	r2, #4294967295
 80050f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f103 0208 	add.w	r2, r3, #8
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f103 0208 	add.w	r2, r3, #8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr

0800511a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
}
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr

08005178 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d103      	bne.n	8005198 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e00c      	b.n	80051b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3308      	adds	r3, #8
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e002      	b.n	80051a6 <vListInsert+0x2e>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d2f6      	bcs.n	80051a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	601a      	str	r2, [r3, #0]
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6892      	ldr	r2, [r2, #8]
 80051fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6852      	ldr	r2, [r2, #4]
 8005208:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	d103      	bne.n	800521c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	1e5a      	subs	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr
	...

0800523c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005266:	f001 ffc9 	bl	80071fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	441a      	add	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	3b01      	subs	r3, #1
 8005298:	68f9      	ldr	r1, [r7, #12]
 800529a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	441a      	add	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	22ff      	movs	r2, #255	; 0xff
 80052aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	22ff      	movs	r2, #255	; 0xff
 80052b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d114      	bne.n	80052e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01a      	beq.n	80052fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3310      	adds	r3, #16
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 f8f1 	bl	80064b0 <xTaskRemoveFromEventList>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d012      	beq.n	80052fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <xQueueGenericReset+0xcc>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	e009      	b.n	80052fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3310      	adds	r3, #16
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff fef6 	bl	80050dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3324      	adds	r3, #36	; 0x24
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fef1 	bl	80050dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052fa:	f001 ffaf 	bl	800725c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052fe:	2301      	movs	r3, #1
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08e      	sub	sp, #56	; 0x38
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <xQueueGenericCreateStatic+0x52>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <xQueueGenericCreateStatic+0x56>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <xQueueGenericCreateStatic+0x58>
 8005362:	2300      	movs	r3, #0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	623b      	str	r3, [r7, #32]
}
 800537a:	bf00      	nop
 800537c:	e7fe      	b.n	800537c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <xQueueGenericCreateStatic+0x7e>
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <xQueueGenericCreateStatic+0x82>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <xQueueGenericCreateStatic+0x84>
 800538e:	2300      	movs	r3, #0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	61fb      	str	r3, [r7, #28]
}
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053aa:	2350      	movs	r3, #80	; 0x50
 80053ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b50      	cmp	r3, #80	; 0x50
 80053b2:	d00a      	beq.n	80053ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	61bb      	str	r3, [r7, #24]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00d      	beq.n	80053f0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f805 	bl	80053fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3730      	adds	r7, #48	; 0x30
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	607a      	str	r2, [r7, #4]
 8005406:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d103      	bne.n	8005416 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	e002      	b.n	800541c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005428:	2101      	movs	r1, #1
 800542a:	69b8      	ldr	r0, [r7, #24]
 800542c:	f7ff ff06 	bl	800523c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	78fa      	ldrb	r2, [r7, #3]
 8005434:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08e      	sub	sp, #56	; 0x38
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800544e:	2300      	movs	r3, #0
 8005450:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <xQueueGenericSend+0x32>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d103      	bne.n	8005480 <xQueueGenericSend+0x40>
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <xQueueGenericSend+0x44>
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <xQueueGenericSend+0x46>
 8005484:	2300      	movs	r3, #0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10a      	bne.n	80054a0 <xQueueGenericSend+0x60>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800549c:	bf00      	nop
 800549e:	e7fe      	b.n	800549e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d103      	bne.n	80054ae <xQueueGenericSend+0x6e>
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <xQueueGenericSend+0x72>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <xQueueGenericSend+0x74>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <xQueueGenericSend+0x8e>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	623b      	str	r3, [r7, #32]
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054ce:	f001 f9b1 	bl	8006834 <xTaskGetSchedulerState>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <xQueueGenericSend+0x9e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <xQueueGenericSend+0xa2>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <xQueueGenericSend+0xa4>
 80054e2:	2300      	movs	r3, #0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <xQueueGenericSend+0xbe>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	61fb      	str	r3, [r7, #28]
}
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054fe:	f001 fe7d 	bl	80071fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550a:	429a      	cmp	r2, r3
 800550c:	d302      	bcc.n	8005514 <xQueueGenericSend+0xd4>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b02      	cmp	r3, #2
 8005512:	d129      	bne.n	8005568 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800551a:	f000 fa07 	bl	800592c <prvCopyDataToQueue>
 800551e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	2b00      	cmp	r3, #0
 8005526:	d010      	beq.n	800554a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	3324      	adds	r3, #36	; 0x24
 800552c:	4618      	mov	r0, r3
 800552e:	f000 ffbf 	bl	80064b0 <xTaskRemoveFromEventList>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d013      	beq.n	8005560 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005538:	4b3f      	ldr	r3, [pc, #252]	; (8005638 <xQueueGenericSend+0x1f8>)
 800553a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	e00a      	b.n	8005560 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	2b00      	cmp	r3, #0
 800554e:	d007      	beq.n	8005560 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005550:	4b39      	ldr	r3, [pc, #228]	; (8005638 <xQueueGenericSend+0x1f8>)
 8005552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005560:	f001 fe7c 	bl	800725c <vPortExitCritical>
				return pdPASS;
 8005564:	2301      	movs	r3, #1
 8005566:	e063      	b.n	8005630 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800556e:	f001 fe75 	bl	800725c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005572:	2300      	movs	r3, #0
 8005574:	e05c      	b.n	8005630 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800557c:	f107 0314 	add.w	r3, r7, #20
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fff9 	bl	8006578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005586:	2301      	movs	r3, #1
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800558a:	f001 fe67 	bl	800725c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800558e:	f000 fd6b 	bl	8006068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005592:	f001 fe33 	bl	80071fc <vPortEnterCritical>
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800559c:	b25b      	sxtb	r3, r3
 800559e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a2:	d103      	bne.n	80055ac <xQueueGenericSend+0x16c>
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055b2:	b25b      	sxtb	r3, r3
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d103      	bne.n	80055c2 <xQueueGenericSend+0x182>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055c2:	f001 fe4b 	bl	800725c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055c6:	1d3a      	adds	r2, r7, #4
 80055c8:	f107 0314 	add.w	r3, r7, #20
 80055cc:	4611      	mov	r1, r2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 ffe8 	bl	80065a4 <xTaskCheckForTimeOut>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d124      	bne.n	8005624 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055dc:	f000 fa9e 	bl	8005b1c <prvIsQueueFull>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d018      	beq.n	8005618 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	3310      	adds	r3, #16
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	4611      	mov	r1, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 ff0e 	bl	8006410 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055f6:	f000 fa29 	bl	8005a4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055fa:	f000 fd43 	bl	8006084 <xTaskResumeAll>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	f47f af7c 	bne.w	80054fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <xQueueGenericSend+0x1f8>)
 8005608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	e772      	b.n	80054fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800561a:	f000 fa17 	bl	8005a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800561e:	f000 fd31 	bl	8006084 <xTaskResumeAll>
 8005622:	e76c      	b.n	80054fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005626:	f000 fa11 	bl	8005a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800562a:	f000 fd2b 	bl	8006084 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800562e:	2300      	movs	r3, #0
		}
	}
}
 8005630:	4618      	mov	r0, r3
 8005632:	3738      	adds	r7, #56	; 0x38
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08e      	sub	sp, #56	; 0x38
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d103      	bne.n	8005678 <xQueueGenericSendFromISR+0x3c>
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <xQueueGenericSendFromISR+0x40>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <xQueueGenericSendFromISR+0x42>
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	623b      	str	r3, [r7, #32]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d103      	bne.n	80056a6 <xQueueGenericSendFromISR+0x6a>
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <xQueueGenericSendFromISR+0x6e>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <xQueueGenericSendFromISR+0x70>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	61fb      	str	r3, [r7, #28]
}
 80056c2:	bf00      	nop
 80056c4:	e7fe      	b.n	80056c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056c6:	f001 fe5b 	bl	8007380 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056ca:	f3ef 8211 	mrs	r2, BASEPRI
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	61ba      	str	r2, [r7, #24]
 80056e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d302      	bcc.n	80056f8 <xQueueGenericSendFromISR+0xbc>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d12c      	bne.n	8005752 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005708:	f000 f910 	bl	800592c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800570c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d112      	bne.n	800573c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	2b00      	cmp	r3, #0
 800571c:	d016      	beq.n	800574c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	3324      	adds	r3, #36	; 0x24
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fec4 	bl	80064b0 <xTaskRemoveFromEventList>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00e      	beq.n	800574c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e007      	b.n	800574c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800573c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005740:	3301      	adds	r3, #1
 8005742:	b2db      	uxtb	r3, r3
 8005744:	b25a      	sxtb	r2, r3
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800574c:	2301      	movs	r3, #1
 800574e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005750:	e001      	b.n	8005756 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005752:	2300      	movs	r3, #0
 8005754:	637b      	str	r3, [r7, #52]	; 0x34
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005758:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005760:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005764:	4618      	mov	r0, r3
 8005766:	3738      	adds	r7, #56	; 0x38
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <xQueueReceive+0x30>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	623b      	str	r3, [r7, #32]
}
 8005798:	bf00      	nop
 800579a:	e7fe      	b.n	800579a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <xQueueReceive+0x3e>
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <xQueueReceive+0x42>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <xQueueReceive+0x44>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xQueueReceive+0x5e>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	61fb      	str	r3, [r7, #28]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057ca:	f001 f833 	bl	8006834 <xTaskGetSchedulerState>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <xQueueReceive+0x6e>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <xQueueReceive+0x72>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <xQueueReceive+0x74>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <xQueueReceive+0x8e>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	61bb      	str	r3, [r7, #24]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80057fa:	f001 fcff 	bl	80071fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01f      	beq.n	800584a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580e:	f000 f8f7 	bl	8005a00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00f      	beq.n	8005842 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	3310      	adds	r3, #16
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fe42 	bl	80064b0 <xTaskRemoveFromEventList>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005832:	4b3d      	ldr	r3, [pc, #244]	; (8005928 <xQueueReceive+0x1bc>)
 8005834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005842:	f001 fd0b 	bl	800725c <vPortExitCritical>
				return pdPASS;
 8005846:	2301      	movs	r3, #1
 8005848:	e069      	b.n	800591e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d103      	bne.n	8005858 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005850:	f001 fd04 	bl	800725c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005854:	2300      	movs	r3, #0
 8005856:	e062      	b.n	800591e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800585e:	f107 0310 	add.w	r3, r7, #16
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fe88 	bl	8006578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800586c:	f001 fcf6 	bl	800725c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005870:	f000 fbfa 	bl	8006068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005874:	f001 fcc2 	bl	80071fc <vPortEnterCritical>
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800587e:	b25b      	sxtb	r3, r3
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005884:	d103      	bne.n	800588e <xQueueReceive+0x122>
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005894:	b25b      	sxtb	r3, r3
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d103      	bne.n	80058a4 <xQueueReceive+0x138>
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058a4:	f001 fcda 	bl	800725c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058a8:	1d3a      	adds	r2, r7, #4
 80058aa:	f107 0310 	add.w	r3, r7, #16
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fe77 	bl	80065a4 <xTaskCheckForTimeOut>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d123      	bne.n	8005904 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058be:	f000 f917 	bl	8005af0 <prvIsQueueEmpty>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d017      	beq.n	80058f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	3324      	adds	r3, #36	; 0x24
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4611      	mov	r1, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fd9d 	bl	8006410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d8:	f000 f8b8 	bl	8005a4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058dc:	f000 fbd2 	bl	8006084 <xTaskResumeAll>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d189      	bne.n	80057fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80058e6:	4b10      	ldr	r3, [pc, #64]	; (8005928 <xQueueReceive+0x1bc>)
 80058e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	e780      	b.n	80057fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058fa:	f000 f8a7 	bl	8005a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058fe:	f000 fbc1 	bl	8006084 <xTaskResumeAll>
 8005902:	e77a      	b.n	80057fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005906:	f000 f8a1 	bl	8005a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800590a:	f000 fbbb 	bl	8006084 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800590e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005910:	f000 f8ee 	bl	8005af0 <prvIsQueueEmpty>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	f43f af6f 	beq.w	80057fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800591c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800591e:	4618      	mov	r0, r3
 8005920:	3730      	adds	r7, #48	; 0x30
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	e000ed04 	.word	0xe000ed04

0800592c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10d      	bne.n	8005966 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d14d      	bne.n	80059ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 ff8a 	bl	8006870 <xTaskPriorityDisinherit>
 800595c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	605a      	str	r2, [r3, #4]
 8005964:	e043      	b.n	80059ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d119      	bne.n	80059a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6898      	ldr	r0, [r3, #8]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	461a      	mov	r2, r3
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	f003 fbaf 	bl	80090da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	441a      	add	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	429a      	cmp	r2, r3
 8005994:	d32b      	bcc.n	80059ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	609a      	str	r2, [r3, #8]
 800599e:	e026      	b.n	80059ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	68d8      	ldr	r0, [r3, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	461a      	mov	r2, r3
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	f003 fb95 	bl	80090da <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	425b      	negs	r3, r3
 80059ba:	441a      	add	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d207      	bcs.n	80059dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	425b      	negs	r3, r3
 80059d6:	441a      	add	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d105      	bne.n	80059ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059f6:	697b      	ldr	r3, [r7, #20]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d018      	beq.n	8005a44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	441a      	add	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d303      	bcc.n	8005a34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68d9      	ldr	r1, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6838      	ldr	r0, [r7, #0]
 8005a40:	f003 fb4b 	bl	80090da <memcpy>
	}
}
 8005a44:	bf00      	nop
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a54:	f001 fbd2 	bl	80071fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a60:	e011      	b.n	8005a86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d012      	beq.n	8005a90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3324      	adds	r3, #36	; 0x24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fd1e 	bl	80064b0 <xTaskRemoveFromEventList>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a7a:	f000 fdf5 	bl	8006668 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dce9      	bgt.n	8005a62 <prvUnlockQueue+0x16>
 8005a8e:	e000      	b.n	8005a92 <prvUnlockQueue+0x46>
					break;
 8005a90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a9a:	f001 fbdf 	bl	800725c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a9e:	f001 fbad 	bl	80071fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aaa:	e011      	b.n	8005ad0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d012      	beq.n	8005ada <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3310      	adds	r3, #16
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fcf9 	bl	80064b0 <xTaskRemoveFromEventList>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ac4:	f000 fdd0 	bl	8006668 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ac8:	7bbb      	ldrb	r3, [r7, #14]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dce9      	bgt.n	8005aac <prvUnlockQueue+0x60>
 8005ad8:	e000      	b.n	8005adc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ada:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	22ff      	movs	r2, #255	; 0xff
 8005ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ae4:	f001 fbba 	bl	800725c <vPortExitCritical>
}
 8005ae8:	bf00      	nop
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005af8:	f001 fb80 	bl	80071fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d102      	bne.n	8005b0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b04:	2301      	movs	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	e001      	b.n	8005b0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b0e:	f001 fba5 	bl	800725c <vPortExitCritical>

	return xReturn;
 8005b12:	68fb      	ldr	r3, [r7, #12]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b24:	f001 fb6a 	bl	80071fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d102      	bne.n	8005b3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b34:	2301      	movs	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e001      	b.n	8005b3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b3e:	f001 fb8d 	bl	800725c <vPortExitCritical>

	return xReturn;
 8005b42:	68fb      	ldr	r3, [r7, #12]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	e014      	b.n	8005b86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b5c:	4a0e      	ldr	r2, [pc, #56]	; (8005b98 <vQueueAddToRegistry+0x4c>)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10b      	bne.n	8005b80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b68:	490b      	ldr	r1, [pc, #44]	; (8005b98 <vQueueAddToRegistry+0x4c>)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b72:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <vQueueAddToRegistry+0x4c>)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	4413      	add	r3, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b7e:	e006      	b.n	8005b8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3301      	adds	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b07      	cmp	r3, #7
 8005b8a:	d9e7      	bls.n	8005b5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b8c:	bf00      	nop
 8005b8e:	bf00      	nop
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr
 8005b98:	20000b24 	.word	0x20000b24

08005b9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005bac:	f001 fb26 	bl	80071fc <vPortEnterCritical>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bb6:	b25b      	sxtb	r3, r3
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d103      	bne.n	8005bc6 <vQueueWaitForMessageRestricted+0x2a>
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bcc:	b25b      	sxtb	r3, r3
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d103      	bne.n	8005bdc <vQueueWaitForMessageRestricted+0x40>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bdc:	f001 fb3e 	bl	800725c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d106      	bne.n	8005bf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	3324      	adds	r3, #36	; 0x24
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fc31 	bl	8006458 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005bf6:	6978      	ldr	r0, [r7, #20]
 8005bf8:	f7ff ff28 	bl	8005a4c <prvUnlockQueue>
	}
 8005bfc:	bf00      	nop
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08e      	sub	sp, #56	; 0x38
 8005c08:	af04      	add	r7, sp, #16
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	623b      	str	r3, [r7, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <xTaskCreateStatic+0x46>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	61fb      	str	r3, [r7, #28]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c4a:	235c      	movs	r3, #92	; 0x5c
 8005c4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b5c      	cmp	r3, #92	; 0x5c
 8005c52:	d00a      	beq.n	8005c6a <xTaskCreateStatic+0x66>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	61bb      	str	r3, [r7, #24]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01e      	beq.n	8005cae <xTaskCreateStatic+0xaa>
 8005c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d01b      	beq.n	8005cae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9303      	str	r3, [sp, #12]
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	9302      	str	r3, [sp, #8]
 8005c90:	f107 0314 	add.w	r3, r7, #20
 8005c94:	9301      	str	r3, [sp, #4]
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f850 	bl	8005d46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ca8:	f000 f8d4 	bl	8005e54 <prvAddNewTaskToReadyList>
 8005cac:	e001      	b.n	8005cb2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005cb2:	697b      	ldr	r3, [r7, #20]
	}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3728      	adds	r7, #40	; 0x28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08c      	sub	sp, #48	; 0x30
 8005cc0:	af04      	add	r7, sp, #16
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ccc:	88fb      	ldrh	r3, [r7, #6]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f001 fb93 	bl	80073fc <pvPortMalloc>
 8005cd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00e      	beq.n	8005cfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005cde:	205c      	movs	r0, #92	; 0x5c
 8005ce0:	f001 fb8c 	bl	80073fc <pvPortMalloc>
 8005ce4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8005cf2:	e005      	b.n	8005d00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cf4:	6978      	ldr	r0, [r7, #20]
 8005cf6:	f001 fc45 	bl	8007584 <vPortFree>
 8005cfa:	e001      	b.n	8005d00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d017      	beq.n	8005d36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d0e:	88fa      	ldrh	r2, [r7, #6]
 8005d10:	2300      	movs	r3, #0
 8005d12:	9303      	str	r3, [sp, #12]
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	9302      	str	r3, [sp, #8]
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f80e 	bl	8005d46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d2a:	69f8      	ldr	r0, [r7, #28]
 8005d2c:	f000 f892 	bl	8005e54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d30:	2301      	movs	r3, #1
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	e002      	b.n	8005d3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d36:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d3c:	69bb      	ldr	r3, [r7, #24]
	}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b088      	sub	sp, #32
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	21a5      	movs	r1, #165	; 0xa5
 8005d60:	f003 f92d 	bl	8008fbe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	f023 0307 	bic.w	r3, r3, #7
 8005d7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <prvInitialiseNewTask+0x58>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	617b      	str	r3, [r7, #20]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	e012      	b.n	8005dca <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	7819      	ldrb	r1, [r3, #0]
 8005dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	4413      	add	r3, r2
 8005db2:	3334      	adds	r3, #52	; 0x34
 8005db4:	460a      	mov	r2, r1
 8005db6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d006      	beq.n	8005dd2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	2b0f      	cmp	r3, #15
 8005dce:	d9e9      	bls.n	8005da4 <prvInitialiseNewTask+0x5e>
 8005dd0:	e000      	b.n	8005dd4 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005dd2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	2b37      	cmp	r3, #55	; 0x37
 8005de0:	d901      	bls.n	8005de6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005de2:	2337      	movs	r3, #55	; 0x37
 8005de4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005df0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	2200      	movs	r2, #0
 8005df6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff f98c 	bl	800511a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	3318      	adds	r3, #24
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff f987 	bl	800511a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e20:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	2200      	movs	r2, #0
 8005e26:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	69b8      	ldr	r0, [r7, #24]
 8005e36:	f001 f8ef 	bl	8007018 <pxPortInitialiseStack>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e4c:	bf00      	nop
 8005e4e:	3720      	adds	r7, #32
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e5c:	f001 f9ce 	bl	80071fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e60:	4b2d      	ldr	r3, [pc, #180]	; (8005f18 <prvAddNewTaskToReadyList+0xc4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	4a2c      	ldr	r2, [pc, #176]	; (8005f18 <prvAddNewTaskToReadyList+0xc4>)
 8005e68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e6a:	4b2c      	ldr	r3, [pc, #176]	; (8005f1c <prvAddNewTaskToReadyList+0xc8>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d109      	bne.n	8005e86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e72:	4a2a      	ldr	r2, [pc, #168]	; (8005f1c <prvAddNewTaskToReadyList+0xc8>)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e78:	4b27      	ldr	r3, [pc, #156]	; (8005f18 <prvAddNewTaskToReadyList+0xc4>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d110      	bne.n	8005ea2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e80:	f000 fc16 	bl	80066b0 <prvInitialiseTaskLists>
 8005e84:	e00d      	b.n	8005ea2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e86:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <prvAddNewTaskToReadyList+0xcc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d109      	bne.n	8005ea2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e8e:	4b23      	ldr	r3, [pc, #140]	; (8005f1c <prvAddNewTaskToReadyList+0xc8>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d802      	bhi.n	8005ea2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e9c:	4a1f      	ldr	r2, [pc, #124]	; (8005f1c <prvAddNewTaskToReadyList+0xc8>)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ea2:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <prvAddNewTaskToReadyList+0xd0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	4a1e      	ldr	r2, [pc, #120]	; (8005f24 <prvAddNewTaskToReadyList+0xd0>)
 8005eaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005eac:	4b1d      	ldr	r3, [pc, #116]	; (8005f24 <prvAddNewTaskToReadyList+0xd0>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <prvAddNewTaskToReadyList+0xd4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d903      	bls.n	8005ec8 <prvAddNewTaskToReadyList+0x74>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	4a18      	ldr	r2, [pc, #96]	; (8005f28 <prvAddNewTaskToReadyList+0xd4>)
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <prvAddNewTaskToReadyList+0xd8>)
 8005ed6:	441a      	add	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	4619      	mov	r1, r3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	f7ff f927 	bl	8005132 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ee4:	f001 f9ba 	bl	800725c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ee8:	4b0d      	ldr	r3, [pc, #52]	; (8005f20 <prvAddNewTaskToReadyList+0xcc>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00e      	beq.n	8005f0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ef0:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <prvAddNewTaskToReadyList+0xc8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d207      	bcs.n	8005f0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005efe:	4b0c      	ldr	r3, [pc, #48]	; (8005f30 <prvAddNewTaskToReadyList+0xdc>)
 8005f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f0e:	bf00      	nop
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20001038 	.word	0x20001038
 8005f1c:	20000b64 	.word	0x20000b64
 8005f20:	20001044 	.word	0x20001044
 8005f24:	20001054 	.word	0x20001054
 8005f28:	20001040 	.word	0x20001040
 8005f2c:	20000b68 	.word	0x20000b68
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d017      	beq.n	8005f76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <vTaskDelay+0x60>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <vTaskDelay+0x30>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	60bb      	str	r3, [r7, #8]
}
 8005f60:	bf00      	nop
 8005f62:	e7fe      	b.n	8005f62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f64:	f000 f880 	bl	8006068 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f68:	2100      	movs	r1, #0
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fcee 	bl	800694c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f70:	f000 f888 	bl	8006084 <xTaskResumeAll>
 8005f74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d107      	bne.n	8005f8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <vTaskDelay+0x64>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20001060 	.word	0x20001060
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	; 0x28
 8005fa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005faa:	463a      	mov	r2, r7
 8005fac:	1d39      	adds	r1, r7, #4
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff f860 	bl	8005078 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	9202      	str	r2, [sp, #8]
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	460a      	mov	r2, r1
 8005fca:	4921      	ldr	r1, [pc, #132]	; (8006050 <vTaskStartScheduler+0xb4>)
 8005fcc:	4821      	ldr	r0, [pc, #132]	; (8006054 <vTaskStartScheduler+0xb8>)
 8005fce:	f7ff fe19 	bl	8005c04 <xTaskCreateStatic>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4a20      	ldr	r2, [pc, #128]	; (8006058 <vTaskStartScheduler+0xbc>)
 8005fd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fd8:	4b1f      	ldr	r3, [pc, #124]	; (8006058 <vTaskStartScheduler+0xbc>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e001      	b.n	8005fea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d102      	bne.n	8005ff6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ff0:	f000 fd00 	bl	80069f4 <xTimerCreateTimerTask>
 8005ff4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d116      	bne.n	800602a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	613b      	str	r3, [r7, #16]
}
 800600e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006010:	4b12      	ldr	r3, [pc, #72]	; (800605c <vTaskStartScheduler+0xc0>)
 8006012:	f04f 32ff 	mov.w	r2, #4294967295
 8006016:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006018:	4b11      	ldr	r3, [pc, #68]	; (8006060 <vTaskStartScheduler+0xc4>)
 800601a:	2201      	movs	r2, #1
 800601c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800601e:	4b11      	ldr	r3, [pc, #68]	; (8006064 <vTaskStartScheduler+0xc8>)
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006024:	f001 f878 	bl	8007118 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006028:	e00e      	b.n	8006048 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d10a      	bne.n	8006048 <vTaskStartScheduler+0xac>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	60fb      	str	r3, [r7, #12]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <vTaskStartScheduler+0xaa>
}
 8006048:	bf00      	nop
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	0800c87c 	.word	0x0800c87c
 8006054:	08006681 	.word	0x08006681
 8006058:	2000105c 	.word	0x2000105c
 800605c:	20001058 	.word	0x20001058
 8006060:	20001044 	.word	0x20001044
 8006064:	2000103c 	.word	0x2000103c

08006068 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800606c:	4b04      	ldr	r3, [pc, #16]	; (8006080 <vTaskSuspendAll+0x18>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	4a03      	ldr	r2, [pc, #12]	; (8006080 <vTaskSuspendAll+0x18>)
 8006074:	6013      	str	r3, [r2, #0]
}
 8006076:	bf00      	nop
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20001060 	.word	0x20001060

08006084 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800608e:	2300      	movs	r3, #0
 8006090:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006092:	4b42      	ldr	r3, [pc, #264]	; (800619c <xTaskResumeAll+0x118>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	603b      	str	r3, [r7, #0]
}
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060b0:	f001 f8a4 	bl	80071fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060b4:	4b39      	ldr	r3, [pc, #228]	; (800619c <xTaskResumeAll+0x118>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	4a38      	ldr	r2, [pc, #224]	; (800619c <xTaskResumeAll+0x118>)
 80060bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060be:	4b37      	ldr	r3, [pc, #220]	; (800619c <xTaskResumeAll+0x118>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d162      	bne.n	800618c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060c6:	4b36      	ldr	r3, [pc, #216]	; (80061a0 <xTaskResumeAll+0x11c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d05e      	beq.n	800618c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060ce:	e02f      	b.n	8006130 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80060d0:	4b34      	ldr	r3, [pc, #208]	; (80061a4 <xTaskResumeAll+0x120>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3318      	adds	r3, #24
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff f883 	bl	80051e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff f87e 	bl	80051e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	4b2d      	ldr	r3, [pc, #180]	; (80061a8 <xTaskResumeAll+0x124>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d903      	bls.n	8006100 <xTaskResumeAll+0x7c>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	4a2a      	ldr	r2, [pc, #168]	; (80061a8 <xTaskResumeAll+0x124>)
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4a27      	ldr	r2, [pc, #156]	; (80061ac <xTaskResumeAll+0x128>)
 800610e:	441a      	add	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3304      	adds	r3, #4
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f7ff f80b 	bl	8005132 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006120:	4b23      	ldr	r3, [pc, #140]	; (80061b0 <xTaskResumeAll+0x12c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	429a      	cmp	r2, r3
 8006128:	d302      	bcc.n	8006130 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800612a:	4b22      	ldr	r3, [pc, #136]	; (80061b4 <xTaskResumeAll+0x130>)
 800612c:	2201      	movs	r2, #1
 800612e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006130:	4b1c      	ldr	r3, [pc, #112]	; (80061a4 <xTaskResumeAll+0x120>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1cb      	bne.n	80060d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800613e:	f000 fb55 	bl	80067ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006142:	4b1d      	ldr	r3, [pc, #116]	; (80061b8 <xTaskResumeAll+0x134>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d010      	beq.n	8006170 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800614e:	f000 f845 	bl	80061dc <xTaskIncrementTick>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006158:	4b16      	ldr	r3, [pc, #88]	; (80061b4 <xTaskResumeAll+0x130>)
 800615a:	2201      	movs	r2, #1
 800615c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3b01      	subs	r3, #1
 8006162:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f1      	bne.n	800614e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800616a:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <xTaskResumeAll+0x134>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006170:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <xTaskResumeAll+0x130>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d009      	beq.n	800618c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006178:	2301      	movs	r3, #1
 800617a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800617c:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <xTaskResumeAll+0x138>)
 800617e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800618c:	f001 f866 	bl	800725c <vPortExitCritical>

	return xAlreadyYielded;
 8006190:	68bb      	ldr	r3, [r7, #8]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20001060 	.word	0x20001060
 80061a0:	20001038 	.word	0x20001038
 80061a4:	20000ff8 	.word	0x20000ff8
 80061a8:	20001040 	.word	0x20001040
 80061ac:	20000b68 	.word	0x20000b68
 80061b0:	20000b64 	.word	0x20000b64
 80061b4:	2000104c 	.word	0x2000104c
 80061b8:	20001048 	.word	0x20001048
 80061bc:	e000ed04 	.word	0xe000ed04

080061c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061c6:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <xTaskGetTickCount+0x18>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061cc:	687b      	ldr	r3, [r7, #4]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr
 80061d8:	2000103c 	.word	0x2000103c

080061dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e6:	4b51      	ldr	r3, [pc, #324]	; (800632c <xTaskIncrementTick+0x150>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f040 808e 	bne.w	800630c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061f0:	4b4f      	ldr	r3, [pc, #316]	; (8006330 <xTaskIncrementTick+0x154>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061f8:	4a4d      	ldr	r2, [pc, #308]	; (8006330 <xTaskIncrementTick+0x154>)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d120      	bne.n	8006246 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006204:	4b4b      	ldr	r3, [pc, #300]	; (8006334 <xTaskIncrementTick+0x158>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <xTaskIncrementTick+0x48>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	603b      	str	r3, [r7, #0]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <xTaskIncrementTick+0x46>
 8006224:	4b43      	ldr	r3, [pc, #268]	; (8006334 <xTaskIncrementTick+0x158>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	4b43      	ldr	r3, [pc, #268]	; (8006338 <xTaskIncrementTick+0x15c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a41      	ldr	r2, [pc, #260]	; (8006334 <xTaskIncrementTick+0x158>)
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4a41      	ldr	r2, [pc, #260]	; (8006338 <xTaskIncrementTick+0x15c>)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	4b40      	ldr	r3, [pc, #256]	; (800633c <xTaskIncrementTick+0x160>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3301      	adds	r3, #1
 800623e:	4a3f      	ldr	r2, [pc, #252]	; (800633c <xTaskIncrementTick+0x160>)
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	f000 fad3 	bl	80067ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006246:	4b3e      	ldr	r3, [pc, #248]	; (8006340 <xTaskIncrementTick+0x164>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	429a      	cmp	r2, r3
 800624e:	d34e      	bcc.n	80062ee <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006250:	4b38      	ldr	r3, [pc, #224]	; (8006334 <xTaskIncrementTick+0x158>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <xTaskIncrementTick+0x82>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <xTaskIncrementTick+0x84>
 800625e:	2300      	movs	r3, #0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006264:	4b36      	ldr	r3, [pc, #216]	; (8006340 <xTaskIncrementTick+0x164>)
 8006266:	f04f 32ff 	mov.w	r2, #4294967295
 800626a:	601a      	str	r2, [r3, #0]
					break;
 800626c:	e03f      	b.n	80062ee <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800626e:	4b31      	ldr	r3, [pc, #196]	; (8006334 <xTaskIncrementTick+0x158>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	429a      	cmp	r2, r3
 8006284:	d203      	bcs.n	800628e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006286:	4a2e      	ldr	r2, [pc, #184]	; (8006340 <xTaskIncrementTick+0x164>)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6013      	str	r3, [r2, #0]
						break;
 800628c:	e02f      	b.n	80062ee <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	3304      	adds	r3, #4
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe ffa8 	bl	80051e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	3318      	adds	r3, #24
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe ff9f 	bl	80051e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ae:	4b25      	ldr	r3, [pc, #148]	; (8006344 <xTaskIncrementTick+0x168>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d903      	bls.n	80062be <xTaskIncrementTick+0xe2>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ba:	4a22      	ldr	r2, [pc, #136]	; (8006344 <xTaskIncrementTick+0x168>)
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <xTaskIncrementTick+0x16c>)
 80062cc:	441a      	add	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	3304      	adds	r3, #4
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f7fe ff2c 	bl	8005132 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	4b1b      	ldr	r3, [pc, #108]	; (800634c <xTaskIncrementTick+0x170>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d3b3      	bcc.n	8006250 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ec:	e7b0      	b.n	8006250 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062ee:	4b17      	ldr	r3, [pc, #92]	; (800634c <xTaskIncrementTick+0x170>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	4914      	ldr	r1, [pc, #80]	; (8006348 <xTaskIncrementTick+0x16c>)
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	440b      	add	r3, r1
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d907      	bls.n	8006316 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006306:	2301      	movs	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	e004      	b.n	8006316 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800630c:	4b10      	ldr	r3, [pc, #64]	; (8006350 <xTaskIncrementTick+0x174>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3301      	adds	r3, #1
 8006312:	4a0f      	ldr	r2, [pc, #60]	; (8006350 <xTaskIncrementTick+0x174>)
 8006314:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006316:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <xTaskIncrementTick+0x178>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800631e:	2301      	movs	r3, #1
 8006320:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006322:	697b      	ldr	r3, [r7, #20]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	20001060 	.word	0x20001060
 8006330:	2000103c 	.word	0x2000103c
 8006334:	20000ff0 	.word	0x20000ff0
 8006338:	20000ff4 	.word	0x20000ff4
 800633c:	20001050 	.word	0x20001050
 8006340:	20001058 	.word	0x20001058
 8006344:	20001040 	.word	0x20001040
 8006348:	20000b68 	.word	0x20000b68
 800634c:	20000b64 	.word	0x20000b64
 8006350:	20001048 	.word	0x20001048
 8006354:	2000104c 	.word	0x2000104c

08006358 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800635e:	4b27      	ldr	r3, [pc, #156]	; (80063fc <vTaskSwitchContext+0xa4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006366:	4b26      	ldr	r3, [pc, #152]	; (8006400 <vTaskSwitchContext+0xa8>)
 8006368:	2201      	movs	r2, #1
 800636a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800636c:	e041      	b.n	80063f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800636e:	4b24      	ldr	r3, [pc, #144]	; (8006400 <vTaskSwitchContext+0xa8>)
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006374:	4b23      	ldr	r3, [pc, #140]	; (8006404 <vTaskSwitchContext+0xac>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	e010      	b.n	800639e <vTaskSwitchContext+0x46>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <vTaskSwitchContext+0x40>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	607b      	str	r3, [r7, #4]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <vTaskSwitchContext+0x3e>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3b01      	subs	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	491a      	ldr	r1, [pc, #104]	; (8006408 <vTaskSwitchContext+0xb0>)
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0e4      	beq.n	800637c <vTaskSwitchContext+0x24>
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4a12      	ldr	r2, [pc, #72]	; (8006408 <vTaskSwitchContext+0xb0>)
 80063be:	4413      	add	r3, r2
 80063c0:	60bb      	str	r3, [r7, #8]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	605a      	str	r2, [r3, #4]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	3308      	adds	r3, #8
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d104      	bne.n	80063e2 <vTaskSwitchContext+0x8a>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	4a08      	ldr	r2, [pc, #32]	; (800640c <vTaskSwitchContext+0xb4>)
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	4a05      	ldr	r2, [pc, #20]	; (8006404 <vTaskSwitchContext+0xac>)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6013      	str	r3, [r2, #0]
}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr
 80063fc:	20001060 	.word	0x20001060
 8006400:	2000104c 	.word	0x2000104c
 8006404:	20001040 	.word	0x20001040
 8006408:	20000b68 	.word	0x20000b68
 800640c:	20000b64 	.word	0x20000b64

08006410 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60fb      	str	r3, [r7, #12]
}
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006436:	4b07      	ldr	r3, [pc, #28]	; (8006454 <vTaskPlaceOnEventList+0x44>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3318      	adds	r3, #24
 800643c:	4619      	mov	r1, r3
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fe fe9a 	bl	8005178 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006444:	2101      	movs	r1, #1
 8006446:	6838      	ldr	r0, [r7, #0]
 8006448:	f000 fa80 	bl	800694c <prvAddCurrentTaskToDelayedList>
}
 800644c:	bf00      	nop
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	20000b64 	.word	0x20000b64

08006458 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	617b      	str	r3, [r7, #20]
}
 800647c:	bf00      	nop
 800647e:	e7fe      	b.n	800647e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006480:	4b0a      	ldr	r3, [pc, #40]	; (80064ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3318      	adds	r3, #24
 8006486:	4619      	mov	r1, r3
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f7fe fe52 	bl	8005132 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006494:	f04f 33ff 	mov.w	r3, #4294967295
 8006498:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	68b8      	ldr	r0, [r7, #8]
 800649e:	f000 fa55 	bl	800694c <prvAddCurrentTaskToDelayedList>
	}
 80064a2:	bf00      	nop
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000b64 	.word	0x20000b64

080064b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	60fb      	str	r3, [r7, #12]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	3318      	adds	r3, #24
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe fe81 	bl	80051e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064e6:	4b1e      	ldr	r3, [pc, #120]	; (8006560 <xTaskRemoveFromEventList+0xb0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d11d      	bne.n	800652a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fe78 	bl	80051e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fc:	4b19      	ldr	r3, [pc, #100]	; (8006564 <xTaskRemoveFromEventList+0xb4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d903      	bls.n	800650c <xTaskRemoveFromEventList+0x5c>
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4a16      	ldr	r2, [pc, #88]	; (8006564 <xTaskRemoveFromEventList+0xb4>)
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4a13      	ldr	r2, [pc, #76]	; (8006568 <xTaskRemoveFromEventList+0xb8>)
 800651a:	441a      	add	r2, r3
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	3304      	adds	r3, #4
 8006520:	4619      	mov	r1, r3
 8006522:	4610      	mov	r0, r2
 8006524:	f7fe fe05 	bl	8005132 <vListInsertEnd>
 8006528:	e005      	b.n	8006536 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	3318      	adds	r3, #24
 800652e:	4619      	mov	r1, r3
 8006530:	480e      	ldr	r0, [pc, #56]	; (800656c <xTaskRemoveFromEventList+0xbc>)
 8006532:	f7fe fdfe 	bl	8005132 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653a:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <xTaskRemoveFromEventList+0xc0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	429a      	cmp	r2, r3
 8006542:	d905      	bls.n	8006550 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006544:	2301      	movs	r3, #1
 8006546:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <xTaskRemoveFromEventList+0xc4>)
 800654a:	2201      	movs	r2, #1
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	e001      	b.n	8006554 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006554:	697b      	ldr	r3, [r7, #20]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20001060 	.word	0x20001060
 8006564:	20001040 	.word	0x20001040
 8006568:	20000b68 	.word	0x20000b68
 800656c:	20000ff8 	.word	0x20000ff8
 8006570:	20000b64 	.word	0x20000b64
 8006574:	2000104c 	.word	0x2000104c

08006578 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006580:	4b06      	ldr	r3, [pc, #24]	; (800659c <vTaskInternalSetTimeOutState+0x24>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006588:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <vTaskInternalSetTimeOutState+0x28>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	605a      	str	r2, [r3, #4]
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20001050 	.word	0x20001050
 80065a0:	2000103c 	.word	0x2000103c

080065a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	613b      	str	r3, [r7, #16]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	60fb      	str	r3, [r7, #12]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80065e6:	f000 fe09 	bl	80071fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065ea:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <xTaskCheckForTimeOut+0xbc>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006602:	d102      	bne.n	800660a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006604:	2300      	movs	r3, #0
 8006606:	61fb      	str	r3, [r7, #28]
 8006608:	e023      	b.n	8006652 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	4b15      	ldr	r3, [pc, #84]	; (8006664 <xTaskCheckForTimeOut+0xc0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d007      	beq.n	8006626 <xTaskCheckForTimeOut+0x82>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	429a      	cmp	r2, r3
 800661e:	d302      	bcc.n	8006626 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006620:	2301      	movs	r3, #1
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	e015      	b.n	8006652 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	429a      	cmp	r2, r3
 800662e:	d20b      	bcs.n	8006648 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	1ad2      	subs	r2, r2, r3
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ff9b 	bl	8006578 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006642:	2300      	movs	r3, #0
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	e004      	b.n	8006652 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800664e:	2301      	movs	r3, #1
 8006650:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006652:	f000 fe03 	bl	800725c <vPortExitCritical>

	return xReturn;
 8006656:	69fb      	ldr	r3, [r7, #28]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3720      	adds	r7, #32
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	2000103c 	.word	0x2000103c
 8006664:	20001050 	.word	0x20001050

08006668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800666c:	4b03      	ldr	r3, [pc, #12]	; (800667c <vTaskMissedYield+0x14>)
 800666e:	2201      	movs	r2, #1
 8006670:	601a      	str	r2, [r3, #0]
}
 8006672:	bf00      	nop
 8006674:	46bd      	mov	sp, r7
 8006676:	bc80      	pop	{r7}
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	2000104c 	.word	0x2000104c

08006680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006688:	f000 f852 	bl	8006730 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <prvIdleTask+0x28>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d9f9      	bls.n	8006688 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006694:	4b05      	ldr	r3, [pc, #20]	; (80066ac <prvIdleTask+0x2c>)
 8006696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066a4:	e7f0      	b.n	8006688 <prvIdleTask+0x8>
 80066a6:	bf00      	nop
 80066a8:	20000b68 	.word	0x20000b68
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066b6:	2300      	movs	r3, #0
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	e00c      	b.n	80066d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4a12      	ldr	r2, [pc, #72]	; (8006710 <prvInitialiseTaskLists+0x60>)
 80066c8:	4413      	add	r3, r2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe fd06 	bl	80050dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3301      	adds	r3, #1
 80066d4:	607b      	str	r3, [r7, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b37      	cmp	r3, #55	; 0x37
 80066da:	d9ef      	bls.n	80066bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066dc:	480d      	ldr	r0, [pc, #52]	; (8006714 <prvInitialiseTaskLists+0x64>)
 80066de:	f7fe fcfd 	bl	80050dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066e2:	480d      	ldr	r0, [pc, #52]	; (8006718 <prvInitialiseTaskLists+0x68>)
 80066e4:	f7fe fcfa 	bl	80050dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066e8:	480c      	ldr	r0, [pc, #48]	; (800671c <prvInitialiseTaskLists+0x6c>)
 80066ea:	f7fe fcf7 	bl	80050dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066ee:	480c      	ldr	r0, [pc, #48]	; (8006720 <prvInitialiseTaskLists+0x70>)
 80066f0:	f7fe fcf4 	bl	80050dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066f4:	480b      	ldr	r0, [pc, #44]	; (8006724 <prvInitialiseTaskLists+0x74>)
 80066f6:	f7fe fcf1 	bl	80050dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066fa:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <prvInitialiseTaskLists+0x78>)
 80066fc:	4a05      	ldr	r2, [pc, #20]	; (8006714 <prvInitialiseTaskLists+0x64>)
 80066fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <prvInitialiseTaskLists+0x7c>)
 8006702:	4a05      	ldr	r2, [pc, #20]	; (8006718 <prvInitialiseTaskLists+0x68>)
 8006704:	601a      	str	r2, [r3, #0]
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000b68 	.word	0x20000b68
 8006714:	20000fc8 	.word	0x20000fc8
 8006718:	20000fdc 	.word	0x20000fdc
 800671c:	20000ff8 	.word	0x20000ff8
 8006720:	2000100c 	.word	0x2000100c
 8006724:	20001024 	.word	0x20001024
 8006728:	20000ff0 	.word	0x20000ff0
 800672c:	20000ff4 	.word	0x20000ff4

08006730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006736:	e019      	b.n	800676c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006738:	f000 fd60 	bl	80071fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800673c:	4b10      	ldr	r3, [pc, #64]	; (8006780 <prvCheckTasksWaitingTermination+0x50>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3304      	adds	r3, #4
 8006748:	4618      	mov	r0, r3
 800674a:	f7fe fd4d 	bl	80051e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800674e:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <prvCheckTasksWaitingTermination+0x54>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3b01      	subs	r3, #1
 8006754:	4a0b      	ldr	r2, [pc, #44]	; (8006784 <prvCheckTasksWaitingTermination+0x54>)
 8006756:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <prvCheckTasksWaitingTermination+0x58>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3b01      	subs	r3, #1
 800675e:	4a0a      	ldr	r2, [pc, #40]	; (8006788 <prvCheckTasksWaitingTermination+0x58>)
 8006760:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006762:	f000 fd7b 	bl	800725c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f810 	bl	800678c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <prvCheckTasksWaitingTermination+0x58>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e1      	bne.n	8006738 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	2000100c 	.word	0x2000100c
 8006784:	20001038 	.word	0x20001038
 8006788:	20001020 	.word	0x20001020

0800678c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800679a:	2b00      	cmp	r3, #0
 800679c:	d108      	bne.n	80067b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 feee 	bl	8007584 <vPortFree>
				vPortFree( pxTCB );
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 feeb 	bl	8007584 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067ae:	e018      	b.n	80067e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d103      	bne.n	80067c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fee2 	bl	8007584 <vPortFree>
	}
 80067c0:	e00f      	b.n	80067e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d00a      	beq.n	80067e2 <prvDeleteTCB+0x56>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	60fb      	str	r3, [r7, #12]
}
 80067de:	bf00      	nop
 80067e0:	e7fe      	b.n	80067e0 <prvDeleteTCB+0x54>
	}
 80067e2:	bf00      	nop
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067f2:	4b0e      	ldr	r3, [pc, #56]	; (800682c <prvResetNextTaskUnblockTime+0x40>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <prvResetNextTaskUnblockTime+0x14>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <prvResetNextTaskUnblockTime+0x16>
 8006800:	2300      	movs	r3, #0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d004      	beq.n	8006810 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006806:	4b0a      	ldr	r3, [pc, #40]	; (8006830 <prvResetNextTaskUnblockTime+0x44>)
 8006808:	f04f 32ff 	mov.w	r2, #4294967295
 800680c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800680e:	e008      	b.n	8006822 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006810:	4b06      	ldr	r3, [pc, #24]	; (800682c <prvResetNextTaskUnblockTime+0x40>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	4a04      	ldr	r2, [pc, #16]	; (8006830 <prvResetNextTaskUnblockTime+0x44>)
 8006820:	6013      	str	r3, [r2, #0]
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr
 800682c:	20000ff0 	.word	0x20000ff0
 8006830:	20001058 	.word	0x20001058

08006834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800683a:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <xTaskGetSchedulerState+0x34>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d102      	bne.n	8006848 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006842:	2301      	movs	r3, #1
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	e008      	b.n	800685a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006848:	4b08      	ldr	r3, [pc, #32]	; (800686c <xTaskGetSchedulerState+0x38>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006850:	2302      	movs	r3, #2
 8006852:	607b      	str	r3, [r7, #4]
 8006854:	e001      	b.n	800685a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006856:	2300      	movs	r3, #0
 8006858:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800685a:	687b      	ldr	r3, [r7, #4]
	}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	20001044 	.word	0x20001044
 800686c:	20001060 	.word	0x20001060

08006870 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d056      	beq.n	8006934 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006886:	4b2e      	ldr	r3, [pc, #184]	; (8006940 <xTaskPriorityDisinherit+0xd0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	429a      	cmp	r2, r3
 800688e:	d00a      	beq.n	80068a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	60fb      	str	r3, [r7, #12]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	60bb      	str	r3, [r7, #8]
}
 80068c0:	bf00      	nop
 80068c2:	e7fe      	b.n	80068c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c8:	1e5a      	subs	r2, r3, #1
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d02c      	beq.n	8006934 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d128      	bne.n	8006934 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fc7e 	bl	80051e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006904:	4b0f      	ldr	r3, [pc, #60]	; (8006944 <xTaskPriorityDisinherit+0xd4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d903      	bls.n	8006914 <xTaskPriorityDisinherit+0xa4>
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	4a0c      	ldr	r2, [pc, #48]	; (8006944 <xTaskPriorityDisinherit+0xd4>)
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4a09      	ldr	r2, [pc, #36]	; (8006948 <xTaskPriorityDisinherit+0xd8>)
 8006922:	441a      	add	r2, r3
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	3304      	adds	r3, #4
 8006928:	4619      	mov	r1, r3
 800692a:	4610      	mov	r0, r2
 800692c:	f7fe fc01 	bl	8005132 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006930:	2301      	movs	r3, #1
 8006932:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006934:	697b      	ldr	r3, [r7, #20]
	}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20000b64 	.word	0x20000b64
 8006944:	20001040 	.word	0x20001040
 8006948:	20000b68 	.word	0x20000b68

0800694c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006956:	4b21      	ldr	r3, [pc, #132]	; (80069dc <prvAddCurrentTaskToDelayedList+0x90>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800695c:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3304      	adds	r3, #4
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe fc40 	bl	80051e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d10a      	bne.n	8006986 <prvAddCurrentTaskToDelayedList+0x3a>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006976:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4819      	ldr	r0, [pc, #100]	; (80069e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006980:	f7fe fbd7 	bl	8005132 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006984:	e026      	b.n	80069d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4413      	add	r3, r2
 800698c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800698e:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	429a      	cmp	r2, r3
 800699c:	d209      	bcs.n	80069b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800699e:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f7fe fbe4 	bl	8005178 <vListInsert>
}
 80069b0:	e010      	b.n	80069d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069b2:	4b0e      	ldr	r3, [pc, #56]	; (80069ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f7fe fbda 	bl	8005178 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069c4:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d202      	bcs.n	80069d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80069ce:	4a08      	ldr	r2, [pc, #32]	; (80069f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	6013      	str	r3, [r2, #0]
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	2000103c 	.word	0x2000103c
 80069e0:	20000b64 	.word	0x20000b64
 80069e4:	20001024 	.word	0x20001024
 80069e8:	20000ff4 	.word	0x20000ff4
 80069ec:	20000ff0 	.word	0x20000ff0
 80069f0:	20001058 	.word	0x20001058

080069f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069fe:	f000 facb 	bl	8006f98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a02:	4b1c      	ldr	r3, [pc, #112]	; (8006a74 <xTimerCreateTimerTask+0x80>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d021      	beq.n	8006a4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a12:	1d3a      	adds	r2, r7, #4
 8006a14:	f107 0108 	add.w	r1, r7, #8
 8006a18:	f107 030c 	add.w	r3, r7, #12
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fe fb43 	bl	80050a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	9202      	str	r2, [sp, #8]
 8006a2a:	9301      	str	r3, [sp, #4]
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	2300      	movs	r3, #0
 8006a32:	460a      	mov	r2, r1
 8006a34:	4910      	ldr	r1, [pc, #64]	; (8006a78 <xTimerCreateTimerTask+0x84>)
 8006a36:	4811      	ldr	r0, [pc, #68]	; (8006a7c <xTimerCreateTimerTask+0x88>)
 8006a38:	f7ff f8e4 	bl	8005c04 <xTaskCreateStatic>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4a10      	ldr	r2, [pc, #64]	; (8006a80 <xTimerCreateTimerTask+0x8c>)
 8006a40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a42:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <xTimerCreateTimerTask+0x8c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	613b      	str	r3, [r7, #16]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a6a:	697b      	ldr	r3, [r7, #20]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20001094 	.word	0x20001094
 8006a78:	0800c884 	.word	0x0800c884
 8006a7c:	08006ba1 	.word	0x08006ba1
 8006a80:	20001098 	.word	0x20001098

08006a84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	623b      	str	r3, [r7, #32]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ab2:	4b1a      	ldr	r3, [pc, #104]	; (8006b1c <xTimerGenericCommand+0x98>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d02a      	beq.n	8006b10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b05      	cmp	r3, #5
 8006aca:	dc18      	bgt.n	8006afe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006acc:	f7ff feb2 	bl	8006834 <xTaskGetSchedulerState>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d109      	bne.n	8006aea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ad6:	4b11      	ldr	r3, [pc, #68]	; (8006b1c <xTimerGenericCommand+0x98>)
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	f107 0110 	add.w	r1, r7, #16
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae2:	f7fe fcad 	bl	8005440 <xQueueGenericSend>
 8006ae6:	6278      	str	r0, [r7, #36]	; 0x24
 8006ae8:	e012      	b.n	8006b10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <xTimerGenericCommand+0x98>)
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	f107 0110 	add.w	r1, r7, #16
 8006af2:	2300      	movs	r3, #0
 8006af4:	2200      	movs	r2, #0
 8006af6:	f7fe fca3 	bl	8005440 <xQueueGenericSend>
 8006afa:	6278      	str	r0, [r7, #36]	; 0x24
 8006afc:	e008      	b.n	8006b10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006afe:	4b07      	ldr	r3, [pc, #28]	; (8006b1c <xTimerGenericCommand+0x98>)
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	f107 0110 	add.w	r1, r7, #16
 8006b06:	2300      	movs	r3, #0
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	f7fe fd97 	bl	800563c <xQueueGenericSendFromISR>
 8006b0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3728      	adds	r7, #40	; 0x28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20001094 	.word	0x20001094

08006b20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b2a:	4b1c      	ldr	r3, [pc, #112]	; (8006b9c <prvProcessExpiredTimer+0x7c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe fb55 	bl	80051e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d122      	bne.n	8006b8c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	18d1      	adds	r1, r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	6978      	ldr	r0, [r7, #20]
 8006b54:	f000 f8c8 	bl	8006ce8 <prvInsertTimerInActiveList>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d016      	beq.n	8006b8c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	2300      	movs	r3, #0
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	2100      	movs	r1, #0
 8006b68:	6978      	ldr	r0, [r7, #20]
 8006b6a:	f7ff ff8b 	bl	8006a84 <xTimerGenericCommand>
 8006b6e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10a      	bne.n	8006b8c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	60fb      	str	r3, [r7, #12]
}
 8006b88:	bf00      	nop
 8006b8a:	e7fe      	b.n	8006b8a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	6978      	ldr	r0, [r7, #20]
 8006b92:	4798      	blx	r3
}
 8006b94:	bf00      	nop
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	2000108c 	.word	0x2000108c

08006ba0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ba8:	f107 0308 	add.w	r3, r7, #8
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 f857 	bl	8006c60 <prvGetNextExpireTime>
 8006bb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f803 	bl	8006bc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006bbe:	f000 f8d5 	bl	8006d6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bc2:	e7f1      	b.n	8006ba8 <prvTimerTask+0x8>

08006bc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bce:	f7ff fa4b 	bl	8006068 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bd2:	f107 0308 	add.w	r3, r7, #8
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 f866 	bl	8006ca8 <prvSampleTimeNow>
 8006bdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d130      	bne.n	8006c46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10a      	bne.n	8006c00 <prvProcessTimerOrBlockTask+0x3c>
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d806      	bhi.n	8006c00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006bf2:	f7ff fa47 	bl	8006084 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bf6:	68f9      	ldr	r1, [r7, #12]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ff91 	bl	8006b20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006bfe:	e024      	b.n	8006c4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d008      	beq.n	8006c18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c06:	4b13      	ldr	r3, [pc, #76]	; (8006c54 <prvProcessTimerOrBlockTask+0x90>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bf0c      	ite	eq
 8006c10:	2301      	moveq	r3, #1
 8006c12:	2300      	movne	r3, #0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c18:	4b0f      	ldr	r3, [pc, #60]	; (8006c58 <prvProcessTimerOrBlockTask+0x94>)
 8006c1a:	6818      	ldr	r0, [r3, #0]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	4619      	mov	r1, r3
 8006c26:	f7fe ffb9 	bl	8005b9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c2a:	f7ff fa2b 	bl	8006084 <xTaskResumeAll>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c34:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <prvProcessTimerOrBlockTask+0x98>)
 8006c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	f3bf 8f6f 	isb	sy
}
 8006c44:	e001      	b.n	8006c4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c46:	f7ff fa1d 	bl	8006084 <xTaskResumeAll>
}
 8006c4a:	bf00      	nop
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20001090 	.word	0x20001090
 8006c58:	20001094 	.word	0x20001094
 8006c5c:	e000ed04 	.word	0xe000ed04

08006c60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c68:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <prvGetNextExpireTime+0x44>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bf0c      	ite	eq
 8006c72:	2301      	moveq	r3, #1
 8006c74:	2300      	movne	r3, #0
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	461a      	mov	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d105      	bne.n	8006c92 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c86:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <prvGetNextExpireTime+0x44>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	e001      	b.n	8006c96 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c96:	68fb      	ldr	r3, [r7, #12]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	2000108c 	.word	0x2000108c

08006ca8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006cb0:	f7ff fa86 	bl	80061c0 <xTaskGetTickCount>
 8006cb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <prvSampleTimeNow+0x3c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d205      	bcs.n	8006ccc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006cc0:	f000 f908 	bl	8006ed4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	e002      	b.n	8006cd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cd2:	4a04      	ldr	r2, [pc, #16]	; (8006ce4 <prvSampleTimeNow+0x3c>)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	2000109c 	.word	0x2000109c

08006ce8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d812      	bhi.n	8006d34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	1ad2      	subs	r2, r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d302      	bcc.n	8006d22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	e01b      	b.n	8006d5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d22:	4b10      	ldr	r3, [pc, #64]	; (8006d64 <prvInsertTimerInActiveList+0x7c>)
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3304      	adds	r3, #4
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	f7fe fa23 	bl	8005178 <vListInsert>
 8006d32:	e012      	b.n	8006d5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d206      	bcs.n	8006d4a <prvInsertTimerInActiveList+0x62>
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d302      	bcc.n	8006d4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d44:	2301      	movs	r3, #1
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	e007      	b.n	8006d5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d4a:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <prvInsertTimerInActiveList+0x80>)
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3304      	adds	r3, #4
 8006d52:	4619      	mov	r1, r3
 8006d54:	4610      	mov	r0, r2
 8006d56:	f7fe fa0f 	bl	8005178 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d5a:	697b      	ldr	r3, [r7, #20]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20001090 	.word	0x20001090
 8006d68:	2000108c 	.word	0x2000108c

08006d6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08e      	sub	sp, #56	; 0x38
 8006d70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d72:	e09d      	b.n	8006eb0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da18      	bge.n	8006dac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d7a:	1d3b      	adds	r3, r7, #4
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	61fb      	str	r3, [r7, #28]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006da2:	6850      	ldr	r0, [r2, #4]
 8006da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006da6:	6892      	ldr	r2, [r2, #8]
 8006da8:	4611      	mov	r1, r2
 8006daa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	db7e      	blt.n	8006eb0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d004      	beq.n	8006dc8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fa10 	bl	80051e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dc8:	463b      	mov	r3, r7
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff ff6c 	bl	8006ca8 <prvSampleTimeNow>
 8006dd0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b09      	cmp	r3, #9
 8006dd6:	d86a      	bhi.n	8006eae <prvProcessReceivedCommands+0x142>
 8006dd8:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <prvProcessReceivedCommands+0x74>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006e09 	.word	0x08006e09
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e09 	.word	0x08006e09
 8006dec:	08006eb1 	.word	0x08006eb1
 8006df0:	08006e65 	.word	0x08006e65
 8006df4:	08006e9d 	.word	0x08006e9d
 8006df8:	08006e09 	.word	0x08006e09
 8006dfc:	08006e09 	.word	0x08006e09
 8006e00:	08006eb1 	.word	0x08006eb1
 8006e04:	08006e65 	.word	0x08006e65
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	18d1      	adds	r1, r2, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e16:	f7ff ff67 	bl	8006ce8 <prvInsertTimerInActiveList>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d047      	beq.n	8006eb0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e26:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d13f      	bne.n	8006eb0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	441a      	add	r2, r3
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	2100      	movs	r1, #0
 8006e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e42:	f7ff fe1f 	bl	8006a84 <xTimerGenericCommand>
 8006e46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d130      	bne.n	8006eb0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	61bb      	str	r3, [r7, #24]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	617b      	str	r3, [r7, #20]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	18d1      	adds	r1, r2, r3
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e96:	f7ff ff27 	bl	8006ce8 <prvInsertTimerInActiveList>
					break;
 8006e9a:	e009      	b.n	8006eb0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d104      	bne.n	8006eb0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea8:	f000 fb6c 	bl	8007584 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006eac:	e000      	b.n	8006eb0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006eae:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006eb0:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <prvProcessReceivedCommands+0x164>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	1d39      	adds	r1, r7, #4
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fc57 	bl	800576c <xQueueReceive>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f47f af57 	bne.w	8006d74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006ec6:	bf00      	nop
 8006ec8:	bf00      	nop
 8006eca:	3730      	adds	r7, #48	; 0x30
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20001094 	.word	0x20001094

08006ed4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006eda:	e045      	b.n	8006f68 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006edc:	4b2c      	ldr	r3, [pc, #176]	; (8006f90 <prvSwitchTimerLists+0xbc>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ee6:	4b2a      	ldr	r3, [pc, #168]	; (8006f90 <prvSwitchTimerLists+0xbc>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe f977 	bl	80051e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d12e      	bne.n	8006f68 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4413      	add	r3, r2
 8006f12:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d90e      	bls.n	8006f3a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f28:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <prvSwitchTimerLists+0xbc>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f7fe f920 	bl	8005178 <vListInsert>
 8006f38:	e016      	b.n	8006f68 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	2100      	movs	r1, #0
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7ff fd9d 	bl	8006a84 <xTimerGenericCommand>
 8006f4a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	603b      	str	r3, [r7, #0]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <prvSwitchTimerLists+0xbc>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1b4      	bne.n	8006edc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f72:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <prvSwitchTimerLists+0xbc>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f78:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <prvSwitchTimerLists+0xc0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a04      	ldr	r2, [pc, #16]	; (8006f90 <prvSwitchTimerLists+0xbc>)
 8006f7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f80:	4a04      	ldr	r2, [pc, #16]	; (8006f94 <prvSwitchTimerLists+0xc0>)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	6013      	str	r3, [r2, #0]
}
 8006f86:	bf00      	nop
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	2000108c 	.word	0x2000108c
 8006f94:	20001090 	.word	0x20001090

08006f98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f9e:	f000 f92d 	bl	80071fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006fa2:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <prvCheckForValidListAndQueue+0x60>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d120      	bne.n	8006fec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006faa:	4814      	ldr	r0, [pc, #80]	; (8006ffc <prvCheckForValidListAndQueue+0x64>)
 8006fac:	f7fe f896 	bl	80050dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006fb0:	4813      	ldr	r0, [pc, #76]	; (8007000 <prvCheckForValidListAndQueue+0x68>)
 8006fb2:	f7fe f893 	bl	80050dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006fb6:	4b13      	ldr	r3, [pc, #76]	; (8007004 <prvCheckForValidListAndQueue+0x6c>)
 8006fb8:	4a10      	ldr	r2, [pc, #64]	; (8006ffc <prvCheckForValidListAndQueue+0x64>)
 8006fba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006fbc:	4b12      	ldr	r3, [pc, #72]	; (8007008 <prvCheckForValidListAndQueue+0x70>)
 8006fbe:	4a10      	ldr	r2, [pc, #64]	; (8007000 <prvCheckForValidListAndQueue+0x68>)
 8006fc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	4b11      	ldr	r3, [pc, #68]	; (800700c <prvCheckForValidListAndQueue+0x74>)
 8006fc8:	4a11      	ldr	r2, [pc, #68]	; (8007010 <prvCheckForValidListAndQueue+0x78>)
 8006fca:	2110      	movs	r1, #16
 8006fcc:	200a      	movs	r0, #10
 8006fce:	f7fe f99d 	bl	800530c <xQueueGenericCreateStatic>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	4a08      	ldr	r2, [pc, #32]	; (8006ff8 <prvCheckForValidListAndQueue+0x60>)
 8006fd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006fd8:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <prvCheckForValidListAndQueue+0x60>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006fe0:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <prvCheckForValidListAndQueue+0x60>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	490b      	ldr	r1, [pc, #44]	; (8007014 <prvCheckForValidListAndQueue+0x7c>)
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fdb0 	bl	8005b4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fec:	f000 f936 	bl	800725c <vPortExitCritical>
}
 8006ff0:	bf00      	nop
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20001094 	.word	0x20001094
 8006ffc:	20001064 	.word	0x20001064
 8007000:	20001078 	.word	0x20001078
 8007004:	2000108c 	.word	0x2000108c
 8007008:	20001090 	.word	0x20001090
 800700c:	20001140 	.word	0x20001140
 8007010:	200010a0 	.word	0x200010a0
 8007014:	0800c88c 	.word	0x0800c88c

08007018 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3b04      	subs	r3, #4
 8007028:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3b04      	subs	r3, #4
 8007036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f023 0201 	bic.w	r2, r3, #1
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3b04      	subs	r3, #4
 8007046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007048:	4a08      	ldr	r2, [pc, #32]	; (800706c <pxPortInitialiseStack+0x54>)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3b14      	subs	r3, #20
 8007052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3b20      	subs	r3, #32
 800705e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007060:	68fb      	ldr	r3, [r7, #12]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr
 800706c:	08007071 	.word	0x08007071

08007070 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007076:	2300      	movs	r3, #0
 8007078:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800707a:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <prvTaskExitError+0x54>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007082:	d00a      	beq.n	800709a <prvTaskExitError+0x2a>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	60fb      	str	r3, [r7, #12]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <prvTaskExitError+0x28>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	60bb      	str	r3, [r7, #8]
}
 80070ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070ae:	bf00      	nop
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0fc      	beq.n	80070b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070b6:	bf00      	nop
 80070b8:	bf00      	nop
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	2000000c 	.word	0x2000000c
	...

080070d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070d0:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <pxCurrentTCBConst2>)
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	6808      	ldr	r0, [r1, #0]
 80070d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80070da:	f380 8809 	msr	PSP, r0
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f380 8811 	msr	BASEPRI, r0
 80070ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80070ee:	4770      	bx	lr

080070f0 <pxCurrentTCBConst2>:
 80070f0:	20000b64 	.word	0x20000b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop

080070f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80070f8:	4806      	ldr	r0, [pc, #24]	; (8007114 <prvPortStartFirstTask+0x1c>)
 80070fa:	6800      	ldr	r0, [r0, #0]
 80070fc:	6800      	ldr	r0, [r0, #0]
 80070fe:	f380 8808 	msr	MSP, r0
 8007102:	b662      	cpsie	i
 8007104:	b661      	cpsie	f
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	df00      	svc	0
 8007110:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007112:	bf00      	nop
 8007114:	e000ed08 	.word	0xe000ed08

08007118 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800711e:	4b32      	ldr	r3, [pc, #200]	; (80071e8 <xPortStartScheduler+0xd0>)
 8007120:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b2db      	uxtb	r3, r3
 8007128:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	22ff      	movs	r2, #255	; 0xff
 800712e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007140:	b2da      	uxtb	r2, r3
 8007142:	4b2a      	ldr	r3, [pc, #168]	; (80071ec <xPortStartScheduler+0xd4>)
 8007144:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007146:	4b2a      	ldr	r3, [pc, #168]	; (80071f0 <xPortStartScheduler+0xd8>)
 8007148:	2207      	movs	r2, #7
 800714a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800714c:	e009      	b.n	8007162 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800714e:	4b28      	ldr	r3, [pc, #160]	; (80071f0 <xPortStartScheduler+0xd8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3b01      	subs	r3, #1
 8007154:	4a26      	ldr	r2, [pc, #152]	; (80071f0 <xPortStartScheduler+0xd8>)
 8007156:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	b2db      	uxtb	r3, r3
 8007160:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716a:	2b80      	cmp	r3, #128	; 0x80
 800716c:	d0ef      	beq.n	800714e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800716e:	4b20      	ldr	r3, [pc, #128]	; (80071f0 <xPortStartScheduler+0xd8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f1c3 0307 	rsb	r3, r3, #7
 8007176:	2b04      	cmp	r3, #4
 8007178:	d00a      	beq.n	8007190 <xPortStartScheduler+0x78>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	60bb      	str	r3, [r7, #8]
}
 800718c:	bf00      	nop
 800718e:	e7fe      	b.n	800718e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007190:	4b17      	ldr	r3, [pc, #92]	; (80071f0 <xPortStartScheduler+0xd8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	021b      	lsls	r3, r3, #8
 8007196:	4a16      	ldr	r2, [pc, #88]	; (80071f0 <xPortStartScheduler+0xd8>)
 8007198:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800719a:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <xPortStartScheduler+0xd8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071a2:	4a13      	ldr	r2, [pc, #76]	; (80071f0 <xPortStartScheduler+0xd8>)
 80071a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071ae:	4b11      	ldr	r3, [pc, #68]	; (80071f4 <xPortStartScheduler+0xdc>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a10      	ldr	r2, [pc, #64]	; (80071f4 <xPortStartScheduler+0xdc>)
 80071b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071ba:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <xPortStartScheduler+0xdc>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a0d      	ldr	r2, [pc, #52]	; (80071f4 <xPortStartScheduler+0xdc>)
 80071c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071c6:	f000 f8b9 	bl	800733c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071ca:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <xPortStartScheduler+0xe0>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071d0:	f7ff ff92 	bl	80070f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071d4:	f7ff f8c0 	bl	8006358 <vTaskSwitchContext>
	prvTaskExitError();
 80071d8:	f7ff ff4a 	bl	8007070 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	e000e400 	.word	0xe000e400
 80071ec:	20001190 	.word	0x20001190
 80071f0:	20001194 	.word	0x20001194
 80071f4:	e000ed20 	.word	0xe000ed20
 80071f8:	2000000c 	.word	0x2000000c

080071fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	607b      	str	r3, [r7, #4]
}
 8007214:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007216:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <vPortEnterCritical+0x58>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	4a0d      	ldr	r2, [pc, #52]	; (8007254 <vPortEnterCritical+0x58>)
 800721e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007220:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <vPortEnterCritical+0x58>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d10f      	bne.n	8007248 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007228:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <vPortEnterCritical+0x5c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <vPortEnterCritical+0x4c>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	603b      	str	r3, [r7, #0]
}
 8007244:	bf00      	nop
 8007246:	e7fe      	b.n	8007246 <vPortEnterCritical+0x4a>
	}
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	2000000c 	.word	0x2000000c
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007262:	4b11      	ldr	r3, [pc, #68]	; (80072a8 <vPortExitCritical+0x4c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <vPortExitCritical+0x24>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	607b      	str	r3, [r7, #4]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007280:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <vPortExitCritical+0x4c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3b01      	subs	r3, #1
 8007286:	4a08      	ldr	r2, [pc, #32]	; (80072a8 <vPortExitCritical+0x4c>)
 8007288:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800728a:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <vPortExitCritical+0x4c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d105      	bne.n	800729e <vPortExitCritical+0x42>
 8007292:	2300      	movs	r3, #0
 8007294:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	f383 8811 	msr	BASEPRI, r3
}
 800729c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr
 80072a8:	2000000c 	.word	0x2000000c
 80072ac:	00000000 	.word	0x00000000

080072b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072b0:	f3ef 8009 	mrs	r0, PSP
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	4b0d      	ldr	r3, [pc, #52]	; (80072f0 <pxCurrentTCBConst>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072c0:	6010      	str	r0, [r2, #0]
 80072c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80072c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072ca:	f380 8811 	msr	BASEPRI, r0
 80072ce:	f7ff f843 	bl	8006358 <vTaskSwitchContext>
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f380 8811 	msr	BASEPRI, r0
 80072da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80072de:	6819      	ldr	r1, [r3, #0]
 80072e0:	6808      	ldr	r0, [r1, #0]
 80072e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072e6:	f380 8809 	msr	PSP, r0
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	4770      	bx	lr

080072f0 <pxCurrentTCBConst>:
 80072f0:	20000b64 	.word	0x20000b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop

080072f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007312:	f7fe ff63 	bl	80061dc <xTaskIncrementTick>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800731c:	4b06      	ldr	r3, [pc, #24]	; (8007338 <SysTick_Handler+0x40>)
 800731e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	2300      	movs	r3, #0
 8007326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	f383 8811 	msr	BASEPRI, r3
}
 800732e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007340:	4b0a      	ldr	r3, [pc, #40]	; (800736c <vPortSetupTimerInterrupt+0x30>)
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007346:	4b0a      	ldr	r3, [pc, #40]	; (8007370 <vPortSetupTimerInterrupt+0x34>)
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800734c:	4b09      	ldr	r3, [pc, #36]	; (8007374 <vPortSetupTimerInterrupt+0x38>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a09      	ldr	r2, [pc, #36]	; (8007378 <vPortSetupTimerInterrupt+0x3c>)
 8007352:	fba2 2303 	umull	r2, r3, r2, r3
 8007356:	099b      	lsrs	r3, r3, #6
 8007358:	4a08      	ldr	r2, [pc, #32]	; (800737c <vPortSetupTimerInterrupt+0x40>)
 800735a:	3b01      	subs	r3, #1
 800735c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800735e:	4b03      	ldr	r3, [pc, #12]	; (800736c <vPortSetupTimerInterrupt+0x30>)
 8007360:	2207      	movs	r2, #7
 8007362:	601a      	str	r2, [r3, #0]
}
 8007364:	bf00      	nop
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr
 800736c:	e000e010 	.word	0xe000e010
 8007370:	e000e018 	.word	0xe000e018
 8007374:	20000000 	.word	0x20000000
 8007378:	10624dd3 	.word	0x10624dd3
 800737c:	e000e014 	.word	0xe000e014

08007380 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007386:	f3ef 8305 	mrs	r3, IPSR
 800738a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d914      	bls.n	80073bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007392:	4a16      	ldr	r2, [pc, #88]	; (80073ec <vPortValidateInterruptPriority+0x6c>)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4413      	add	r3, r2
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800739c:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <vPortValidateInterruptPriority+0x70>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	7afa      	ldrb	r2, [r7, #11]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d20a      	bcs.n	80073bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	607b      	str	r3, [r7, #4]
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073bc:	4b0d      	ldr	r3, [pc, #52]	; (80073f4 <vPortValidateInterruptPriority+0x74>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073c4:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <vPortValidateInterruptPriority+0x78>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d90a      	bls.n	80073e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	603b      	str	r3, [r7, #0]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <vPortValidateInterruptPriority+0x60>
	}
 80073e2:	bf00      	nop
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr
 80073ec:	e000e3f0 	.word	0xe000e3f0
 80073f0:	20001190 	.word	0x20001190
 80073f4:	e000ed0c 	.word	0xe000ed0c
 80073f8:	20001194 	.word	0x20001194

080073fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	; 0x28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007404:	2300      	movs	r3, #0
 8007406:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007408:	f7fe fe2e 	bl	8006068 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800740c:	4b58      	ldr	r3, [pc, #352]	; (8007570 <pvPortMalloc+0x174>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007414:	f000 f910 	bl	8007638 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007418:	4b56      	ldr	r3, [pc, #344]	; (8007574 <pvPortMalloc+0x178>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4013      	ands	r3, r2
 8007420:	2b00      	cmp	r3, #0
 8007422:	f040 808e 	bne.w	8007542 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01d      	beq.n	8007468 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800742c:	2208      	movs	r2, #8
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	2b00      	cmp	r3, #0
 800743c:	d014      	beq.n	8007468 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f023 0307 	bic.w	r3, r3, #7
 8007444:	3308      	adds	r3, #8
 8007446:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f003 0307 	and.w	r3, r3, #7
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <pvPortMalloc+0x6c>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	617b      	str	r3, [r7, #20]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d069      	beq.n	8007542 <pvPortMalloc+0x146>
 800746e:	4b42      	ldr	r3, [pc, #264]	; (8007578 <pvPortMalloc+0x17c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	429a      	cmp	r2, r3
 8007476:	d864      	bhi.n	8007542 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007478:	4b40      	ldr	r3, [pc, #256]	; (800757c <pvPortMalloc+0x180>)
 800747a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800747c:	4b3f      	ldr	r3, [pc, #252]	; (800757c <pvPortMalloc+0x180>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007482:	e004      	b.n	800748e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	429a      	cmp	r2, r3
 8007496:	d903      	bls.n	80074a0 <pvPortMalloc+0xa4>
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f1      	bne.n	8007484 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074a0:	4b33      	ldr	r3, [pc, #204]	; (8007570 <pvPortMalloc+0x174>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d04b      	beq.n	8007542 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2208      	movs	r2, #8
 80074b0:	4413      	add	r3, r2
 80074b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	1ad2      	subs	r2, r2, r3
 80074c4:	2308      	movs	r3, #8
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d91f      	bls.n	800750c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4413      	add	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <pvPortMalloc+0xf8>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	613b      	str	r3, [r7, #16]
}
 80074f0:	bf00      	nop
 80074f2:	e7fe      	b.n	80074f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007506:	69b8      	ldr	r0, [r7, #24]
 8007508:	f000 f8f8 	bl	80076fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800750c:	4b1a      	ldr	r3, [pc, #104]	; (8007578 <pvPortMalloc+0x17c>)
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	4a18      	ldr	r2, [pc, #96]	; (8007578 <pvPortMalloc+0x17c>)
 8007518:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800751a:	4b17      	ldr	r3, [pc, #92]	; (8007578 <pvPortMalloc+0x17c>)
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	4b18      	ldr	r3, [pc, #96]	; (8007580 <pvPortMalloc+0x184>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	429a      	cmp	r2, r3
 8007524:	d203      	bcs.n	800752e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007526:	4b14      	ldr	r3, [pc, #80]	; (8007578 <pvPortMalloc+0x17c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a15      	ldr	r2, [pc, #84]	; (8007580 <pvPortMalloc+0x184>)
 800752c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	4b10      	ldr	r3, [pc, #64]	; (8007574 <pvPortMalloc+0x178>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	431a      	orrs	r2, r3
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	2200      	movs	r2, #0
 8007540:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007542:	f7fe fd9f 	bl	8006084 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	f003 0307 	and.w	r3, r3, #7
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00a      	beq.n	8007566 <pvPortMalloc+0x16a>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60fb      	str	r3, [r7, #12]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <pvPortMalloc+0x168>
	return pvReturn;
 8007566:	69fb      	ldr	r3, [r7, #28]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3728      	adds	r7, #40	; 0x28
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	20001da0 	.word	0x20001da0
 8007574:	20001dac 	.word	0x20001dac
 8007578:	20001da4 	.word	0x20001da4
 800757c:	20001d98 	.word	0x20001d98
 8007580:	20001da8 	.word	0x20001da8

08007584 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d048      	beq.n	8007628 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007596:	2308      	movs	r3, #8
 8007598:	425b      	negs	r3, r3
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4413      	add	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	4b21      	ldr	r3, [pc, #132]	; (8007630 <vPortFree+0xac>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4013      	ands	r3, r2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <vPortFree+0x44>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	60fb      	str	r3, [r7, #12]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00a      	beq.n	80075e6 <vPortFree+0x62>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	60bb      	str	r3, [r7, #8]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	4b11      	ldr	r3, [pc, #68]	; (8007630 <vPortFree+0xac>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4013      	ands	r3, r2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d019      	beq.n	8007628 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d115      	bne.n	8007628 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <vPortFree+0xac>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	43db      	mvns	r3, r3
 8007606:	401a      	ands	r2, r3
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800760c:	f7fe fd2c 	bl	8006068 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	4b07      	ldr	r3, [pc, #28]	; (8007634 <vPortFree+0xb0>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4413      	add	r3, r2
 800761a:	4a06      	ldr	r2, [pc, #24]	; (8007634 <vPortFree+0xb0>)
 800761c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800761e:	6938      	ldr	r0, [r7, #16]
 8007620:	f000 f86c 	bl	80076fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007624:	f7fe fd2e 	bl	8006084 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007628:	bf00      	nop
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20001dac 	.word	0x20001dac
 8007634:	20001da4 	.word	0x20001da4

08007638 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800763e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007642:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007644:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <prvHeapInit+0xac>)
 8007646:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f003 0307 	and.w	r3, r3, #7
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00c      	beq.n	800766c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3307      	adds	r3, #7
 8007656:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0307 	bic.w	r3, r3, #7
 800765e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	4a1f      	ldr	r2, [pc, #124]	; (80076e4 <prvHeapInit+0xac>)
 8007668:	4413      	add	r3, r2
 800766a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007670:	4a1d      	ldr	r2, [pc, #116]	; (80076e8 <prvHeapInit+0xb0>)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007676:	4b1c      	ldr	r3, [pc, #112]	; (80076e8 <prvHeapInit+0xb0>)
 8007678:	2200      	movs	r2, #0
 800767a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	4413      	add	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007684:	2208      	movs	r2, #8
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	1a9b      	subs	r3, r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 0307 	bic.w	r3, r3, #7
 8007692:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4a15      	ldr	r2, [pc, #84]	; (80076ec <prvHeapInit+0xb4>)
 8007698:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800769a:	4b14      	ldr	r3, [pc, #80]	; (80076ec <prvHeapInit+0xb4>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2200      	movs	r2, #0
 80076a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076a2:	4b12      	ldr	r3, [pc, #72]	; (80076ec <prvHeapInit+0xb4>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	1ad2      	subs	r2, r2, r3
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076b8:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <prvHeapInit+0xb4>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	4a0a      	ldr	r2, [pc, #40]	; (80076f0 <prvHeapInit+0xb8>)
 80076c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	4a09      	ldr	r2, [pc, #36]	; (80076f4 <prvHeapInit+0xbc>)
 80076ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076d0:	4b09      	ldr	r3, [pc, #36]	; (80076f8 <prvHeapInit+0xc0>)
 80076d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076d6:	601a      	str	r2, [r3, #0]
}
 80076d8:	bf00      	nop
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	bc80      	pop	{r7}
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20001198 	.word	0x20001198
 80076e8:	20001d98 	.word	0x20001d98
 80076ec:	20001da0 	.word	0x20001da0
 80076f0:	20001da8 	.word	0x20001da8
 80076f4:	20001da4 	.word	0x20001da4
 80076f8:	20001dac 	.word	0x20001dac

080076fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007704:	4b27      	ldr	r3, [pc, #156]	; (80077a4 <prvInsertBlockIntoFreeList+0xa8>)
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	e002      	b.n	8007710 <prvInsertBlockIntoFreeList+0x14>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	429a      	cmp	r2, r3
 8007718:	d8f7      	bhi.n	800770a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	4413      	add	r3, r2
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	429a      	cmp	r2, r3
 800772a:	d108      	bne.n	800773e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	441a      	add	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	441a      	add	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d118      	bne.n	8007784 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	4b14      	ldr	r3, [pc, #80]	; (80077a8 <prvInsertBlockIntoFreeList+0xac>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d00d      	beq.n	800777a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	441a      	add	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	e008      	b.n	800778c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800777a:	4b0b      	ldr	r3, [pc, #44]	; (80077a8 <prvInsertBlockIntoFreeList+0xac>)
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	e003      	b.n	800778c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	429a      	cmp	r2, r3
 8007792:	d002      	beq.n	800779a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800779a:	bf00      	nop
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	bc80      	pop	{r7}
 80077a2:	4770      	bx	lr
 80077a4:	20001d98 	.word	0x20001d98
 80077a8:	20001da0 	.word	0x20001da0

080077ac <Encoder_Init>:
 */

#include "EncoderVelocity.h"
#include "tim.h"

void Encoder_Init(Encoder *Encoder) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]

	Encoder->Lastick=HAL_GetTick();
 80077b4:	f7fa fc04 	bl	8001fc0 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	609a      	str	r2, [r3, #8]
	Encoder->velocity=0;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f04f 0200 	mov.w	r2, #0
 80077c4:	605a      	str	r2, [r3, #4]
	Encoder->last_counter_value=0;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]

}
 80077cc:	bf00      	nop
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <HAL_TIM_IC_CaptureCallback>:

int32_t encoder_count = 0;
int32_t encoder_last_count=0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
     int16_t capture = __HAL_TIM_GET_COUNTER(htim);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	81fb      	strh	r3, [r7, #14]
     if (htim->Instance == TIM2)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ec:	d129      	bne.n	8007842 <HAL_TIM_IC_CaptureCallback+0x6e>
     {
         if (capture < encoder_last_count)
 80077ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80077f2:	4b16      	ldr	r3, [pc, #88]	; (800784c <HAL_TIM_IC_CaptureCallback+0x78>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	da05      	bge.n	8007806 <HAL_TIM_IC_CaptureCallback+0x32>
         {
             encoder_count++;
 80077fa:	4b15      	ldr	r3, [pc, #84]	; (8007850 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3301      	adds	r3, #1
 8007800:	4a13      	ldr	r2, [pc, #76]	; (8007850 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	e004      	b.n	8007810 <HAL_TIM_IC_CaptureCallback+0x3c>
         }
         else
         {
             encoder_count--;
 8007806:	4b12      	ldr	r3, [pc, #72]	; (8007850 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3b01      	subs	r3, #1
 800780c:	4a10      	ldr	r2, [pc, #64]	; (8007850 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800780e:	6013      	str	r3, [r2, #0]
         }

         if (encoder_count < 0)
 8007810:	4b0f      	ldr	r3, [pc, #60]	; (8007850 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	da05      	bge.n	8007824 <HAL_TIM_IC_CaptureCallback+0x50>
         {
             encoder_count += MAX_COUNT;
 8007818:	4b0d      	ldr	r3, [pc, #52]	; (8007850 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007820:	4a0b      	ldr	r2, [pc, #44]	; (8007850 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007822:	6013      	str	r3, [r2, #0]
         }

         if (encoder_count >= MAX_COUNT)
 8007824:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800782c:	db05      	blt.n	800783a <HAL_TIM_IC_CaptureCallback+0x66>
         {
             encoder_count -= MAX_COUNT;
 800782e:	4b08      	ldr	r3, [pc, #32]	; (8007850 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8007836:	4a06      	ldr	r2, [pc, #24]	; (8007850 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007838:	6013      	str	r3, [r2, #0]
         }
         encoder_last_count = capture;
 800783a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800783e:	4a03      	ldr	r2, [pc, #12]	; (800784c <HAL_TIM_IC_CaptureCallback+0x78>)
 8007840:	6013      	str	r3, [r2, #0]
     }
}
 8007842:	bf00      	nop
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr
 800784c:	20001db4 	.word	0x20001db4
 8007850:	20001db0 	.word	0x20001db0
 8007854:	00000000 	.word	0x00000000

08007858 <Encoder_CaculateSpeed>:
void Encoder_CaculateSpeed(Encoder *Encoder, uint32_t Time){
 8007858:	b5b0      	push	{r4, r5, r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]

	 if ((HAL_GetTick() - Encoder->Lastick) >= Time)
 8007862:	f7fa fbad 	bl	8001fc0 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d856      	bhi.n	8007922 <Encoder_CaculateSpeed+0xca>
	 {
			int delta_counter = encoder_count - Encoder->last_counter_value;
 8007874:	4b30      	ldr	r3, [pc, #192]	; (8007938 <Encoder_CaculateSpeed+0xe0>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	60fb      	str	r3, [r7, #12]
			  	if(encoder_count > Encoder->last_counter_value) {
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	4b2c      	ldr	r3, [pc, #176]	; (8007938 <Encoder_CaculateSpeed+0xe0>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	429a      	cmp	r2, r3
 800788a:	da06      	bge.n	800789a <Encoder_CaculateSpeed+0x42>

			  		delta_counter = encoder_count - Encoder->last_counter_value;
 800788c:	4b2a      	ldr	r3, [pc, #168]	; (8007938 <Encoder_CaculateSpeed+0xe0>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	e005      	b.n	80078a6 <Encoder_CaculateSpeed+0x4e>
			  	}
			  	else {
			  		delta_counter = Encoder->last_counter_value - encoder_count;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4b26      	ldr	r3, [pc, #152]	; (8007938 <Encoder_CaculateSpeed+0xe0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	60fb      	str	r3, [r7, #12]
			  	}
			  	  float  rpm = ((float)(delta_counter) / 400)/(Time/1000.0);
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f7f9 fa18 	bl	8000cdc <__aeabi_i2f>
 80078ac:	4603      	mov	r3, r0
 80078ae:	4923      	ldr	r1, [pc, #140]	; (800793c <Encoder_CaculateSpeed+0xe4>)
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7f9 fb1b 	bl	8000eec <__aeabi_fdiv>
 80078b6:	4603      	mov	r3, r0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7f8 fdb5 	bl	8000428 <__aeabi_f2d>
 80078be:	4604      	mov	r4, r0
 80078c0:	460d      	mov	r5, r1
 80078c2:	6838      	ldr	r0, [r7, #0]
 80078c4:	f7f8 fd8e 	bl	80003e4 <__aeabi_ui2d>
 80078c8:	f04f 0200 	mov.w	r2, #0
 80078cc:	4b1c      	ldr	r3, [pc, #112]	; (8007940 <Encoder_CaculateSpeed+0xe8>)
 80078ce:	f7f8 ff2d 	bl	800072c <__aeabi_ddiv>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4620      	mov	r0, r4
 80078d8:	4629      	mov	r1, r5
 80078da:	f7f8 ff27 	bl	800072c <__aeabi_ddiv>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	4610      	mov	r0, r2
 80078e4:	4619      	mov	r1, r3
 80078e6:	f7f9 f8ef 	bl	8000ac8 <__aeabi_d2f>
 80078ea:	4603      	mov	r3, r0
 80078ec:	60bb      	str	r3, [r7, #8]
			  	   Encoder->Lastick = HAL_GetTick();
 80078ee:	f7fa fb67 	bl	8001fc0 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	609a      	str	r2, [r3, #8]
		           Encoder->velocity = rpm*(2 * 3.14159265359 * (0.07-0.045));
 80078f8:	68b8      	ldr	r0, [r7, #8]
 80078fa:	f7f8 fd95 	bl	8000428 <__aeabi_f2d>
 80078fe:	a30c      	add	r3, pc, #48	; (adr r3, 8007930 <Encoder_CaculateSpeed+0xd8>)
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f7f8 fde8 	bl	80004d8 <__aeabi_dmul>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4610      	mov	r0, r2
 800790e:	4619      	mov	r1, r3
 8007910:	f7f9 f8da 	bl	8000ac8 <__aeabi_d2f>
 8007914:	4602      	mov	r2, r0
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	605a      	str	r2, [r3, #4]
		           Encoder->last_counter_value=encoder_count;
 800791a:	4b07      	ldr	r3, [pc, #28]	; (8007938 <Encoder_CaculateSpeed+0xe0>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	601a      	str	r2, [r3, #0]
	 }
}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bdb0      	pop	{r4, r5, r7, pc}
 800792a:	bf00      	nop
 800792c:	f3af 8000 	nop.w
 8007930:	769cf257 	.word	0x769cf257
 8007934:	3fc41b2f 	.word	0x3fc41b2f
 8007938:	20001db0 	.word	0x20001db0
 800793c:	43c80000 	.word	0x43c80000
 8007940:	408f4000 	.word	0x408f4000

08007944 <Get_Speed>:

float Get_Speed(Encoder *Encoder){
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
	return Encoder->velocity;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr

0800795a <VNH3SP30_Init>:
#include "tim.h"
#include "Motor_Driver.h"
#include "stm32f1xx_hal.h"
#include <math.h>
void VNH3SP30_Init(VNH3SP30_t* driver)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
	driver->forward=0;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	709a      	strb	r2, [r3, #2]
	driver->speed=0;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	801a      	strh	r2, [r3, #0]
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr

08007978 <VNH3SP30_SetSpeed>:

void VNH3SP30_SetSpeed(VNH3SP30_t* driver, int16_t speed)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	807b      	strh	r3, [r7, #2]
	  if (speed > 400) {
 8007984:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007988:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800798c:	dd02      	ble.n	8007994 <VNH3SP30_SetSpeed+0x1c>
	    speed = 400;
 800798e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007992:	807b      	strh	r3, [r7, #2]
	  }
int pwm_duty = abs(speed) * 255 / 400;
 8007994:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007998:	2b00      	cmp	r3, #0
 800799a:	bfb8      	it	lt
 800799c:	425b      	neglt	r3, r3
 800799e:	b29b      	uxth	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	4613      	mov	r3, r2
 80079a4:	021b      	lsls	r3, r3, #8
 80079a6:	1a9b      	subs	r3, r3, r2
 80079a8:	4a24      	ldr	r2, [pc, #144]	; (8007a3c <VNH3SP30_SetSpeed+0xc4>)
 80079aa:	fb82 1203 	smull	r1, r2, r2, r3
 80079ae:	11d2      	asrs	r2, r2, #7
 80079b0:	17db      	asrs	r3, r3, #31
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	60fb      	str	r3, [r7, #12]
  if (speed > 0 || (speed == 0 && driver->forward)) {
 80079b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	dc07      	bgt.n	80079ce <VNH3SP30_SetSpeed+0x56>
 80079be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d11b      	bne.n	80079fe <VNH3SP30_SetSpeed+0x86>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	789b      	ldrb	r3, [r3, #2]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d017      	beq.n	80079fe <VNH3SP30_SetSpeed+0x86>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80079ce:	2201      	movs	r2, #1
 80079d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079d4:	481a      	ldr	r0, [pc, #104]	; (8007a40 <VNH3SP30_SetSpeed+0xc8>)
 80079d6:	f7fb fad3 	bl	8002f80 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80079da:	2201      	movs	r2, #1
 80079dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80079e0:	4817      	ldr	r0, [pc, #92]	; (8007a40 <VNH3SP30_SetSpeed+0xc8>)
 80079e2:	f7fb facd 	bl	8002f80 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty);
 80079e6:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <VNH3SP30_SetSpeed+0xcc>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80079ee:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <VNH3SP30_SetSpeed+0xcc>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2200      	movs	r2, #0
 80079f4:	641a      	str	r2, [r3, #64]	; 0x40
    driver->forward = 1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	709a      	strb	r2, [r3, #2]
	   	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
	   	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
	   	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_duty);
    driver->forward = 0;
  }
}
 80079fc:	e01a      	b.n	8007a34 <VNH3SP30_SetSpeed+0xbc>
  } else if (speed < 0) {
 80079fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	da16      	bge.n	8007a34 <VNH3SP30_SetSpeed+0xbc>
	     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8007a06:	2201      	movs	r2, #1
 8007a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a0c:	480c      	ldr	r0, [pc, #48]	; (8007a40 <VNH3SP30_SetSpeed+0xc8>)
 8007a0e:	f7fb fab7 	bl	8002f80 <HAL_GPIO_WritePin>
	   	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8007a12:	2201      	movs	r2, #1
 8007a14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a18:	4809      	ldr	r0, [pc, #36]	; (8007a40 <VNH3SP30_SetSpeed+0xc8>)
 8007a1a:	f7fb fab1 	bl	8002f80 <HAL_GPIO_WritePin>
	   	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8007a1e:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <VNH3SP30_SetSpeed+0xcc>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	635a      	str	r2, [r3, #52]	; 0x34
	   	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_duty);
 8007a26:	4b07      	ldr	r3, [pc, #28]	; (8007a44 <VNH3SP30_SetSpeed+0xcc>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	641a      	str	r2, [r3, #64]	; 0x40
    driver->forward = 0;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	709a      	strb	r2, [r3, #2]
}
 8007a34:	bf00      	nop
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	51eb851f 	.word	0x51eb851f
 8007a40:	40010c00 	.word	0x40010c00
 8007a44:	20000344 	.word	0x20000344

08007a48 <PID_Init>:
#include "PID.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	6879      	ldr	r1, [r7, #4]
 8007a5a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007a78:	f7f8 ffbe 	bl	80009f8 <__aeabi_dcmpgt>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d006      	beq.n	8007a90 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8007a8e:	e011      	b.n	8007ab4 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007a9c:	f7f8 ff8e 	bl	80009bc <__aeabi_dcmplt>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d100      	bne.n	8007aa8 <PID_Init+0x60>
}
 8007aa6:	e005      	b.n	8007ab4 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007aae:	6879      	ldr	r1, [r7, #4]
 8007ab0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	0000      	movs	r0, r0
	...

08007ac0 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08a      	sub	sp, #40	; 0x28
 8007ac4:	af06      	add	r7, sp, #24
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8007ae6:	a318      	add	r3, pc, #96	; (adr r3, 8007b48 <PID+0x88>)
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	e9cd 2300 	strd	r2, r3, [sp]
 8007af0:	f04f 0200 	mov.w	r2, #0
 8007af4:	f04f 0300 	mov.w	r3, #0
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 f931 	bl	8007d60 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2264      	movs	r2, #100	; 0x64
 8007b02:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8007b04:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007b08:	4619      	mov	r1, r3
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 fa38 	bl	8007f80 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8007b10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007b14:	9304      	str	r3, [sp, #16]
 8007b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b22:	e9cd 2300 	strd	r2, r3, [sp]
 8007b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 f984 	bl	8007e38 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8007b30:	f7fa fa46 	bl	8001fc0 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	1ad2      	subs	r2, r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	605a      	str	r2, [r3, #4]

}
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	00000000 	.word	0x00000000
 8007b4c:	406fe000 	.word	0x406fe000

08007b50 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8007b50:	b5b0      	push	{r4, r5, r7, lr}
 8007b52:	b08c      	sub	sp, #48	; 0x30
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	785b      	ldrb	r3, [r3, #1]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <PID_Compute+0x14>
	{
		return _FALSE;
 8007b60:	2300      	movs	r3, #0
 8007b62:	e0db      	b.n	8007d1c <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8007b64:	f7fa fa2c 	bl	8001fc0 <HAL_GetTick>
 8007b68:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	6a3a      	ldr	r2, [r7, #32]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	f0c0 80cd 	bcc.w	8007d1a <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b98:	f7f8 fae6 	bl	8000168 <__aeabi_dsub>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8007baa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007bae:	f7f8 fadb 	bl	8000168 <__aeabi_dsub>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007bc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bca:	f7f8 fc85 	bl	80004d8 <__aeabi_dmul>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	f7f8 fac9 	bl	800016c <__adddf3>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d114      	bne.n	8007c16 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8007bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bfc:	f7f8 fc6c 	bl	80004d8 <__aeabi_dmul>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	4620      	mov	r0, r4
 8007c06:	4629      	mov	r1, r5
 8007c08:	f7f8 faae 	bl	8000168 <__aeabi_dsub>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007c22:	f7f8 fee9 	bl	80009f8 <__aeabi_dcmpgt>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d006      	beq.n	8007c3a <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8007c38:	e010      	b.n	8007c5c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007c46:	f7f8 feb9 	bl	80009bc <__aeabi_dcmplt>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007c6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c6e:	f7f8 fc33 	bl	80004d8 <__aeabi_dmul>
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007c7a:	e005      	b.n	8007c88 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8007c7c:	f04f 0200 	mov.w	r2, #0
 8007c80:	f04f 0300 	mov.w	r3, #0
 8007c84:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c98:	f7f8 fc1e 	bl	80004d8 <__aeabi_dmul>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	f7f8 fa60 	bl	8000168 <__aeabi_dsub>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007cb0:	f7f8 fa5c 	bl	800016c <__adddf3>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007cc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007cc6:	f7f8 fe97 	bl	80009f8 <__aeabi_dcmpgt>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d005      	beq.n	8007cdc <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007cd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007cda:	e00e      	b.n	8007cfa <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007ce6:	f7f8 fe69 	bl	80009bc <__aeabi_dcmplt>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007cf6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		*uPID->MyOutput = output;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007cfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d02:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d0c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d14:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e000      	b.n	8007d1c <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 8007d1a:	2300      	movs	r3, #0
	}

}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3730      	adds	r7, #48	; 0x30
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bdb0      	pop	{r4, r5, r7, pc}

08007d24 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	bf0c      	ite	eq
 8007d36:	2301      	moveq	r3, #1
 8007d38:	2300      	movne	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d006      	beq.n	8007d52 <PID_SetMode+0x2e>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	785b      	ldrb	r3, [r3, #1]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d102      	bne.n	8007d52 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff fe7b 	bl	8007a48 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	7bfa      	ldrb	r2, [r7, #15]
 8007d56:	705a      	strb	r2, [r3, #1]

}
 8007d58:	bf00      	nop
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8007d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d74:	f7f8 fe36 	bl	80009e4 <__aeabi_dcmpge>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d158      	bne.n	8007e30 <PID_SetOutputLimits+0xd0>
	{
		return;
	}

	uPID->OutMin = Min;
 8007d7e:	68f9      	ldr	r1, [r7, #12]
 8007d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d84:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8007d88:	68f9      	ldr	r1, [r7, #12]
 8007d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d8e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d04b      	beq.n	8007e32 <PID_SetOutputLimits+0xd2>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007da8:	f7f8 fe26 	bl	80009f8 <__aeabi_dcmpgt>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d007      	beq.n	8007dc2 <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007dbc:	e9c1 2300 	strd	r2, r3, [r1]
 8007dc0:	e012      	b.n	8007de8 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007dd0:	f7f8 fdf4 	bl	80009bc <__aeabi_dcmplt>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d006      	beq.n	8007de8 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007de4:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007df4:	f7f8 fe00 	bl	80009f8 <__aeabi_dcmpgt>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d006      	beq.n	8007e0c <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007e04:	68f9      	ldr	r1, [r7, #12]
 8007e06:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8007e0a:	e012      	b.n	8007e32 <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007e18:	f7f8 fdd0 	bl	80009bc <__aeabi_dcmplt>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d007      	beq.n	8007e32 <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007e28:	68f9      	ldr	r1, [r7, #12]
 8007e2a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8007e2e:	e000      	b.n	8007e32 <PID_SetOutputLimits+0xd2>
		return;
 8007e30:	bf00      	nop
		}
		else { }

	}

}
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	e9c7 2300 	strd	r2, r3, [r7]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e50:	f7f8 fdb4 	bl	80009bc <__aeabi_dcmplt>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f040 808b 	bne.w	8007f72 <PID_SetTunings2+0x13a>
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007e68:	f7f8 fda8 	bl	80009bc <__aeabi_dcmplt>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d17f      	bne.n	8007f72 <PID_SetTunings2+0x13a>
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e7e:	f7f8 fd9d 	bl	80009bc <__aeabi_dcmplt>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d174      	bne.n	8007f72 <PID_SetTunings2+0x13a>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007e8e:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8007e90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	bf0c      	ite	eq
 8007e98:	2301      	moveq	r3, #1
 8007e9a:	2300      	movne	r3, #0
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8007ea4:	68f9      	ldr	r1, [r7, #12]
 8007ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eaa:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8007eae:	68f9      	ldr	r1, [r7, #12]
 8007eb0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007eb4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8007eb8:	68f9      	ldr	r1, [r7, #12]
 8007eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ebe:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7f8 fa8c 	bl	80003e4 <__aeabi_ui2d>
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	4b2a      	ldr	r3, [pc, #168]	; (8007f7c <PID_SetTunings2+0x144>)
 8007ed2:	f7f8 fc2b 	bl	800072c <__aeabi_ddiv>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uPID->Kp = Kp;
 8007ede:	68f9      	ldr	r1, [r7, #12]
 8007ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8007ee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007eec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ef0:	f7f8 faf2 	bl	80004d8 <__aeabi_dmul>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	68f9      	ldr	r1, [r7, #12]
 8007efa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8007efe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f06:	f7f8 fc11 	bl	800072c <__aeabi_ddiv>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	68f9      	ldr	r1, [r7, #12]
 8007f10:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	78db      	ldrb	r3, [r3, #3]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d12b      	bne.n	8007f74 <PID_SetTunings2+0x13c>
	{

		uPID->Kp = (0 - uPID->Kp);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f04f 0100 	mov.w	r1, #0
 8007f2a:	f7f8 f91d 	bl	8000168 <__aeabi_dsub>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	68f9      	ldr	r1, [r7, #12]
 8007f34:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007f3e:	f04f 0000 	mov.w	r0, #0
 8007f42:	f04f 0100 	mov.w	r1, #0
 8007f46:	f7f8 f90f 	bl	8000168 <__aeabi_dsub>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	68f9      	ldr	r1, [r7, #12]
 8007f50:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007f5a:	f04f 0000 	mov.w	r0, #0
 8007f5e:	f04f 0100 	mov.w	r1, #0
 8007f62:	f7f8 f901 	bl	8000168 <__aeabi_dsub>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	68f9      	ldr	r1, [r7, #12]
 8007f6c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8007f70:	e000      	b.n	8007f74 <PID_SetTunings2+0x13c>
		return;
 8007f72:	bf00      	nop

	}

}
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	408f4000 	.word	0x408f4000

08007f80 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	785b      	ldrb	r3, [r3, #1]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d02e      	beq.n	8007ff2 <PID_SetControllerDirection+0x72>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	78db      	ldrb	r3, [r3, #3]
 8007f98:	78fa      	ldrb	r2, [r7, #3]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d029      	beq.n	8007ff2 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007fa4:	f04f 0000 	mov.w	r0, #0
 8007fa8:	f04f 0100 	mov.w	r1, #0
 8007fac:	f7f8 f8dc 	bl	8000168 <__aeabi_dsub>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007fc0:	f04f 0000 	mov.w	r0, #0
 8007fc4:	f04f 0100 	mov.w	r1, #0
 8007fc8:	f7f8 f8ce 	bl	8000168 <__aeabi_dsub>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007fdc:	f04f 0000 	mov.w	r0, #0
 8007fe0:	f04f 0100 	mov.w	r1, #0
 8007fe4:	f7f8 f8c0 	bl	8000168 <__aeabi_dsub>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	6879      	ldr	r1, [r7, #4]
 8007fee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	78fa      	ldrb	r2, [r7, #3]
 8007ff6:	70da      	strb	r2, [r3, #3]

}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8008000:	b5b0      	push	{r4, r5, r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	dd2e      	ble.n	800806e <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8008010:	6838      	ldr	r0, [r7, #0]
 8008012:	f7f8 f9f7 	bl	8000404 <__aeabi_i2d>
 8008016:	4604      	mov	r4, r0
 8008018:	460d      	mov	r5, r1
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	4618      	mov	r0, r3
 8008020:	f7f8 f9e0 	bl	80003e4 <__aeabi_ui2d>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4620      	mov	r0, r4
 800802a:	4629      	mov	r1, r5
 800802c:	f7f8 fb7e 	bl	800072c <__aeabi_ddiv>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800803e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008042:	f7f8 fa49 	bl	80004d8 <__aeabi_dmul>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800805a:	f7f8 fb67 	bl	800072c <__aeabi_ddiv>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	609a      	str	r2, [r3, #8]

	}

}
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bdb0      	pop	{r4, r5, r7, pc}

08008076 <__cvt>:
 8008076:	2b00      	cmp	r3, #0
 8008078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800807c:	461f      	mov	r7, r3
 800807e:	bfbb      	ittet	lt
 8008080:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008084:	461f      	movlt	r7, r3
 8008086:	2300      	movge	r3, #0
 8008088:	232d      	movlt	r3, #45	; 0x2d
 800808a:	b088      	sub	sp, #32
 800808c:	4614      	mov	r4, r2
 800808e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008090:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008092:	7013      	strb	r3, [r2, #0]
 8008094:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008096:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800809a:	f023 0820 	bic.w	r8, r3, #32
 800809e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080a2:	d005      	beq.n	80080b0 <__cvt+0x3a>
 80080a4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080a8:	d100      	bne.n	80080ac <__cvt+0x36>
 80080aa:	3501      	adds	r5, #1
 80080ac:	2302      	movs	r3, #2
 80080ae:	e000      	b.n	80080b2 <__cvt+0x3c>
 80080b0:	2303      	movs	r3, #3
 80080b2:	aa07      	add	r2, sp, #28
 80080b4:	9204      	str	r2, [sp, #16]
 80080b6:	aa06      	add	r2, sp, #24
 80080b8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80080bc:	e9cd 3500 	strd	r3, r5, [sp]
 80080c0:	4622      	mov	r2, r4
 80080c2:	463b      	mov	r3, r7
 80080c4:	f001 f8a8 	bl	8009218 <_dtoa_r>
 80080c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080cc:	4606      	mov	r6, r0
 80080ce:	d102      	bne.n	80080d6 <__cvt+0x60>
 80080d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080d2:	07db      	lsls	r3, r3, #31
 80080d4:	d522      	bpl.n	800811c <__cvt+0xa6>
 80080d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080da:	eb06 0905 	add.w	r9, r6, r5
 80080de:	d110      	bne.n	8008102 <__cvt+0x8c>
 80080e0:	7833      	ldrb	r3, [r6, #0]
 80080e2:	2b30      	cmp	r3, #48	; 0x30
 80080e4:	d10a      	bne.n	80080fc <__cvt+0x86>
 80080e6:	2200      	movs	r2, #0
 80080e8:	2300      	movs	r3, #0
 80080ea:	4620      	mov	r0, r4
 80080ec:	4639      	mov	r1, r7
 80080ee:	f7f8 fc5b 	bl	80009a8 <__aeabi_dcmpeq>
 80080f2:	b918      	cbnz	r0, 80080fc <__cvt+0x86>
 80080f4:	f1c5 0501 	rsb	r5, r5, #1
 80080f8:	f8ca 5000 	str.w	r5, [sl]
 80080fc:	f8da 3000 	ldr.w	r3, [sl]
 8008100:	4499      	add	r9, r3
 8008102:	2200      	movs	r2, #0
 8008104:	2300      	movs	r3, #0
 8008106:	4620      	mov	r0, r4
 8008108:	4639      	mov	r1, r7
 800810a:	f7f8 fc4d 	bl	80009a8 <__aeabi_dcmpeq>
 800810e:	b108      	cbz	r0, 8008114 <__cvt+0x9e>
 8008110:	f8cd 901c 	str.w	r9, [sp, #28]
 8008114:	2230      	movs	r2, #48	; 0x30
 8008116:	9b07      	ldr	r3, [sp, #28]
 8008118:	454b      	cmp	r3, r9
 800811a:	d307      	bcc.n	800812c <__cvt+0xb6>
 800811c:	4630      	mov	r0, r6
 800811e:	9b07      	ldr	r3, [sp, #28]
 8008120:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008122:	1b9b      	subs	r3, r3, r6
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	b008      	add	sp, #32
 8008128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812c:	1c59      	adds	r1, r3, #1
 800812e:	9107      	str	r1, [sp, #28]
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	e7f0      	b.n	8008116 <__cvt+0xa0>

08008134 <__exponent>:
 8008134:	4603      	mov	r3, r0
 8008136:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008138:	2900      	cmp	r1, #0
 800813a:	f803 2b02 	strb.w	r2, [r3], #2
 800813e:	bfb6      	itet	lt
 8008140:	222d      	movlt	r2, #45	; 0x2d
 8008142:	222b      	movge	r2, #43	; 0x2b
 8008144:	4249      	neglt	r1, r1
 8008146:	2909      	cmp	r1, #9
 8008148:	7042      	strb	r2, [r0, #1]
 800814a:	dd2a      	ble.n	80081a2 <__exponent+0x6e>
 800814c:	f10d 0207 	add.w	r2, sp, #7
 8008150:	4617      	mov	r7, r2
 8008152:	260a      	movs	r6, #10
 8008154:	fb91 f5f6 	sdiv	r5, r1, r6
 8008158:	4694      	mov	ip, r2
 800815a:	fb06 1415 	mls	r4, r6, r5, r1
 800815e:	3430      	adds	r4, #48	; 0x30
 8008160:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008164:	460c      	mov	r4, r1
 8008166:	2c63      	cmp	r4, #99	; 0x63
 8008168:	4629      	mov	r1, r5
 800816a:	f102 32ff 	add.w	r2, r2, #4294967295
 800816e:	dcf1      	bgt.n	8008154 <__exponent+0x20>
 8008170:	3130      	adds	r1, #48	; 0x30
 8008172:	f1ac 0402 	sub.w	r4, ip, #2
 8008176:	f802 1c01 	strb.w	r1, [r2, #-1]
 800817a:	4622      	mov	r2, r4
 800817c:	1c41      	adds	r1, r0, #1
 800817e:	42ba      	cmp	r2, r7
 8008180:	d30a      	bcc.n	8008198 <__exponent+0x64>
 8008182:	f10d 0209 	add.w	r2, sp, #9
 8008186:	eba2 020c 	sub.w	r2, r2, ip
 800818a:	42bc      	cmp	r4, r7
 800818c:	bf88      	it	hi
 800818e:	2200      	movhi	r2, #0
 8008190:	4413      	add	r3, r2
 8008192:	1a18      	subs	r0, r3, r0
 8008194:	b003      	add	sp, #12
 8008196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008198:	f812 5b01 	ldrb.w	r5, [r2], #1
 800819c:	f801 5f01 	strb.w	r5, [r1, #1]!
 80081a0:	e7ed      	b.n	800817e <__exponent+0x4a>
 80081a2:	2330      	movs	r3, #48	; 0x30
 80081a4:	3130      	adds	r1, #48	; 0x30
 80081a6:	7083      	strb	r3, [r0, #2]
 80081a8:	70c1      	strb	r1, [r0, #3]
 80081aa:	1d03      	adds	r3, r0, #4
 80081ac:	e7f1      	b.n	8008192 <__exponent+0x5e>
	...

080081b0 <_printf_float>:
 80081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	b091      	sub	sp, #68	; 0x44
 80081b6:	460c      	mov	r4, r1
 80081b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80081bc:	4616      	mov	r6, r2
 80081be:	461f      	mov	r7, r3
 80081c0:	4605      	mov	r5, r0
 80081c2:	f000 ff05 	bl	8008fd0 <_localeconv_r>
 80081c6:	6803      	ldr	r3, [r0, #0]
 80081c8:	4618      	mov	r0, r3
 80081ca:	9309      	str	r3, [sp, #36]	; 0x24
 80081cc:	f7f7 ffc0 	bl	8000150 <strlen>
 80081d0:	2300      	movs	r3, #0
 80081d2:	930e      	str	r3, [sp, #56]	; 0x38
 80081d4:	f8d8 3000 	ldr.w	r3, [r8]
 80081d8:	900a      	str	r0, [sp, #40]	; 0x28
 80081da:	3307      	adds	r3, #7
 80081dc:	f023 0307 	bic.w	r3, r3, #7
 80081e0:	f103 0208 	add.w	r2, r3, #8
 80081e4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80081e8:	f8d4 b000 	ldr.w	fp, [r4]
 80081ec:	f8c8 2000 	str.w	r2, [r8]
 80081f0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80081f4:	4652      	mov	r2, sl
 80081f6:	4643      	mov	r3, r8
 80081f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081fc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008200:	930b      	str	r3, [sp, #44]	; 0x2c
 8008202:	f04f 32ff 	mov.w	r2, #4294967295
 8008206:	4650      	mov	r0, sl
 8008208:	4b9c      	ldr	r3, [pc, #624]	; (800847c <_printf_float+0x2cc>)
 800820a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800820c:	f7f8 fbfe 	bl	8000a0c <__aeabi_dcmpun>
 8008210:	bb70      	cbnz	r0, 8008270 <_printf_float+0xc0>
 8008212:	f04f 32ff 	mov.w	r2, #4294967295
 8008216:	4650      	mov	r0, sl
 8008218:	4b98      	ldr	r3, [pc, #608]	; (800847c <_printf_float+0x2cc>)
 800821a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800821c:	f7f8 fbd8 	bl	80009d0 <__aeabi_dcmple>
 8008220:	bb30      	cbnz	r0, 8008270 <_printf_float+0xc0>
 8008222:	2200      	movs	r2, #0
 8008224:	2300      	movs	r3, #0
 8008226:	4650      	mov	r0, sl
 8008228:	4641      	mov	r1, r8
 800822a:	f7f8 fbc7 	bl	80009bc <__aeabi_dcmplt>
 800822e:	b110      	cbz	r0, 8008236 <_printf_float+0x86>
 8008230:	232d      	movs	r3, #45	; 0x2d
 8008232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008236:	4a92      	ldr	r2, [pc, #584]	; (8008480 <_printf_float+0x2d0>)
 8008238:	4b92      	ldr	r3, [pc, #584]	; (8008484 <_printf_float+0x2d4>)
 800823a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800823e:	bf94      	ite	ls
 8008240:	4690      	movls	r8, r2
 8008242:	4698      	movhi	r8, r3
 8008244:	2303      	movs	r3, #3
 8008246:	f04f 0a00 	mov.w	sl, #0
 800824a:	6123      	str	r3, [r4, #16]
 800824c:	f02b 0304 	bic.w	r3, fp, #4
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	4633      	mov	r3, r6
 8008254:	4621      	mov	r1, r4
 8008256:	4628      	mov	r0, r5
 8008258:	9700      	str	r7, [sp, #0]
 800825a:	aa0f      	add	r2, sp, #60	; 0x3c
 800825c:	f000 f9d6 	bl	800860c <_printf_common>
 8008260:	3001      	adds	r0, #1
 8008262:	f040 8090 	bne.w	8008386 <_printf_float+0x1d6>
 8008266:	f04f 30ff 	mov.w	r0, #4294967295
 800826a:	b011      	add	sp, #68	; 0x44
 800826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008270:	4652      	mov	r2, sl
 8008272:	4643      	mov	r3, r8
 8008274:	4650      	mov	r0, sl
 8008276:	4641      	mov	r1, r8
 8008278:	f7f8 fbc8 	bl	8000a0c <__aeabi_dcmpun>
 800827c:	b148      	cbz	r0, 8008292 <_printf_float+0xe2>
 800827e:	f1b8 0f00 	cmp.w	r8, #0
 8008282:	bfb8      	it	lt
 8008284:	232d      	movlt	r3, #45	; 0x2d
 8008286:	4a80      	ldr	r2, [pc, #512]	; (8008488 <_printf_float+0x2d8>)
 8008288:	bfb8      	it	lt
 800828a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800828e:	4b7f      	ldr	r3, [pc, #508]	; (800848c <_printf_float+0x2dc>)
 8008290:	e7d3      	b.n	800823a <_printf_float+0x8a>
 8008292:	6863      	ldr	r3, [r4, #4]
 8008294:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	d142      	bne.n	8008322 <_printf_float+0x172>
 800829c:	2306      	movs	r3, #6
 800829e:	6063      	str	r3, [r4, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	9206      	str	r2, [sp, #24]
 80082a4:	aa0e      	add	r2, sp, #56	; 0x38
 80082a6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80082aa:	aa0d      	add	r2, sp, #52	; 0x34
 80082ac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80082b0:	9203      	str	r2, [sp, #12]
 80082b2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80082b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80082ba:	6023      	str	r3, [r4, #0]
 80082bc:	6863      	ldr	r3, [r4, #4]
 80082be:	4652      	mov	r2, sl
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	4628      	mov	r0, r5
 80082c4:	4643      	mov	r3, r8
 80082c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80082c8:	f7ff fed5 	bl	8008076 <__cvt>
 80082cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ce:	4680      	mov	r8, r0
 80082d0:	2947      	cmp	r1, #71	; 0x47
 80082d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082d4:	d108      	bne.n	80082e8 <_printf_float+0x138>
 80082d6:	1cc8      	adds	r0, r1, #3
 80082d8:	db02      	blt.n	80082e0 <_printf_float+0x130>
 80082da:	6863      	ldr	r3, [r4, #4]
 80082dc:	4299      	cmp	r1, r3
 80082de:	dd40      	ble.n	8008362 <_printf_float+0x1b2>
 80082e0:	f1a9 0902 	sub.w	r9, r9, #2
 80082e4:	fa5f f989 	uxtb.w	r9, r9
 80082e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082ec:	d81f      	bhi.n	800832e <_printf_float+0x17e>
 80082ee:	464a      	mov	r2, r9
 80082f0:	3901      	subs	r1, #1
 80082f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082f6:	910d      	str	r1, [sp, #52]	; 0x34
 80082f8:	f7ff ff1c 	bl	8008134 <__exponent>
 80082fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082fe:	4682      	mov	sl, r0
 8008300:	1813      	adds	r3, r2, r0
 8008302:	2a01      	cmp	r2, #1
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	dc02      	bgt.n	800830e <_printf_float+0x15e>
 8008308:	6822      	ldr	r2, [r4, #0]
 800830a:	07d2      	lsls	r2, r2, #31
 800830c:	d501      	bpl.n	8008312 <_printf_float+0x162>
 800830e:	3301      	adds	r3, #1
 8008310:	6123      	str	r3, [r4, #16]
 8008312:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008316:	2b00      	cmp	r3, #0
 8008318:	d09b      	beq.n	8008252 <_printf_float+0xa2>
 800831a:	232d      	movs	r3, #45	; 0x2d
 800831c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008320:	e797      	b.n	8008252 <_printf_float+0xa2>
 8008322:	2947      	cmp	r1, #71	; 0x47
 8008324:	d1bc      	bne.n	80082a0 <_printf_float+0xf0>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1ba      	bne.n	80082a0 <_printf_float+0xf0>
 800832a:	2301      	movs	r3, #1
 800832c:	e7b7      	b.n	800829e <_printf_float+0xee>
 800832e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008332:	d118      	bne.n	8008366 <_printf_float+0x1b6>
 8008334:	2900      	cmp	r1, #0
 8008336:	6863      	ldr	r3, [r4, #4]
 8008338:	dd0b      	ble.n	8008352 <_printf_float+0x1a2>
 800833a:	6121      	str	r1, [r4, #16]
 800833c:	b913      	cbnz	r3, 8008344 <_printf_float+0x194>
 800833e:	6822      	ldr	r2, [r4, #0]
 8008340:	07d0      	lsls	r0, r2, #31
 8008342:	d502      	bpl.n	800834a <_printf_float+0x19a>
 8008344:	3301      	adds	r3, #1
 8008346:	440b      	add	r3, r1
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	f04f 0a00 	mov.w	sl, #0
 800834e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008350:	e7df      	b.n	8008312 <_printf_float+0x162>
 8008352:	b913      	cbnz	r3, 800835a <_printf_float+0x1aa>
 8008354:	6822      	ldr	r2, [r4, #0]
 8008356:	07d2      	lsls	r2, r2, #31
 8008358:	d501      	bpl.n	800835e <_printf_float+0x1ae>
 800835a:	3302      	adds	r3, #2
 800835c:	e7f4      	b.n	8008348 <_printf_float+0x198>
 800835e:	2301      	movs	r3, #1
 8008360:	e7f2      	b.n	8008348 <_printf_float+0x198>
 8008362:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008368:	4299      	cmp	r1, r3
 800836a:	db05      	blt.n	8008378 <_printf_float+0x1c8>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	6121      	str	r1, [r4, #16]
 8008370:	07d8      	lsls	r0, r3, #31
 8008372:	d5ea      	bpl.n	800834a <_printf_float+0x19a>
 8008374:	1c4b      	adds	r3, r1, #1
 8008376:	e7e7      	b.n	8008348 <_printf_float+0x198>
 8008378:	2900      	cmp	r1, #0
 800837a:	bfcc      	ite	gt
 800837c:	2201      	movgt	r2, #1
 800837e:	f1c1 0202 	rsble	r2, r1, #2
 8008382:	4413      	add	r3, r2
 8008384:	e7e0      	b.n	8008348 <_printf_float+0x198>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	055a      	lsls	r2, r3, #21
 800838a:	d407      	bmi.n	800839c <_printf_float+0x1ec>
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	4642      	mov	r2, r8
 8008390:	4631      	mov	r1, r6
 8008392:	4628      	mov	r0, r5
 8008394:	47b8      	blx	r7
 8008396:	3001      	adds	r0, #1
 8008398:	d12b      	bne.n	80083f2 <_printf_float+0x242>
 800839a:	e764      	b.n	8008266 <_printf_float+0xb6>
 800839c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80083a0:	f240 80dd 	bls.w	800855e <_printf_float+0x3ae>
 80083a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083a8:	2200      	movs	r2, #0
 80083aa:	2300      	movs	r3, #0
 80083ac:	f7f8 fafc 	bl	80009a8 <__aeabi_dcmpeq>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d033      	beq.n	800841c <_printf_float+0x26c>
 80083b4:	2301      	movs	r3, #1
 80083b6:	4631      	mov	r1, r6
 80083b8:	4628      	mov	r0, r5
 80083ba:	4a35      	ldr	r2, [pc, #212]	; (8008490 <_printf_float+0x2e0>)
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	f43f af51 	beq.w	8008266 <_printf_float+0xb6>
 80083c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083c8:	429a      	cmp	r2, r3
 80083ca:	db02      	blt.n	80083d2 <_printf_float+0x222>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	07d8      	lsls	r0, r3, #31
 80083d0:	d50f      	bpl.n	80083f2 <_printf_float+0x242>
 80083d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083d6:	4631      	mov	r1, r6
 80083d8:	4628      	mov	r0, r5
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	f43f af42 	beq.w	8008266 <_printf_float+0xb6>
 80083e2:	f04f 0800 	mov.w	r8, #0
 80083e6:	f104 091a 	add.w	r9, r4, #26
 80083ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083ec:	3b01      	subs	r3, #1
 80083ee:	4543      	cmp	r3, r8
 80083f0:	dc09      	bgt.n	8008406 <_printf_float+0x256>
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	079b      	lsls	r3, r3, #30
 80083f6:	f100 8104 	bmi.w	8008602 <_printf_float+0x452>
 80083fa:	68e0      	ldr	r0, [r4, #12]
 80083fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083fe:	4298      	cmp	r0, r3
 8008400:	bfb8      	it	lt
 8008402:	4618      	movlt	r0, r3
 8008404:	e731      	b.n	800826a <_printf_float+0xba>
 8008406:	2301      	movs	r3, #1
 8008408:	464a      	mov	r2, r9
 800840a:	4631      	mov	r1, r6
 800840c:	4628      	mov	r0, r5
 800840e:	47b8      	blx	r7
 8008410:	3001      	adds	r0, #1
 8008412:	f43f af28 	beq.w	8008266 <_printf_float+0xb6>
 8008416:	f108 0801 	add.w	r8, r8, #1
 800841a:	e7e6      	b.n	80083ea <_printf_float+0x23a>
 800841c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800841e:	2b00      	cmp	r3, #0
 8008420:	dc38      	bgt.n	8008494 <_printf_float+0x2e4>
 8008422:	2301      	movs	r3, #1
 8008424:	4631      	mov	r1, r6
 8008426:	4628      	mov	r0, r5
 8008428:	4a19      	ldr	r2, [pc, #100]	; (8008490 <_printf_float+0x2e0>)
 800842a:	47b8      	blx	r7
 800842c:	3001      	adds	r0, #1
 800842e:	f43f af1a 	beq.w	8008266 <_printf_float+0xb6>
 8008432:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008436:	4313      	orrs	r3, r2
 8008438:	d102      	bne.n	8008440 <_printf_float+0x290>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	07d9      	lsls	r1, r3, #31
 800843e:	d5d8      	bpl.n	80083f2 <_printf_float+0x242>
 8008440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008444:	4631      	mov	r1, r6
 8008446:	4628      	mov	r0, r5
 8008448:	47b8      	blx	r7
 800844a:	3001      	adds	r0, #1
 800844c:	f43f af0b 	beq.w	8008266 <_printf_float+0xb6>
 8008450:	f04f 0900 	mov.w	r9, #0
 8008454:	f104 0a1a 	add.w	sl, r4, #26
 8008458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800845a:	425b      	negs	r3, r3
 800845c:	454b      	cmp	r3, r9
 800845e:	dc01      	bgt.n	8008464 <_printf_float+0x2b4>
 8008460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008462:	e794      	b.n	800838e <_printf_float+0x1de>
 8008464:	2301      	movs	r3, #1
 8008466:	4652      	mov	r2, sl
 8008468:	4631      	mov	r1, r6
 800846a:	4628      	mov	r0, r5
 800846c:	47b8      	blx	r7
 800846e:	3001      	adds	r0, #1
 8008470:	f43f aef9 	beq.w	8008266 <_printf_float+0xb6>
 8008474:	f109 0901 	add.w	r9, r9, #1
 8008478:	e7ee      	b.n	8008458 <_printf_float+0x2a8>
 800847a:	bf00      	nop
 800847c:	7fefffff 	.word	0x7fefffff
 8008480:	0800c92a 	.word	0x0800c92a
 8008484:	0800c92e 	.word	0x0800c92e
 8008488:	0800c932 	.word	0x0800c932
 800848c:	0800c936 	.word	0x0800c936
 8008490:	0800c93a 	.word	0x0800c93a
 8008494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008496:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008498:	429a      	cmp	r2, r3
 800849a:	bfa8      	it	ge
 800849c:	461a      	movge	r2, r3
 800849e:	2a00      	cmp	r2, #0
 80084a0:	4691      	mov	r9, r2
 80084a2:	dc37      	bgt.n	8008514 <_printf_float+0x364>
 80084a4:	f04f 0b00 	mov.w	fp, #0
 80084a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084ac:	f104 021a 	add.w	r2, r4, #26
 80084b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80084b4:	ebaa 0309 	sub.w	r3, sl, r9
 80084b8:	455b      	cmp	r3, fp
 80084ba:	dc33      	bgt.n	8008524 <_printf_float+0x374>
 80084bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084c0:	429a      	cmp	r2, r3
 80084c2:	db3b      	blt.n	800853c <_printf_float+0x38c>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	07da      	lsls	r2, r3, #31
 80084c8:	d438      	bmi.n	800853c <_printf_float+0x38c>
 80084ca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80084ce:	eba2 0903 	sub.w	r9, r2, r3
 80084d2:	eba2 020a 	sub.w	r2, r2, sl
 80084d6:	4591      	cmp	r9, r2
 80084d8:	bfa8      	it	ge
 80084da:	4691      	movge	r9, r2
 80084dc:	f1b9 0f00 	cmp.w	r9, #0
 80084e0:	dc34      	bgt.n	800854c <_printf_float+0x39c>
 80084e2:	f04f 0800 	mov.w	r8, #0
 80084e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084ea:	f104 0a1a 	add.w	sl, r4, #26
 80084ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084f2:	1a9b      	subs	r3, r3, r2
 80084f4:	eba3 0309 	sub.w	r3, r3, r9
 80084f8:	4543      	cmp	r3, r8
 80084fa:	f77f af7a 	ble.w	80083f2 <_printf_float+0x242>
 80084fe:	2301      	movs	r3, #1
 8008500:	4652      	mov	r2, sl
 8008502:	4631      	mov	r1, r6
 8008504:	4628      	mov	r0, r5
 8008506:	47b8      	blx	r7
 8008508:	3001      	adds	r0, #1
 800850a:	f43f aeac 	beq.w	8008266 <_printf_float+0xb6>
 800850e:	f108 0801 	add.w	r8, r8, #1
 8008512:	e7ec      	b.n	80084ee <_printf_float+0x33e>
 8008514:	4613      	mov	r3, r2
 8008516:	4631      	mov	r1, r6
 8008518:	4642      	mov	r2, r8
 800851a:	4628      	mov	r0, r5
 800851c:	47b8      	blx	r7
 800851e:	3001      	adds	r0, #1
 8008520:	d1c0      	bne.n	80084a4 <_printf_float+0x2f4>
 8008522:	e6a0      	b.n	8008266 <_printf_float+0xb6>
 8008524:	2301      	movs	r3, #1
 8008526:	4631      	mov	r1, r6
 8008528:	4628      	mov	r0, r5
 800852a:	920b      	str	r2, [sp, #44]	; 0x2c
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	f43f ae99 	beq.w	8008266 <_printf_float+0xb6>
 8008534:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008536:	f10b 0b01 	add.w	fp, fp, #1
 800853a:	e7b9      	b.n	80084b0 <_printf_float+0x300>
 800853c:	4631      	mov	r1, r6
 800853e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008542:	4628      	mov	r0, r5
 8008544:	47b8      	blx	r7
 8008546:	3001      	adds	r0, #1
 8008548:	d1bf      	bne.n	80084ca <_printf_float+0x31a>
 800854a:	e68c      	b.n	8008266 <_printf_float+0xb6>
 800854c:	464b      	mov	r3, r9
 800854e:	4631      	mov	r1, r6
 8008550:	4628      	mov	r0, r5
 8008552:	eb08 020a 	add.w	r2, r8, sl
 8008556:	47b8      	blx	r7
 8008558:	3001      	adds	r0, #1
 800855a:	d1c2      	bne.n	80084e2 <_printf_float+0x332>
 800855c:	e683      	b.n	8008266 <_printf_float+0xb6>
 800855e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008560:	2a01      	cmp	r2, #1
 8008562:	dc01      	bgt.n	8008568 <_printf_float+0x3b8>
 8008564:	07db      	lsls	r3, r3, #31
 8008566:	d539      	bpl.n	80085dc <_printf_float+0x42c>
 8008568:	2301      	movs	r3, #1
 800856a:	4642      	mov	r2, r8
 800856c:	4631      	mov	r1, r6
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	f43f ae77 	beq.w	8008266 <_printf_float+0xb6>
 8008578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800857c:	4631      	mov	r1, r6
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f ae6f 	beq.w	8008266 <_printf_float+0xb6>
 8008588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800858c:	2200      	movs	r2, #0
 800858e:	2300      	movs	r3, #0
 8008590:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008594:	f7f8 fa08 	bl	80009a8 <__aeabi_dcmpeq>
 8008598:	b9d8      	cbnz	r0, 80085d2 <_printf_float+0x422>
 800859a:	f109 33ff 	add.w	r3, r9, #4294967295
 800859e:	f108 0201 	add.w	r2, r8, #1
 80085a2:	4631      	mov	r1, r6
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	d10e      	bne.n	80085ca <_printf_float+0x41a>
 80085ac:	e65b      	b.n	8008266 <_printf_float+0xb6>
 80085ae:	2301      	movs	r3, #1
 80085b0:	464a      	mov	r2, r9
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	f43f ae54 	beq.w	8008266 <_printf_float+0xb6>
 80085be:	f108 0801 	add.w	r8, r8, #1
 80085c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085c4:	3b01      	subs	r3, #1
 80085c6:	4543      	cmp	r3, r8
 80085c8:	dcf1      	bgt.n	80085ae <_printf_float+0x3fe>
 80085ca:	4653      	mov	r3, sl
 80085cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085d0:	e6de      	b.n	8008390 <_printf_float+0x1e0>
 80085d2:	f04f 0800 	mov.w	r8, #0
 80085d6:	f104 091a 	add.w	r9, r4, #26
 80085da:	e7f2      	b.n	80085c2 <_printf_float+0x412>
 80085dc:	2301      	movs	r3, #1
 80085de:	4642      	mov	r2, r8
 80085e0:	e7df      	b.n	80085a2 <_printf_float+0x3f2>
 80085e2:	2301      	movs	r3, #1
 80085e4:	464a      	mov	r2, r9
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	f43f ae3a 	beq.w	8008266 <_printf_float+0xb6>
 80085f2:	f108 0801 	add.w	r8, r8, #1
 80085f6:	68e3      	ldr	r3, [r4, #12]
 80085f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80085fa:	1a5b      	subs	r3, r3, r1
 80085fc:	4543      	cmp	r3, r8
 80085fe:	dcf0      	bgt.n	80085e2 <_printf_float+0x432>
 8008600:	e6fb      	b.n	80083fa <_printf_float+0x24a>
 8008602:	f04f 0800 	mov.w	r8, #0
 8008606:	f104 0919 	add.w	r9, r4, #25
 800860a:	e7f4      	b.n	80085f6 <_printf_float+0x446>

0800860c <_printf_common>:
 800860c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008610:	4616      	mov	r6, r2
 8008612:	4699      	mov	r9, r3
 8008614:	688a      	ldr	r2, [r1, #8]
 8008616:	690b      	ldr	r3, [r1, #16]
 8008618:	4607      	mov	r7, r0
 800861a:	4293      	cmp	r3, r2
 800861c:	bfb8      	it	lt
 800861e:	4613      	movlt	r3, r2
 8008620:	6033      	str	r3, [r6, #0]
 8008622:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008626:	460c      	mov	r4, r1
 8008628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800862c:	b10a      	cbz	r2, 8008632 <_printf_common+0x26>
 800862e:	3301      	adds	r3, #1
 8008630:	6033      	str	r3, [r6, #0]
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	0699      	lsls	r1, r3, #26
 8008636:	bf42      	ittt	mi
 8008638:	6833      	ldrmi	r3, [r6, #0]
 800863a:	3302      	addmi	r3, #2
 800863c:	6033      	strmi	r3, [r6, #0]
 800863e:	6825      	ldr	r5, [r4, #0]
 8008640:	f015 0506 	ands.w	r5, r5, #6
 8008644:	d106      	bne.n	8008654 <_printf_common+0x48>
 8008646:	f104 0a19 	add.w	sl, r4, #25
 800864a:	68e3      	ldr	r3, [r4, #12]
 800864c:	6832      	ldr	r2, [r6, #0]
 800864e:	1a9b      	subs	r3, r3, r2
 8008650:	42ab      	cmp	r3, r5
 8008652:	dc2b      	bgt.n	80086ac <_printf_common+0xa0>
 8008654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008658:	1e13      	subs	r3, r2, #0
 800865a:	6822      	ldr	r2, [r4, #0]
 800865c:	bf18      	it	ne
 800865e:	2301      	movne	r3, #1
 8008660:	0692      	lsls	r2, r2, #26
 8008662:	d430      	bmi.n	80086c6 <_printf_common+0xba>
 8008664:	4649      	mov	r1, r9
 8008666:	4638      	mov	r0, r7
 8008668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800866c:	47c0      	blx	r8
 800866e:	3001      	adds	r0, #1
 8008670:	d023      	beq.n	80086ba <_printf_common+0xae>
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	6922      	ldr	r2, [r4, #16]
 8008676:	f003 0306 	and.w	r3, r3, #6
 800867a:	2b04      	cmp	r3, #4
 800867c:	bf14      	ite	ne
 800867e:	2500      	movne	r5, #0
 8008680:	6833      	ldreq	r3, [r6, #0]
 8008682:	f04f 0600 	mov.w	r6, #0
 8008686:	bf08      	it	eq
 8008688:	68e5      	ldreq	r5, [r4, #12]
 800868a:	f104 041a 	add.w	r4, r4, #26
 800868e:	bf08      	it	eq
 8008690:	1aed      	subeq	r5, r5, r3
 8008692:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008696:	bf08      	it	eq
 8008698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800869c:	4293      	cmp	r3, r2
 800869e:	bfc4      	itt	gt
 80086a0:	1a9b      	subgt	r3, r3, r2
 80086a2:	18ed      	addgt	r5, r5, r3
 80086a4:	42b5      	cmp	r5, r6
 80086a6:	d11a      	bne.n	80086de <_printf_common+0xd2>
 80086a8:	2000      	movs	r0, #0
 80086aa:	e008      	b.n	80086be <_printf_common+0xb2>
 80086ac:	2301      	movs	r3, #1
 80086ae:	4652      	mov	r2, sl
 80086b0:	4649      	mov	r1, r9
 80086b2:	4638      	mov	r0, r7
 80086b4:	47c0      	blx	r8
 80086b6:	3001      	adds	r0, #1
 80086b8:	d103      	bne.n	80086c2 <_printf_common+0xb6>
 80086ba:	f04f 30ff 	mov.w	r0, #4294967295
 80086be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c2:	3501      	adds	r5, #1
 80086c4:	e7c1      	b.n	800864a <_printf_common+0x3e>
 80086c6:	2030      	movs	r0, #48	; 0x30
 80086c8:	18e1      	adds	r1, r4, r3
 80086ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086d4:	4422      	add	r2, r4
 80086d6:	3302      	adds	r3, #2
 80086d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086dc:	e7c2      	b.n	8008664 <_printf_common+0x58>
 80086de:	2301      	movs	r3, #1
 80086e0:	4622      	mov	r2, r4
 80086e2:	4649      	mov	r1, r9
 80086e4:	4638      	mov	r0, r7
 80086e6:	47c0      	blx	r8
 80086e8:	3001      	adds	r0, #1
 80086ea:	d0e6      	beq.n	80086ba <_printf_common+0xae>
 80086ec:	3601      	adds	r6, #1
 80086ee:	e7d9      	b.n	80086a4 <_printf_common+0x98>

080086f0 <_printf_i>:
 80086f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	7e0f      	ldrb	r7, [r1, #24]
 80086f6:	4691      	mov	r9, r2
 80086f8:	2f78      	cmp	r7, #120	; 0x78
 80086fa:	4680      	mov	r8, r0
 80086fc:	460c      	mov	r4, r1
 80086fe:	469a      	mov	sl, r3
 8008700:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008702:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008706:	d807      	bhi.n	8008718 <_printf_i+0x28>
 8008708:	2f62      	cmp	r7, #98	; 0x62
 800870a:	d80a      	bhi.n	8008722 <_printf_i+0x32>
 800870c:	2f00      	cmp	r7, #0
 800870e:	f000 80d5 	beq.w	80088bc <_printf_i+0x1cc>
 8008712:	2f58      	cmp	r7, #88	; 0x58
 8008714:	f000 80c1 	beq.w	800889a <_printf_i+0x1aa>
 8008718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800871c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008720:	e03a      	b.n	8008798 <_printf_i+0xa8>
 8008722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008726:	2b15      	cmp	r3, #21
 8008728:	d8f6      	bhi.n	8008718 <_printf_i+0x28>
 800872a:	a101      	add	r1, pc, #4	; (adr r1, 8008730 <_printf_i+0x40>)
 800872c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008730:	08008789 	.word	0x08008789
 8008734:	0800879d 	.word	0x0800879d
 8008738:	08008719 	.word	0x08008719
 800873c:	08008719 	.word	0x08008719
 8008740:	08008719 	.word	0x08008719
 8008744:	08008719 	.word	0x08008719
 8008748:	0800879d 	.word	0x0800879d
 800874c:	08008719 	.word	0x08008719
 8008750:	08008719 	.word	0x08008719
 8008754:	08008719 	.word	0x08008719
 8008758:	08008719 	.word	0x08008719
 800875c:	080088a3 	.word	0x080088a3
 8008760:	080087c9 	.word	0x080087c9
 8008764:	0800885d 	.word	0x0800885d
 8008768:	08008719 	.word	0x08008719
 800876c:	08008719 	.word	0x08008719
 8008770:	080088c5 	.word	0x080088c5
 8008774:	08008719 	.word	0x08008719
 8008778:	080087c9 	.word	0x080087c9
 800877c:	08008719 	.word	0x08008719
 8008780:	08008719 	.word	0x08008719
 8008784:	08008865 	.word	0x08008865
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	1d1a      	adds	r2, r3, #4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	602a      	str	r2, [r5, #0]
 8008790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008798:	2301      	movs	r3, #1
 800879a:	e0a0      	b.n	80088de <_printf_i+0x1ee>
 800879c:	6820      	ldr	r0, [r4, #0]
 800879e:	682b      	ldr	r3, [r5, #0]
 80087a0:	0607      	lsls	r7, r0, #24
 80087a2:	f103 0104 	add.w	r1, r3, #4
 80087a6:	6029      	str	r1, [r5, #0]
 80087a8:	d501      	bpl.n	80087ae <_printf_i+0xbe>
 80087aa:	681e      	ldr	r6, [r3, #0]
 80087ac:	e003      	b.n	80087b6 <_printf_i+0xc6>
 80087ae:	0646      	lsls	r6, r0, #25
 80087b0:	d5fb      	bpl.n	80087aa <_printf_i+0xba>
 80087b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80087b6:	2e00      	cmp	r6, #0
 80087b8:	da03      	bge.n	80087c2 <_printf_i+0xd2>
 80087ba:	232d      	movs	r3, #45	; 0x2d
 80087bc:	4276      	negs	r6, r6
 80087be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c2:	230a      	movs	r3, #10
 80087c4:	4859      	ldr	r0, [pc, #356]	; (800892c <_printf_i+0x23c>)
 80087c6:	e012      	b.n	80087ee <_printf_i+0xfe>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	6820      	ldr	r0, [r4, #0]
 80087cc:	1d19      	adds	r1, r3, #4
 80087ce:	6029      	str	r1, [r5, #0]
 80087d0:	0605      	lsls	r5, r0, #24
 80087d2:	d501      	bpl.n	80087d8 <_printf_i+0xe8>
 80087d4:	681e      	ldr	r6, [r3, #0]
 80087d6:	e002      	b.n	80087de <_printf_i+0xee>
 80087d8:	0641      	lsls	r1, r0, #25
 80087da:	d5fb      	bpl.n	80087d4 <_printf_i+0xe4>
 80087dc:	881e      	ldrh	r6, [r3, #0]
 80087de:	2f6f      	cmp	r7, #111	; 0x6f
 80087e0:	bf0c      	ite	eq
 80087e2:	2308      	moveq	r3, #8
 80087e4:	230a      	movne	r3, #10
 80087e6:	4851      	ldr	r0, [pc, #324]	; (800892c <_printf_i+0x23c>)
 80087e8:	2100      	movs	r1, #0
 80087ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087ee:	6865      	ldr	r5, [r4, #4]
 80087f0:	2d00      	cmp	r5, #0
 80087f2:	bfa8      	it	ge
 80087f4:	6821      	ldrge	r1, [r4, #0]
 80087f6:	60a5      	str	r5, [r4, #8]
 80087f8:	bfa4      	itt	ge
 80087fa:	f021 0104 	bicge.w	r1, r1, #4
 80087fe:	6021      	strge	r1, [r4, #0]
 8008800:	b90e      	cbnz	r6, 8008806 <_printf_i+0x116>
 8008802:	2d00      	cmp	r5, #0
 8008804:	d04b      	beq.n	800889e <_printf_i+0x1ae>
 8008806:	4615      	mov	r5, r2
 8008808:	fbb6 f1f3 	udiv	r1, r6, r3
 800880c:	fb03 6711 	mls	r7, r3, r1, r6
 8008810:	5dc7      	ldrb	r7, [r0, r7]
 8008812:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008816:	4637      	mov	r7, r6
 8008818:	42bb      	cmp	r3, r7
 800881a:	460e      	mov	r6, r1
 800881c:	d9f4      	bls.n	8008808 <_printf_i+0x118>
 800881e:	2b08      	cmp	r3, #8
 8008820:	d10b      	bne.n	800883a <_printf_i+0x14a>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	07de      	lsls	r6, r3, #31
 8008826:	d508      	bpl.n	800883a <_printf_i+0x14a>
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	6861      	ldr	r1, [r4, #4]
 800882c:	4299      	cmp	r1, r3
 800882e:	bfde      	ittt	le
 8008830:	2330      	movle	r3, #48	; 0x30
 8008832:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008836:	f105 35ff 	addle.w	r5, r5, #4294967295
 800883a:	1b52      	subs	r2, r2, r5
 800883c:	6122      	str	r2, [r4, #16]
 800883e:	464b      	mov	r3, r9
 8008840:	4621      	mov	r1, r4
 8008842:	4640      	mov	r0, r8
 8008844:	f8cd a000 	str.w	sl, [sp]
 8008848:	aa03      	add	r2, sp, #12
 800884a:	f7ff fedf 	bl	800860c <_printf_common>
 800884e:	3001      	adds	r0, #1
 8008850:	d14a      	bne.n	80088e8 <_printf_i+0x1f8>
 8008852:	f04f 30ff 	mov.w	r0, #4294967295
 8008856:	b004      	add	sp, #16
 8008858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	f043 0320 	orr.w	r3, r3, #32
 8008862:	6023      	str	r3, [r4, #0]
 8008864:	2778      	movs	r7, #120	; 0x78
 8008866:	4832      	ldr	r0, [pc, #200]	; (8008930 <_printf_i+0x240>)
 8008868:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	6829      	ldr	r1, [r5, #0]
 8008870:	061f      	lsls	r7, r3, #24
 8008872:	f851 6b04 	ldr.w	r6, [r1], #4
 8008876:	d402      	bmi.n	800887e <_printf_i+0x18e>
 8008878:	065f      	lsls	r7, r3, #25
 800887a:	bf48      	it	mi
 800887c:	b2b6      	uxthmi	r6, r6
 800887e:	07df      	lsls	r7, r3, #31
 8008880:	bf48      	it	mi
 8008882:	f043 0320 	orrmi.w	r3, r3, #32
 8008886:	6029      	str	r1, [r5, #0]
 8008888:	bf48      	it	mi
 800888a:	6023      	strmi	r3, [r4, #0]
 800888c:	b91e      	cbnz	r6, 8008896 <_printf_i+0x1a6>
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	f023 0320 	bic.w	r3, r3, #32
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	2310      	movs	r3, #16
 8008898:	e7a6      	b.n	80087e8 <_printf_i+0xf8>
 800889a:	4824      	ldr	r0, [pc, #144]	; (800892c <_printf_i+0x23c>)
 800889c:	e7e4      	b.n	8008868 <_printf_i+0x178>
 800889e:	4615      	mov	r5, r2
 80088a0:	e7bd      	b.n	800881e <_printf_i+0x12e>
 80088a2:	682b      	ldr	r3, [r5, #0]
 80088a4:	6826      	ldr	r6, [r4, #0]
 80088a6:	1d18      	adds	r0, r3, #4
 80088a8:	6961      	ldr	r1, [r4, #20]
 80088aa:	6028      	str	r0, [r5, #0]
 80088ac:	0635      	lsls	r5, r6, #24
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	d501      	bpl.n	80088b6 <_printf_i+0x1c6>
 80088b2:	6019      	str	r1, [r3, #0]
 80088b4:	e002      	b.n	80088bc <_printf_i+0x1cc>
 80088b6:	0670      	lsls	r0, r6, #25
 80088b8:	d5fb      	bpl.n	80088b2 <_printf_i+0x1c2>
 80088ba:	8019      	strh	r1, [r3, #0]
 80088bc:	2300      	movs	r3, #0
 80088be:	4615      	mov	r5, r2
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	e7bc      	b.n	800883e <_printf_i+0x14e>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	2100      	movs	r1, #0
 80088c8:	1d1a      	adds	r2, r3, #4
 80088ca:	602a      	str	r2, [r5, #0]
 80088cc:	681d      	ldr	r5, [r3, #0]
 80088ce:	6862      	ldr	r2, [r4, #4]
 80088d0:	4628      	mov	r0, r5
 80088d2:	f000 fbf4 	bl	80090be <memchr>
 80088d6:	b108      	cbz	r0, 80088dc <_printf_i+0x1ec>
 80088d8:	1b40      	subs	r0, r0, r5
 80088da:	6060      	str	r0, [r4, #4]
 80088dc:	6863      	ldr	r3, [r4, #4]
 80088de:	6123      	str	r3, [r4, #16]
 80088e0:	2300      	movs	r3, #0
 80088e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088e6:	e7aa      	b.n	800883e <_printf_i+0x14e>
 80088e8:	462a      	mov	r2, r5
 80088ea:	4649      	mov	r1, r9
 80088ec:	4640      	mov	r0, r8
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	47d0      	blx	sl
 80088f2:	3001      	adds	r0, #1
 80088f4:	d0ad      	beq.n	8008852 <_printf_i+0x162>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	079b      	lsls	r3, r3, #30
 80088fa:	d413      	bmi.n	8008924 <_printf_i+0x234>
 80088fc:	68e0      	ldr	r0, [r4, #12]
 80088fe:	9b03      	ldr	r3, [sp, #12]
 8008900:	4298      	cmp	r0, r3
 8008902:	bfb8      	it	lt
 8008904:	4618      	movlt	r0, r3
 8008906:	e7a6      	b.n	8008856 <_printf_i+0x166>
 8008908:	2301      	movs	r3, #1
 800890a:	4632      	mov	r2, r6
 800890c:	4649      	mov	r1, r9
 800890e:	4640      	mov	r0, r8
 8008910:	47d0      	blx	sl
 8008912:	3001      	adds	r0, #1
 8008914:	d09d      	beq.n	8008852 <_printf_i+0x162>
 8008916:	3501      	adds	r5, #1
 8008918:	68e3      	ldr	r3, [r4, #12]
 800891a:	9903      	ldr	r1, [sp, #12]
 800891c:	1a5b      	subs	r3, r3, r1
 800891e:	42ab      	cmp	r3, r5
 8008920:	dcf2      	bgt.n	8008908 <_printf_i+0x218>
 8008922:	e7eb      	b.n	80088fc <_printf_i+0x20c>
 8008924:	2500      	movs	r5, #0
 8008926:	f104 0619 	add.w	r6, r4, #25
 800892a:	e7f5      	b.n	8008918 <_printf_i+0x228>
 800892c:	0800c93c 	.word	0x0800c93c
 8008930:	0800c94d 	.word	0x0800c94d

08008934 <_scanf_float>:
 8008934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	b087      	sub	sp, #28
 800893a:	9303      	str	r3, [sp, #12]
 800893c:	688b      	ldr	r3, [r1, #8]
 800893e:	4617      	mov	r7, r2
 8008940:	1e5a      	subs	r2, r3, #1
 8008942:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008946:	bf85      	ittet	hi
 8008948:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800894c:	195b      	addhi	r3, r3, r5
 800894e:	2300      	movls	r3, #0
 8008950:	9302      	strhi	r3, [sp, #8]
 8008952:	bf88      	it	hi
 8008954:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008958:	468b      	mov	fp, r1
 800895a:	f04f 0500 	mov.w	r5, #0
 800895e:	bf8c      	ite	hi
 8008960:	608b      	strhi	r3, [r1, #8]
 8008962:	9302      	strls	r3, [sp, #8]
 8008964:	680b      	ldr	r3, [r1, #0]
 8008966:	4680      	mov	r8, r0
 8008968:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800896c:	f84b 3b1c 	str.w	r3, [fp], #28
 8008970:	460c      	mov	r4, r1
 8008972:	465e      	mov	r6, fp
 8008974:	46aa      	mov	sl, r5
 8008976:	46a9      	mov	r9, r5
 8008978:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800897c:	9501      	str	r5, [sp, #4]
 800897e:	68a2      	ldr	r2, [r4, #8]
 8008980:	b152      	cbz	r2, 8008998 <_scanf_float+0x64>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	2b4e      	cmp	r3, #78	; 0x4e
 8008988:	d864      	bhi.n	8008a54 <_scanf_float+0x120>
 800898a:	2b40      	cmp	r3, #64	; 0x40
 800898c:	d83c      	bhi.n	8008a08 <_scanf_float+0xd4>
 800898e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008992:	b2c8      	uxtb	r0, r1
 8008994:	280e      	cmp	r0, #14
 8008996:	d93a      	bls.n	8008a0e <_scanf_float+0xda>
 8008998:	f1b9 0f00 	cmp.w	r9, #0
 800899c:	d003      	beq.n	80089a6 <_scanf_float+0x72>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089aa:	f1ba 0f01 	cmp.w	sl, #1
 80089ae:	f200 8113 	bhi.w	8008bd8 <_scanf_float+0x2a4>
 80089b2:	455e      	cmp	r6, fp
 80089b4:	f200 8105 	bhi.w	8008bc2 <_scanf_float+0x28e>
 80089b8:	2501      	movs	r5, #1
 80089ba:	4628      	mov	r0, r5
 80089bc:	b007      	add	sp, #28
 80089be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80089c6:	2a0d      	cmp	r2, #13
 80089c8:	d8e6      	bhi.n	8008998 <_scanf_float+0x64>
 80089ca:	a101      	add	r1, pc, #4	; (adr r1, 80089d0 <_scanf_float+0x9c>)
 80089cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80089d0:	08008b0f 	.word	0x08008b0f
 80089d4:	08008999 	.word	0x08008999
 80089d8:	08008999 	.word	0x08008999
 80089dc:	08008999 	.word	0x08008999
 80089e0:	08008b6f 	.word	0x08008b6f
 80089e4:	08008b47 	.word	0x08008b47
 80089e8:	08008999 	.word	0x08008999
 80089ec:	08008999 	.word	0x08008999
 80089f0:	08008b1d 	.word	0x08008b1d
 80089f4:	08008999 	.word	0x08008999
 80089f8:	08008999 	.word	0x08008999
 80089fc:	08008999 	.word	0x08008999
 8008a00:	08008999 	.word	0x08008999
 8008a04:	08008ad5 	.word	0x08008ad5
 8008a08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a0c:	e7db      	b.n	80089c6 <_scanf_float+0x92>
 8008a0e:	290e      	cmp	r1, #14
 8008a10:	d8c2      	bhi.n	8008998 <_scanf_float+0x64>
 8008a12:	a001      	add	r0, pc, #4	; (adr r0, 8008a18 <_scanf_float+0xe4>)
 8008a14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a18:	08008ac7 	.word	0x08008ac7
 8008a1c:	08008999 	.word	0x08008999
 8008a20:	08008ac7 	.word	0x08008ac7
 8008a24:	08008b5b 	.word	0x08008b5b
 8008a28:	08008999 	.word	0x08008999
 8008a2c:	08008a75 	.word	0x08008a75
 8008a30:	08008ab1 	.word	0x08008ab1
 8008a34:	08008ab1 	.word	0x08008ab1
 8008a38:	08008ab1 	.word	0x08008ab1
 8008a3c:	08008ab1 	.word	0x08008ab1
 8008a40:	08008ab1 	.word	0x08008ab1
 8008a44:	08008ab1 	.word	0x08008ab1
 8008a48:	08008ab1 	.word	0x08008ab1
 8008a4c:	08008ab1 	.word	0x08008ab1
 8008a50:	08008ab1 	.word	0x08008ab1
 8008a54:	2b6e      	cmp	r3, #110	; 0x6e
 8008a56:	d809      	bhi.n	8008a6c <_scanf_float+0x138>
 8008a58:	2b60      	cmp	r3, #96	; 0x60
 8008a5a:	d8b2      	bhi.n	80089c2 <_scanf_float+0x8e>
 8008a5c:	2b54      	cmp	r3, #84	; 0x54
 8008a5e:	d077      	beq.n	8008b50 <_scanf_float+0x21c>
 8008a60:	2b59      	cmp	r3, #89	; 0x59
 8008a62:	d199      	bne.n	8008998 <_scanf_float+0x64>
 8008a64:	2d07      	cmp	r5, #7
 8008a66:	d197      	bne.n	8008998 <_scanf_float+0x64>
 8008a68:	2508      	movs	r5, #8
 8008a6a:	e029      	b.n	8008ac0 <_scanf_float+0x18c>
 8008a6c:	2b74      	cmp	r3, #116	; 0x74
 8008a6e:	d06f      	beq.n	8008b50 <_scanf_float+0x21c>
 8008a70:	2b79      	cmp	r3, #121	; 0x79
 8008a72:	e7f6      	b.n	8008a62 <_scanf_float+0x12e>
 8008a74:	6821      	ldr	r1, [r4, #0]
 8008a76:	05c8      	lsls	r0, r1, #23
 8008a78:	d51a      	bpl.n	8008ab0 <_scanf_float+0x17c>
 8008a7a:	9b02      	ldr	r3, [sp, #8]
 8008a7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008a80:	6021      	str	r1, [r4, #0]
 8008a82:	f109 0901 	add.w	r9, r9, #1
 8008a86:	b11b      	cbz	r3, 8008a90 <_scanf_float+0x15c>
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	3201      	adds	r2, #1
 8008a8c:	9302      	str	r3, [sp, #8]
 8008a8e:	60a2      	str	r2, [r4, #8]
 8008a90:	68a3      	ldr	r3, [r4, #8]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	60a3      	str	r3, [r4, #8]
 8008a96:	6923      	ldr	r3, [r4, #16]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	6123      	str	r3, [r4, #16]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	607b      	str	r3, [r7, #4]
 8008aa4:	f340 8084 	ble.w	8008bb0 <_scanf_float+0x27c>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	603b      	str	r3, [r7, #0]
 8008aae:	e766      	b.n	800897e <_scanf_float+0x4a>
 8008ab0:	eb1a 0f05 	cmn.w	sl, r5
 8008ab4:	f47f af70 	bne.w	8008998 <_scanf_float+0x64>
 8008ab8:	6822      	ldr	r2, [r4, #0]
 8008aba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008abe:	6022      	str	r2, [r4, #0]
 8008ac0:	f806 3b01 	strb.w	r3, [r6], #1
 8008ac4:	e7e4      	b.n	8008a90 <_scanf_float+0x15c>
 8008ac6:	6822      	ldr	r2, [r4, #0]
 8008ac8:	0610      	lsls	r0, r2, #24
 8008aca:	f57f af65 	bpl.w	8008998 <_scanf_float+0x64>
 8008ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ad2:	e7f4      	b.n	8008abe <_scanf_float+0x18a>
 8008ad4:	f1ba 0f00 	cmp.w	sl, #0
 8008ad8:	d10e      	bne.n	8008af8 <_scanf_float+0x1c4>
 8008ada:	f1b9 0f00 	cmp.w	r9, #0
 8008ade:	d10e      	bne.n	8008afe <_scanf_float+0x1ca>
 8008ae0:	6822      	ldr	r2, [r4, #0]
 8008ae2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ae6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008aea:	d108      	bne.n	8008afe <_scanf_float+0x1ca>
 8008aec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008af0:	f04f 0a01 	mov.w	sl, #1
 8008af4:	6022      	str	r2, [r4, #0]
 8008af6:	e7e3      	b.n	8008ac0 <_scanf_float+0x18c>
 8008af8:	f1ba 0f02 	cmp.w	sl, #2
 8008afc:	d055      	beq.n	8008baa <_scanf_float+0x276>
 8008afe:	2d01      	cmp	r5, #1
 8008b00:	d002      	beq.n	8008b08 <_scanf_float+0x1d4>
 8008b02:	2d04      	cmp	r5, #4
 8008b04:	f47f af48 	bne.w	8008998 <_scanf_float+0x64>
 8008b08:	3501      	adds	r5, #1
 8008b0a:	b2ed      	uxtb	r5, r5
 8008b0c:	e7d8      	b.n	8008ac0 <_scanf_float+0x18c>
 8008b0e:	f1ba 0f01 	cmp.w	sl, #1
 8008b12:	f47f af41 	bne.w	8008998 <_scanf_float+0x64>
 8008b16:	f04f 0a02 	mov.w	sl, #2
 8008b1a:	e7d1      	b.n	8008ac0 <_scanf_float+0x18c>
 8008b1c:	b97d      	cbnz	r5, 8008b3e <_scanf_float+0x20a>
 8008b1e:	f1b9 0f00 	cmp.w	r9, #0
 8008b22:	f47f af3c 	bne.w	800899e <_scanf_float+0x6a>
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b30:	f47f af39 	bne.w	80089a6 <_scanf_float+0x72>
 8008b34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b38:	2501      	movs	r5, #1
 8008b3a:	6022      	str	r2, [r4, #0]
 8008b3c:	e7c0      	b.n	8008ac0 <_scanf_float+0x18c>
 8008b3e:	2d03      	cmp	r5, #3
 8008b40:	d0e2      	beq.n	8008b08 <_scanf_float+0x1d4>
 8008b42:	2d05      	cmp	r5, #5
 8008b44:	e7de      	b.n	8008b04 <_scanf_float+0x1d0>
 8008b46:	2d02      	cmp	r5, #2
 8008b48:	f47f af26 	bne.w	8008998 <_scanf_float+0x64>
 8008b4c:	2503      	movs	r5, #3
 8008b4e:	e7b7      	b.n	8008ac0 <_scanf_float+0x18c>
 8008b50:	2d06      	cmp	r5, #6
 8008b52:	f47f af21 	bne.w	8008998 <_scanf_float+0x64>
 8008b56:	2507      	movs	r5, #7
 8008b58:	e7b2      	b.n	8008ac0 <_scanf_float+0x18c>
 8008b5a:	6822      	ldr	r2, [r4, #0]
 8008b5c:	0591      	lsls	r1, r2, #22
 8008b5e:	f57f af1b 	bpl.w	8008998 <_scanf_float+0x64>
 8008b62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008b66:	6022      	str	r2, [r4, #0]
 8008b68:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b6c:	e7a8      	b.n	8008ac0 <_scanf_float+0x18c>
 8008b6e:	6822      	ldr	r2, [r4, #0]
 8008b70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008b74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008b78:	d006      	beq.n	8008b88 <_scanf_float+0x254>
 8008b7a:	0550      	lsls	r0, r2, #21
 8008b7c:	f57f af0c 	bpl.w	8008998 <_scanf_float+0x64>
 8008b80:	f1b9 0f00 	cmp.w	r9, #0
 8008b84:	f43f af0f 	beq.w	80089a6 <_scanf_float+0x72>
 8008b88:	0591      	lsls	r1, r2, #22
 8008b8a:	bf58      	it	pl
 8008b8c:	9901      	ldrpl	r1, [sp, #4]
 8008b8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b92:	bf58      	it	pl
 8008b94:	eba9 0101 	subpl.w	r1, r9, r1
 8008b98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008b9c:	f04f 0900 	mov.w	r9, #0
 8008ba0:	bf58      	it	pl
 8008ba2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ba6:	6022      	str	r2, [r4, #0]
 8008ba8:	e78a      	b.n	8008ac0 <_scanf_float+0x18c>
 8008baa:	f04f 0a03 	mov.w	sl, #3
 8008bae:	e787      	b.n	8008ac0 <_scanf_float+0x18c>
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008bb8:	4798      	blx	r3
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	f43f aedf 	beq.w	800897e <_scanf_float+0x4a>
 8008bc0:	e6ea      	b.n	8008998 <_scanf_float+0x64>
 8008bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bc6:	463a      	mov	r2, r7
 8008bc8:	4640      	mov	r0, r8
 8008bca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bce:	4798      	blx	r3
 8008bd0:	6923      	ldr	r3, [r4, #16]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	6123      	str	r3, [r4, #16]
 8008bd6:	e6ec      	b.n	80089b2 <_scanf_float+0x7e>
 8008bd8:	1e6b      	subs	r3, r5, #1
 8008bda:	2b06      	cmp	r3, #6
 8008bdc:	d825      	bhi.n	8008c2a <_scanf_float+0x2f6>
 8008bde:	2d02      	cmp	r5, #2
 8008be0:	d836      	bhi.n	8008c50 <_scanf_float+0x31c>
 8008be2:	455e      	cmp	r6, fp
 8008be4:	f67f aee8 	bls.w	80089b8 <_scanf_float+0x84>
 8008be8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bec:	463a      	mov	r2, r7
 8008bee:	4640      	mov	r0, r8
 8008bf0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bf4:	4798      	blx	r3
 8008bf6:	6923      	ldr	r3, [r4, #16]
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	6123      	str	r3, [r4, #16]
 8008bfc:	e7f1      	b.n	8008be2 <_scanf_float+0x2ae>
 8008bfe:	9802      	ldr	r0, [sp, #8]
 8008c00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c08:	463a      	mov	r2, r7
 8008c0a:	9002      	str	r0, [sp, #8]
 8008c0c:	4640      	mov	r0, r8
 8008c0e:	4798      	blx	r3
 8008c10:	6923      	ldr	r3, [r4, #16]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	6123      	str	r3, [r4, #16]
 8008c16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c1a:	fa5f fa8a 	uxtb.w	sl, sl
 8008c1e:	f1ba 0f02 	cmp.w	sl, #2
 8008c22:	d1ec      	bne.n	8008bfe <_scanf_float+0x2ca>
 8008c24:	3d03      	subs	r5, #3
 8008c26:	b2ed      	uxtb	r5, r5
 8008c28:	1b76      	subs	r6, r6, r5
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	05da      	lsls	r2, r3, #23
 8008c2e:	d52f      	bpl.n	8008c90 <_scanf_float+0x35c>
 8008c30:	055b      	lsls	r3, r3, #21
 8008c32:	d510      	bpl.n	8008c56 <_scanf_float+0x322>
 8008c34:	455e      	cmp	r6, fp
 8008c36:	f67f aebf 	bls.w	80089b8 <_scanf_float+0x84>
 8008c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c3e:	463a      	mov	r2, r7
 8008c40:	4640      	mov	r0, r8
 8008c42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c46:	4798      	blx	r3
 8008c48:	6923      	ldr	r3, [r4, #16]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	6123      	str	r3, [r4, #16]
 8008c4e:	e7f1      	b.n	8008c34 <_scanf_float+0x300>
 8008c50:	46aa      	mov	sl, r5
 8008c52:	9602      	str	r6, [sp, #8]
 8008c54:	e7df      	b.n	8008c16 <_scanf_float+0x2e2>
 8008c56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008c5a:	6923      	ldr	r3, [r4, #16]
 8008c5c:	2965      	cmp	r1, #101	; 0x65
 8008c5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c62:	f106 35ff 	add.w	r5, r6, #4294967295
 8008c66:	6123      	str	r3, [r4, #16]
 8008c68:	d00c      	beq.n	8008c84 <_scanf_float+0x350>
 8008c6a:	2945      	cmp	r1, #69	; 0x45
 8008c6c:	d00a      	beq.n	8008c84 <_scanf_float+0x350>
 8008c6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c72:	463a      	mov	r2, r7
 8008c74:	4640      	mov	r0, r8
 8008c76:	4798      	blx	r3
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	1eb5      	subs	r5, r6, #2
 8008c82:	6123      	str	r3, [r4, #16]
 8008c84:	463a      	mov	r2, r7
 8008c86:	4640      	mov	r0, r8
 8008c88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c8c:	4798      	blx	r3
 8008c8e:	462e      	mov	r6, r5
 8008c90:	6825      	ldr	r5, [r4, #0]
 8008c92:	f015 0510 	ands.w	r5, r5, #16
 8008c96:	d155      	bne.n	8008d44 <_scanf_float+0x410>
 8008c98:	7035      	strb	r5, [r6, #0]
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ca4:	d11d      	bne.n	8008ce2 <_scanf_float+0x3ae>
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	454b      	cmp	r3, r9
 8008caa:	eba3 0209 	sub.w	r2, r3, r9
 8008cae:	d125      	bne.n	8008cfc <_scanf_float+0x3c8>
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	4659      	mov	r1, fp
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	f002 fc43 	bl	800b540 <_strtod_r>
 8008cba:	9b03      	ldr	r3, [sp, #12]
 8008cbc:	f8d4 c000 	ldr.w	ip, [r4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f01c 0f02 	tst.w	ip, #2
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	460f      	mov	r7, r1
 8008cca:	f103 0204 	add.w	r2, r3, #4
 8008cce:	d020      	beq.n	8008d12 <_scanf_float+0x3de>
 8008cd0:	9903      	ldr	r1, [sp, #12]
 8008cd2:	600a      	str	r2, [r1, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	e9c3 6700 	strd	r6, r7, [r3]
 8008cda:	68e3      	ldr	r3, [r4, #12]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	60e3      	str	r3, [r4, #12]
 8008ce0:	e66b      	b.n	80089ba <_scanf_float+0x86>
 8008ce2:	9b04      	ldr	r3, [sp, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d0e3      	beq.n	8008cb0 <_scanf_float+0x37c>
 8008ce8:	9905      	ldr	r1, [sp, #20]
 8008cea:	230a      	movs	r3, #10
 8008cec:	462a      	mov	r2, r5
 8008cee:	4640      	mov	r0, r8
 8008cf0:	3101      	adds	r1, #1
 8008cf2:	f002 fca9 	bl	800b648 <_strtol_r>
 8008cf6:	9b04      	ldr	r3, [sp, #16]
 8008cf8:	9e05      	ldr	r6, [sp, #20]
 8008cfa:	1ac2      	subs	r2, r0, r3
 8008cfc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d00:	429e      	cmp	r6, r3
 8008d02:	bf28      	it	cs
 8008d04:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008d08:	4630      	mov	r0, r6
 8008d0a:	490f      	ldr	r1, [pc, #60]	; (8008d48 <_scanf_float+0x414>)
 8008d0c:	f000 f8f4 	bl	8008ef8 <siprintf>
 8008d10:	e7ce      	b.n	8008cb0 <_scanf_float+0x37c>
 8008d12:	f01c 0f04 	tst.w	ip, #4
 8008d16:	d1db      	bne.n	8008cd0 <_scanf_float+0x39c>
 8008d18:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008d1c:	f8cc 2000 	str.w	r2, [ip]
 8008d20:	f8d3 8000 	ldr.w	r8, [r3]
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	f7f7 fe70 	bl	8000a0c <__aeabi_dcmpun>
 8008d2c:	b128      	cbz	r0, 8008d3a <_scanf_float+0x406>
 8008d2e:	4807      	ldr	r0, [pc, #28]	; (8008d4c <_scanf_float+0x418>)
 8008d30:	f000 f9e2 	bl	80090f8 <nanf>
 8008d34:	f8c8 0000 	str.w	r0, [r8]
 8008d38:	e7cf      	b.n	8008cda <_scanf_float+0x3a6>
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	f7f7 fec3 	bl	8000ac8 <__aeabi_d2f>
 8008d42:	e7f7      	b.n	8008d34 <_scanf_float+0x400>
 8008d44:	2500      	movs	r5, #0
 8008d46:	e638      	b.n	80089ba <_scanf_float+0x86>
 8008d48:	0800c95e 	.word	0x0800c95e
 8008d4c:	0800ccf5 	.word	0x0800ccf5

08008d50 <std>:
 8008d50:	2300      	movs	r3, #0
 8008d52:	b510      	push	{r4, lr}
 8008d54:	4604      	mov	r4, r0
 8008d56:	e9c0 3300 	strd	r3, r3, [r0]
 8008d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d5e:	6083      	str	r3, [r0, #8]
 8008d60:	8181      	strh	r1, [r0, #12]
 8008d62:	6643      	str	r3, [r0, #100]	; 0x64
 8008d64:	81c2      	strh	r2, [r0, #14]
 8008d66:	6183      	str	r3, [r0, #24]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	2208      	movs	r2, #8
 8008d6c:	305c      	adds	r0, #92	; 0x5c
 8008d6e:	f000 f926 	bl	8008fbe <memset>
 8008d72:	4b0d      	ldr	r3, [pc, #52]	; (8008da8 <std+0x58>)
 8008d74:	6224      	str	r4, [r4, #32]
 8008d76:	6263      	str	r3, [r4, #36]	; 0x24
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <std+0x5c>)
 8008d7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d7c:	4b0c      	ldr	r3, [pc, #48]	; (8008db0 <std+0x60>)
 8008d7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d80:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <std+0x64>)
 8008d82:	6323      	str	r3, [r4, #48]	; 0x30
 8008d84:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <std+0x68>)
 8008d86:	429c      	cmp	r4, r3
 8008d88:	d006      	beq.n	8008d98 <std+0x48>
 8008d8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008d8e:	4294      	cmp	r4, r2
 8008d90:	d002      	beq.n	8008d98 <std+0x48>
 8008d92:	33d0      	adds	r3, #208	; 0xd0
 8008d94:	429c      	cmp	r4, r3
 8008d96:	d105      	bne.n	8008da4 <std+0x54>
 8008d98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da0:	f000 b98a 	b.w	80090b8 <__retarget_lock_init_recursive>
 8008da4:	bd10      	pop	{r4, pc}
 8008da6:	bf00      	nop
 8008da8:	08008f39 	.word	0x08008f39
 8008dac:	08008f5b 	.word	0x08008f5b
 8008db0:	08008f93 	.word	0x08008f93
 8008db4:	08008fb7 	.word	0x08008fb7
 8008db8:	20001db8 	.word	0x20001db8

08008dbc <stdio_exit_handler>:
 8008dbc:	4a02      	ldr	r2, [pc, #8]	; (8008dc8 <stdio_exit_handler+0xc>)
 8008dbe:	4903      	ldr	r1, [pc, #12]	; (8008dcc <stdio_exit_handler+0x10>)
 8008dc0:	4803      	ldr	r0, [pc, #12]	; (8008dd0 <stdio_exit_handler+0x14>)
 8008dc2:	f000 b869 	b.w	8008e98 <_fwalk_sglue>
 8008dc6:	bf00      	nop
 8008dc8:	20000010 	.word	0x20000010
 8008dcc:	0800bc85 	.word	0x0800bc85
 8008dd0:	2000001c 	.word	0x2000001c

08008dd4 <cleanup_stdio>:
 8008dd4:	6841      	ldr	r1, [r0, #4]
 8008dd6:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <cleanup_stdio+0x34>)
 8008dd8:	b510      	push	{r4, lr}
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	4604      	mov	r4, r0
 8008dde:	d001      	beq.n	8008de4 <cleanup_stdio+0x10>
 8008de0:	f002 ff50 	bl	800bc84 <_fflush_r>
 8008de4:	68a1      	ldr	r1, [r4, #8]
 8008de6:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <cleanup_stdio+0x38>)
 8008de8:	4299      	cmp	r1, r3
 8008dea:	d002      	beq.n	8008df2 <cleanup_stdio+0x1e>
 8008dec:	4620      	mov	r0, r4
 8008dee:	f002 ff49 	bl	800bc84 <_fflush_r>
 8008df2:	68e1      	ldr	r1, [r4, #12]
 8008df4:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <cleanup_stdio+0x3c>)
 8008df6:	4299      	cmp	r1, r3
 8008df8:	d004      	beq.n	8008e04 <cleanup_stdio+0x30>
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e00:	f002 bf40 	b.w	800bc84 <_fflush_r>
 8008e04:	bd10      	pop	{r4, pc}
 8008e06:	bf00      	nop
 8008e08:	20001db8 	.word	0x20001db8
 8008e0c:	20001e20 	.word	0x20001e20
 8008e10:	20001e88 	.word	0x20001e88

08008e14 <global_stdio_init.part.0>:
 8008e14:	b510      	push	{r4, lr}
 8008e16:	4b0b      	ldr	r3, [pc, #44]	; (8008e44 <global_stdio_init.part.0+0x30>)
 8008e18:	4c0b      	ldr	r4, [pc, #44]	; (8008e48 <global_stdio_init.part.0+0x34>)
 8008e1a:	4a0c      	ldr	r2, [pc, #48]	; (8008e4c <global_stdio_init.part.0+0x38>)
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	2104      	movs	r1, #4
 8008e22:	2200      	movs	r2, #0
 8008e24:	f7ff ff94 	bl	8008d50 <std>
 8008e28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	2109      	movs	r1, #9
 8008e30:	f7ff ff8e 	bl	8008d50 <std>
 8008e34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008e38:	2202      	movs	r2, #2
 8008e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e3e:	2112      	movs	r1, #18
 8008e40:	f7ff bf86 	b.w	8008d50 <std>
 8008e44:	20001ef0 	.word	0x20001ef0
 8008e48:	20001db8 	.word	0x20001db8
 8008e4c:	08008dbd 	.word	0x08008dbd

08008e50 <__sfp_lock_acquire>:
 8008e50:	4801      	ldr	r0, [pc, #4]	; (8008e58 <__sfp_lock_acquire+0x8>)
 8008e52:	f000 b932 	b.w	80090ba <__retarget_lock_acquire_recursive>
 8008e56:	bf00      	nop
 8008e58:	20001ef9 	.word	0x20001ef9

08008e5c <__sfp_lock_release>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	; (8008e64 <__sfp_lock_release+0x8>)
 8008e5e:	f000 b92d 	b.w	80090bc <__retarget_lock_release_recursive>
 8008e62:	bf00      	nop
 8008e64:	20001ef9 	.word	0x20001ef9

08008e68 <__sinit>:
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	f7ff fff0 	bl	8008e50 <__sfp_lock_acquire>
 8008e70:	6a23      	ldr	r3, [r4, #32]
 8008e72:	b11b      	cbz	r3, 8008e7c <__sinit+0x14>
 8008e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e78:	f7ff bff0 	b.w	8008e5c <__sfp_lock_release>
 8008e7c:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <__sinit+0x28>)
 8008e7e:	6223      	str	r3, [r4, #32]
 8008e80:	4b04      	ldr	r3, [pc, #16]	; (8008e94 <__sinit+0x2c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1f5      	bne.n	8008e74 <__sinit+0xc>
 8008e88:	f7ff ffc4 	bl	8008e14 <global_stdio_init.part.0>
 8008e8c:	e7f2      	b.n	8008e74 <__sinit+0xc>
 8008e8e:	bf00      	nop
 8008e90:	08008dd5 	.word	0x08008dd5
 8008e94:	20001ef0 	.word	0x20001ef0

08008e98 <_fwalk_sglue>:
 8008e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e9c:	4607      	mov	r7, r0
 8008e9e:	4688      	mov	r8, r1
 8008ea0:	4614      	mov	r4, r2
 8008ea2:	2600      	movs	r6, #0
 8008ea4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ea8:	f1b9 0901 	subs.w	r9, r9, #1
 8008eac:	d505      	bpl.n	8008eba <_fwalk_sglue+0x22>
 8008eae:	6824      	ldr	r4, [r4, #0]
 8008eb0:	2c00      	cmp	r4, #0
 8008eb2:	d1f7      	bne.n	8008ea4 <_fwalk_sglue+0xc>
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d907      	bls.n	8008ed0 <_fwalk_sglue+0x38>
 8008ec0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	d003      	beq.n	8008ed0 <_fwalk_sglue+0x38>
 8008ec8:	4629      	mov	r1, r5
 8008eca:	4638      	mov	r0, r7
 8008ecc:	47c0      	blx	r8
 8008ece:	4306      	orrs	r6, r0
 8008ed0:	3568      	adds	r5, #104	; 0x68
 8008ed2:	e7e9      	b.n	8008ea8 <_fwalk_sglue+0x10>

08008ed4 <iprintf>:
 8008ed4:	b40f      	push	{r0, r1, r2, r3}
 8008ed6:	b507      	push	{r0, r1, r2, lr}
 8008ed8:	4906      	ldr	r1, [pc, #24]	; (8008ef4 <iprintf+0x20>)
 8008eda:	ab04      	add	r3, sp, #16
 8008edc:	6808      	ldr	r0, [r1, #0]
 8008ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee2:	6881      	ldr	r1, [r0, #8]
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	f002 fd31 	bl	800b94c <_vfiprintf_r>
 8008eea:	b003      	add	sp, #12
 8008eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ef0:	b004      	add	sp, #16
 8008ef2:	4770      	bx	lr
 8008ef4:	20000068 	.word	0x20000068

08008ef8 <siprintf>:
 8008ef8:	b40e      	push	{r1, r2, r3}
 8008efa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008efe:	b500      	push	{lr}
 8008f00:	b09c      	sub	sp, #112	; 0x70
 8008f02:	ab1d      	add	r3, sp, #116	; 0x74
 8008f04:	9002      	str	r0, [sp, #8]
 8008f06:	9006      	str	r0, [sp, #24]
 8008f08:	9107      	str	r1, [sp, #28]
 8008f0a:	9104      	str	r1, [sp, #16]
 8008f0c:	4808      	ldr	r0, [pc, #32]	; (8008f30 <siprintf+0x38>)
 8008f0e:	4909      	ldr	r1, [pc, #36]	; (8008f34 <siprintf+0x3c>)
 8008f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f14:	9105      	str	r1, [sp, #20]
 8008f16:	6800      	ldr	r0, [r0, #0]
 8008f18:	a902      	add	r1, sp, #8
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	f002 fbf0 	bl	800b700 <_svfiprintf_r>
 8008f20:	2200      	movs	r2, #0
 8008f22:	9b02      	ldr	r3, [sp, #8]
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	b01c      	add	sp, #112	; 0x70
 8008f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f2c:	b003      	add	sp, #12
 8008f2e:	4770      	bx	lr
 8008f30:	20000068 	.word	0x20000068
 8008f34:	ffff0208 	.word	0xffff0208

08008f38 <__sread>:
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f40:	f000 f86c 	bl	800901c <_read_r>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	bfab      	itete	ge
 8008f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f4c:	181b      	addge	r3, r3, r0
 8008f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f52:	bfac      	ite	ge
 8008f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f56:	81a3      	strhlt	r3, [r4, #12]
 8008f58:	bd10      	pop	{r4, pc}

08008f5a <__swrite>:
 8008f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5e:	461f      	mov	r7, r3
 8008f60:	898b      	ldrh	r3, [r1, #12]
 8008f62:	4605      	mov	r5, r0
 8008f64:	05db      	lsls	r3, r3, #23
 8008f66:	460c      	mov	r4, r1
 8008f68:	4616      	mov	r6, r2
 8008f6a:	d505      	bpl.n	8008f78 <__swrite+0x1e>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f74:	f000 f840 	bl	8008ff8 <_lseek_r>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	4632      	mov	r2, r6
 8008f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f80:	81a3      	strh	r3, [r4, #12]
 8008f82:	4628      	mov	r0, r5
 8008f84:	463b      	mov	r3, r7
 8008f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8e:	f000 b857 	b.w	8009040 <_write_r>

08008f92 <__sseek>:
 8008f92:	b510      	push	{r4, lr}
 8008f94:	460c      	mov	r4, r1
 8008f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9a:	f000 f82d 	bl	8008ff8 <_lseek_r>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	bf15      	itete	ne
 8008fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fae:	81a3      	strheq	r3, [r4, #12]
 8008fb0:	bf18      	it	ne
 8008fb2:	81a3      	strhne	r3, [r4, #12]
 8008fb4:	bd10      	pop	{r4, pc}

08008fb6 <__sclose>:
 8008fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fba:	f000 b80d 	b.w	8008fd8 <_close_r>

08008fbe <memset>:
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	4402      	add	r2, r0
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d100      	bne.n	8008fc8 <memset+0xa>
 8008fc6:	4770      	bx	lr
 8008fc8:	f803 1b01 	strb.w	r1, [r3], #1
 8008fcc:	e7f9      	b.n	8008fc2 <memset+0x4>
	...

08008fd0 <_localeconv_r>:
 8008fd0:	4800      	ldr	r0, [pc, #0]	; (8008fd4 <_localeconv_r+0x4>)
 8008fd2:	4770      	bx	lr
 8008fd4:	2000015c 	.word	0x2000015c

08008fd8 <_close_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	2300      	movs	r3, #0
 8008fdc:	4d05      	ldr	r5, [pc, #20]	; (8008ff4 <_close_r+0x1c>)
 8008fde:	4604      	mov	r4, r0
 8008fe0:	4608      	mov	r0, r1
 8008fe2:	602b      	str	r3, [r5, #0]
 8008fe4:	f7f8 fc64 	bl	80018b0 <_close>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d102      	bne.n	8008ff2 <_close_r+0x1a>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	b103      	cbz	r3, 8008ff2 <_close_r+0x1a>
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	20001ef4 	.word	0x20001ef4

08008ff8 <_lseek_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	4608      	mov	r0, r1
 8008ffe:	4611      	mov	r1, r2
 8009000:	2200      	movs	r2, #0
 8009002:	4d05      	ldr	r5, [pc, #20]	; (8009018 <_lseek_r+0x20>)
 8009004:	602a      	str	r2, [r5, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	f7f8 fc76 	bl	80018f8 <_lseek>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d102      	bne.n	8009016 <_lseek_r+0x1e>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	b103      	cbz	r3, 8009016 <_lseek_r+0x1e>
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	20001ef4 	.word	0x20001ef4

0800901c <_read_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4604      	mov	r4, r0
 8009020:	4608      	mov	r0, r1
 8009022:	4611      	mov	r1, r2
 8009024:	2200      	movs	r2, #0
 8009026:	4d05      	ldr	r5, [pc, #20]	; (800903c <_read_r+0x20>)
 8009028:	602a      	str	r2, [r5, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	f7f8 fc23 	bl	8001876 <_read>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_read_r+0x1e>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_read_r+0x1e>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	20001ef4 	.word	0x20001ef4

08009040 <_write_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	4611      	mov	r1, r2
 8009048:	2200      	movs	r2, #0
 800904a:	4d05      	ldr	r5, [pc, #20]	; (8009060 <_write_r+0x20>)
 800904c:	602a      	str	r2, [r5, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	f7f8 ff54 	bl	8001efc <_write>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d102      	bne.n	800905e <_write_r+0x1e>
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	b103      	cbz	r3, 800905e <_write_r+0x1e>
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	20001ef4 	.word	0x20001ef4

08009064 <__errno>:
 8009064:	4b01      	ldr	r3, [pc, #4]	; (800906c <__errno+0x8>)
 8009066:	6818      	ldr	r0, [r3, #0]
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	20000068 	.word	0x20000068

08009070 <__libc_init_array>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	2600      	movs	r6, #0
 8009074:	4d0c      	ldr	r5, [pc, #48]	; (80090a8 <__libc_init_array+0x38>)
 8009076:	4c0d      	ldr	r4, [pc, #52]	; (80090ac <__libc_init_array+0x3c>)
 8009078:	1b64      	subs	r4, r4, r5
 800907a:	10a4      	asrs	r4, r4, #2
 800907c:	42a6      	cmp	r6, r4
 800907e:	d109      	bne.n	8009094 <__libc_init_array+0x24>
 8009080:	f003 fbc4 	bl	800c80c <_init>
 8009084:	2600      	movs	r6, #0
 8009086:	4d0a      	ldr	r5, [pc, #40]	; (80090b0 <__libc_init_array+0x40>)
 8009088:	4c0a      	ldr	r4, [pc, #40]	; (80090b4 <__libc_init_array+0x44>)
 800908a:	1b64      	subs	r4, r4, r5
 800908c:	10a4      	asrs	r4, r4, #2
 800908e:	42a6      	cmp	r6, r4
 8009090:	d105      	bne.n	800909e <__libc_init_array+0x2e>
 8009092:	bd70      	pop	{r4, r5, r6, pc}
 8009094:	f855 3b04 	ldr.w	r3, [r5], #4
 8009098:	4798      	blx	r3
 800909a:	3601      	adds	r6, #1
 800909c:	e7ee      	b.n	800907c <__libc_init_array+0xc>
 800909e:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a2:	4798      	blx	r3
 80090a4:	3601      	adds	r6, #1
 80090a6:	e7f2      	b.n	800908e <__libc_init_array+0x1e>
 80090a8:	0800cd58 	.word	0x0800cd58
 80090ac:	0800cd58 	.word	0x0800cd58
 80090b0:	0800cd58 	.word	0x0800cd58
 80090b4:	0800cd5c 	.word	0x0800cd5c

080090b8 <__retarget_lock_init_recursive>:
 80090b8:	4770      	bx	lr

080090ba <__retarget_lock_acquire_recursive>:
 80090ba:	4770      	bx	lr

080090bc <__retarget_lock_release_recursive>:
 80090bc:	4770      	bx	lr

080090be <memchr>:
 80090be:	4603      	mov	r3, r0
 80090c0:	b510      	push	{r4, lr}
 80090c2:	b2c9      	uxtb	r1, r1
 80090c4:	4402      	add	r2, r0
 80090c6:	4293      	cmp	r3, r2
 80090c8:	4618      	mov	r0, r3
 80090ca:	d101      	bne.n	80090d0 <memchr+0x12>
 80090cc:	2000      	movs	r0, #0
 80090ce:	e003      	b.n	80090d8 <memchr+0x1a>
 80090d0:	7804      	ldrb	r4, [r0, #0]
 80090d2:	3301      	adds	r3, #1
 80090d4:	428c      	cmp	r4, r1
 80090d6:	d1f6      	bne.n	80090c6 <memchr+0x8>
 80090d8:	bd10      	pop	{r4, pc}

080090da <memcpy>:
 80090da:	440a      	add	r2, r1
 80090dc:	4291      	cmp	r1, r2
 80090de:	f100 33ff 	add.w	r3, r0, #4294967295
 80090e2:	d100      	bne.n	80090e6 <memcpy+0xc>
 80090e4:	4770      	bx	lr
 80090e6:	b510      	push	{r4, lr}
 80090e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ec:	4291      	cmp	r1, r2
 80090ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090f2:	d1f9      	bne.n	80090e8 <memcpy+0xe>
 80090f4:	bd10      	pop	{r4, pc}
	...

080090f8 <nanf>:
 80090f8:	4800      	ldr	r0, [pc, #0]	; (80090fc <nanf+0x4>)
 80090fa:	4770      	bx	lr
 80090fc:	7fc00000 	.word	0x7fc00000

08009100 <quorem>:
 8009100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	6903      	ldr	r3, [r0, #16]
 8009106:	690c      	ldr	r4, [r1, #16]
 8009108:	4607      	mov	r7, r0
 800910a:	42a3      	cmp	r3, r4
 800910c:	db7f      	blt.n	800920e <quorem+0x10e>
 800910e:	3c01      	subs	r4, #1
 8009110:	f100 0514 	add.w	r5, r0, #20
 8009114:	f101 0814 	add.w	r8, r1, #20
 8009118:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009122:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009126:	3301      	adds	r3, #1
 8009128:	429a      	cmp	r2, r3
 800912a:	fbb2 f6f3 	udiv	r6, r2, r3
 800912e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009132:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009136:	d331      	bcc.n	800919c <quorem+0x9c>
 8009138:	f04f 0e00 	mov.w	lr, #0
 800913c:	4640      	mov	r0, r8
 800913e:	46ac      	mov	ip, r5
 8009140:	46f2      	mov	sl, lr
 8009142:	f850 2b04 	ldr.w	r2, [r0], #4
 8009146:	b293      	uxth	r3, r2
 8009148:	fb06 e303 	mla	r3, r6, r3, lr
 800914c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009150:	0c1a      	lsrs	r2, r3, #16
 8009152:	b29b      	uxth	r3, r3
 8009154:	fb06 220e 	mla	r2, r6, lr, r2
 8009158:	ebaa 0303 	sub.w	r3, sl, r3
 800915c:	f8dc a000 	ldr.w	sl, [ip]
 8009160:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009164:	fa1f fa8a 	uxth.w	sl, sl
 8009168:	4453      	add	r3, sl
 800916a:	f8dc a000 	ldr.w	sl, [ip]
 800916e:	b292      	uxth	r2, r2
 8009170:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009178:	b29b      	uxth	r3, r3
 800917a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800917e:	4581      	cmp	r9, r0
 8009180:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009184:	f84c 3b04 	str.w	r3, [ip], #4
 8009188:	d2db      	bcs.n	8009142 <quorem+0x42>
 800918a:	f855 300b 	ldr.w	r3, [r5, fp]
 800918e:	b92b      	cbnz	r3, 800919c <quorem+0x9c>
 8009190:	9b01      	ldr	r3, [sp, #4]
 8009192:	3b04      	subs	r3, #4
 8009194:	429d      	cmp	r5, r3
 8009196:	461a      	mov	r2, r3
 8009198:	d32d      	bcc.n	80091f6 <quorem+0xf6>
 800919a:	613c      	str	r4, [r7, #16]
 800919c:	4638      	mov	r0, r7
 800919e:	f001 f9df 	bl	800a560 <__mcmp>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	db23      	blt.n	80091ee <quorem+0xee>
 80091a6:	4629      	mov	r1, r5
 80091a8:	2000      	movs	r0, #0
 80091aa:	3601      	adds	r6, #1
 80091ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80091b0:	f8d1 c000 	ldr.w	ip, [r1]
 80091b4:	b293      	uxth	r3, r2
 80091b6:	1ac3      	subs	r3, r0, r3
 80091b8:	0c12      	lsrs	r2, r2, #16
 80091ba:	fa1f f08c 	uxth.w	r0, ip
 80091be:	4403      	add	r3, r0
 80091c0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80091c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091ce:	45c1      	cmp	r9, r8
 80091d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80091d4:	f841 3b04 	str.w	r3, [r1], #4
 80091d8:	d2e8      	bcs.n	80091ac <quorem+0xac>
 80091da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091e2:	b922      	cbnz	r2, 80091ee <quorem+0xee>
 80091e4:	3b04      	subs	r3, #4
 80091e6:	429d      	cmp	r5, r3
 80091e8:	461a      	mov	r2, r3
 80091ea:	d30a      	bcc.n	8009202 <quorem+0x102>
 80091ec:	613c      	str	r4, [r7, #16]
 80091ee:	4630      	mov	r0, r6
 80091f0:	b003      	add	sp, #12
 80091f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f6:	6812      	ldr	r2, [r2, #0]
 80091f8:	3b04      	subs	r3, #4
 80091fa:	2a00      	cmp	r2, #0
 80091fc:	d1cd      	bne.n	800919a <quorem+0x9a>
 80091fe:	3c01      	subs	r4, #1
 8009200:	e7c8      	b.n	8009194 <quorem+0x94>
 8009202:	6812      	ldr	r2, [r2, #0]
 8009204:	3b04      	subs	r3, #4
 8009206:	2a00      	cmp	r2, #0
 8009208:	d1f0      	bne.n	80091ec <quorem+0xec>
 800920a:	3c01      	subs	r4, #1
 800920c:	e7eb      	b.n	80091e6 <quorem+0xe6>
 800920e:	2000      	movs	r0, #0
 8009210:	e7ee      	b.n	80091f0 <quorem+0xf0>
 8009212:	0000      	movs	r0, r0
 8009214:	0000      	movs	r0, r0
	...

08009218 <_dtoa_r>:
 8009218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	4616      	mov	r6, r2
 800921e:	461f      	mov	r7, r3
 8009220:	69c4      	ldr	r4, [r0, #28]
 8009222:	b099      	sub	sp, #100	; 0x64
 8009224:	4605      	mov	r5, r0
 8009226:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800922a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800922e:	b974      	cbnz	r4, 800924e <_dtoa_r+0x36>
 8009230:	2010      	movs	r0, #16
 8009232:	f000 fe1d 	bl	8009e70 <malloc>
 8009236:	4602      	mov	r2, r0
 8009238:	61e8      	str	r0, [r5, #28]
 800923a:	b920      	cbnz	r0, 8009246 <_dtoa_r+0x2e>
 800923c:	21ef      	movs	r1, #239	; 0xef
 800923e:	4bac      	ldr	r3, [pc, #688]	; (80094f0 <_dtoa_r+0x2d8>)
 8009240:	48ac      	ldr	r0, [pc, #688]	; (80094f4 <_dtoa_r+0x2dc>)
 8009242:	f002 fe1f 	bl	800be84 <__assert_func>
 8009246:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800924a:	6004      	str	r4, [r0, #0]
 800924c:	60c4      	str	r4, [r0, #12]
 800924e:	69eb      	ldr	r3, [r5, #28]
 8009250:	6819      	ldr	r1, [r3, #0]
 8009252:	b151      	cbz	r1, 800926a <_dtoa_r+0x52>
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	2301      	movs	r3, #1
 8009258:	4093      	lsls	r3, r2
 800925a:	604a      	str	r2, [r1, #4]
 800925c:	608b      	str	r3, [r1, #8]
 800925e:	4628      	mov	r0, r5
 8009260:	f000 fefa 	bl	800a058 <_Bfree>
 8009264:	2200      	movs	r2, #0
 8009266:	69eb      	ldr	r3, [r5, #28]
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	1e3b      	subs	r3, r7, #0
 800926c:	bfaf      	iteee	ge
 800926e:	2300      	movge	r3, #0
 8009270:	2201      	movlt	r2, #1
 8009272:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009276:	9305      	strlt	r3, [sp, #20]
 8009278:	bfa8      	it	ge
 800927a:	f8c8 3000 	strge.w	r3, [r8]
 800927e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009282:	4b9d      	ldr	r3, [pc, #628]	; (80094f8 <_dtoa_r+0x2e0>)
 8009284:	bfb8      	it	lt
 8009286:	f8c8 2000 	strlt.w	r2, [r8]
 800928a:	ea33 0309 	bics.w	r3, r3, r9
 800928e:	d119      	bne.n	80092c4 <_dtoa_r+0xac>
 8009290:	f242 730f 	movw	r3, #9999	; 0x270f
 8009294:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800929c:	4333      	orrs	r3, r6
 800929e:	f000 8589 	beq.w	8009db4 <_dtoa_r+0xb9c>
 80092a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092a4:	b953      	cbnz	r3, 80092bc <_dtoa_r+0xa4>
 80092a6:	4b95      	ldr	r3, [pc, #596]	; (80094fc <_dtoa_r+0x2e4>)
 80092a8:	e023      	b.n	80092f2 <_dtoa_r+0xda>
 80092aa:	4b95      	ldr	r3, [pc, #596]	; (8009500 <_dtoa_r+0x2e8>)
 80092ac:	9303      	str	r3, [sp, #12]
 80092ae:	3308      	adds	r3, #8
 80092b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	9803      	ldr	r0, [sp, #12]
 80092b6:	b019      	add	sp, #100	; 0x64
 80092b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092bc:	4b8f      	ldr	r3, [pc, #572]	; (80094fc <_dtoa_r+0x2e4>)
 80092be:	9303      	str	r3, [sp, #12]
 80092c0:	3303      	adds	r3, #3
 80092c2:	e7f5      	b.n	80092b0 <_dtoa_r+0x98>
 80092c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80092c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80092cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092d0:	2200      	movs	r2, #0
 80092d2:	2300      	movs	r3, #0
 80092d4:	f7f7 fb68 	bl	80009a8 <__aeabi_dcmpeq>
 80092d8:	4680      	mov	r8, r0
 80092da:	b160      	cbz	r0, 80092f6 <_dtoa_r+0xde>
 80092dc:	2301      	movs	r3, #1
 80092de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80092e0:	6013      	str	r3, [r2, #0]
 80092e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 8562 	beq.w	8009dae <_dtoa_r+0xb96>
 80092ea:	4b86      	ldr	r3, [pc, #536]	; (8009504 <_dtoa_r+0x2ec>)
 80092ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	3b01      	subs	r3, #1
 80092f2:	9303      	str	r3, [sp, #12]
 80092f4:	e7de      	b.n	80092b4 <_dtoa_r+0x9c>
 80092f6:	ab16      	add	r3, sp, #88	; 0x58
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	ab17      	add	r3, sp, #92	; 0x5c
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	4628      	mov	r0, r5
 8009300:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009304:	f001 fa3c 	bl	800a780 <__d2b>
 8009308:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800930c:	4682      	mov	sl, r0
 800930e:	2c00      	cmp	r4, #0
 8009310:	d07e      	beq.n	8009410 <_dtoa_r+0x1f8>
 8009312:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009318:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800931c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009320:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009324:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009328:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800932c:	4619      	mov	r1, r3
 800932e:	2200      	movs	r2, #0
 8009330:	4b75      	ldr	r3, [pc, #468]	; (8009508 <_dtoa_r+0x2f0>)
 8009332:	f7f6 ff19 	bl	8000168 <__aeabi_dsub>
 8009336:	a368      	add	r3, pc, #416	; (adr r3, 80094d8 <_dtoa_r+0x2c0>)
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f7f7 f8cc 	bl	80004d8 <__aeabi_dmul>
 8009340:	a367      	add	r3, pc, #412	; (adr r3, 80094e0 <_dtoa_r+0x2c8>)
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	f7f6 ff11 	bl	800016c <__adddf3>
 800934a:	4606      	mov	r6, r0
 800934c:	4620      	mov	r0, r4
 800934e:	460f      	mov	r7, r1
 8009350:	f7f7 f858 	bl	8000404 <__aeabi_i2d>
 8009354:	a364      	add	r3, pc, #400	; (adr r3, 80094e8 <_dtoa_r+0x2d0>)
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	f7f7 f8bd 	bl	80004d8 <__aeabi_dmul>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4630      	mov	r0, r6
 8009364:	4639      	mov	r1, r7
 8009366:	f7f6 ff01 	bl	800016c <__adddf3>
 800936a:	4606      	mov	r6, r0
 800936c:	460f      	mov	r7, r1
 800936e:	f7f7 fb63 	bl	8000a38 <__aeabi_d2iz>
 8009372:	2200      	movs	r2, #0
 8009374:	4683      	mov	fp, r0
 8009376:	2300      	movs	r3, #0
 8009378:	4630      	mov	r0, r6
 800937a:	4639      	mov	r1, r7
 800937c:	f7f7 fb1e 	bl	80009bc <__aeabi_dcmplt>
 8009380:	b148      	cbz	r0, 8009396 <_dtoa_r+0x17e>
 8009382:	4658      	mov	r0, fp
 8009384:	f7f7 f83e 	bl	8000404 <__aeabi_i2d>
 8009388:	4632      	mov	r2, r6
 800938a:	463b      	mov	r3, r7
 800938c:	f7f7 fb0c 	bl	80009a8 <__aeabi_dcmpeq>
 8009390:	b908      	cbnz	r0, 8009396 <_dtoa_r+0x17e>
 8009392:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009396:	f1bb 0f16 	cmp.w	fp, #22
 800939a:	d857      	bhi.n	800944c <_dtoa_r+0x234>
 800939c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093a0:	4b5a      	ldr	r3, [pc, #360]	; (800950c <_dtoa_r+0x2f4>)
 80093a2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	f7f7 fb07 	bl	80009bc <__aeabi_dcmplt>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d04e      	beq.n	8009450 <_dtoa_r+0x238>
 80093b2:	2300      	movs	r3, #0
 80093b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80093ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80093bc:	1b1b      	subs	r3, r3, r4
 80093be:	1e5a      	subs	r2, r3, #1
 80093c0:	bf46      	itte	mi
 80093c2:	f1c3 0901 	rsbmi	r9, r3, #1
 80093c6:	2300      	movmi	r3, #0
 80093c8:	f04f 0900 	movpl.w	r9, #0
 80093cc:	9209      	str	r2, [sp, #36]	; 0x24
 80093ce:	bf48      	it	mi
 80093d0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80093d2:	f1bb 0f00 	cmp.w	fp, #0
 80093d6:	db3d      	blt.n	8009454 <_dtoa_r+0x23c>
 80093d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093da:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80093de:	445b      	add	r3, fp
 80093e0:	9309      	str	r3, [sp, #36]	; 0x24
 80093e2:	2300      	movs	r3, #0
 80093e4:	930a      	str	r3, [sp, #40]	; 0x28
 80093e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093e8:	2b09      	cmp	r3, #9
 80093ea:	d867      	bhi.n	80094bc <_dtoa_r+0x2a4>
 80093ec:	2b05      	cmp	r3, #5
 80093ee:	bfc4      	itt	gt
 80093f0:	3b04      	subgt	r3, #4
 80093f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80093f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093f6:	bfc8      	it	gt
 80093f8:	2400      	movgt	r4, #0
 80093fa:	f1a3 0302 	sub.w	r3, r3, #2
 80093fe:	bfd8      	it	le
 8009400:	2401      	movle	r4, #1
 8009402:	2b03      	cmp	r3, #3
 8009404:	f200 8086 	bhi.w	8009514 <_dtoa_r+0x2fc>
 8009408:	e8df f003 	tbb	[pc, r3]
 800940c:	5637392c 	.word	0x5637392c
 8009410:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009414:	441c      	add	r4, r3
 8009416:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800941a:	2b20      	cmp	r3, #32
 800941c:	bfc1      	itttt	gt
 800941e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009422:	fa09 f903 	lslgt.w	r9, r9, r3
 8009426:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800942a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800942e:	bfd6      	itet	le
 8009430:	f1c3 0320 	rsble	r3, r3, #32
 8009434:	ea49 0003 	orrgt.w	r0, r9, r3
 8009438:	fa06 f003 	lslle.w	r0, r6, r3
 800943c:	f7f6 ffd2 	bl	80003e4 <__aeabi_ui2d>
 8009440:	2201      	movs	r2, #1
 8009442:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009446:	3c01      	subs	r4, #1
 8009448:	9213      	str	r2, [sp, #76]	; 0x4c
 800944a:	e76f      	b.n	800932c <_dtoa_r+0x114>
 800944c:	2301      	movs	r3, #1
 800944e:	e7b3      	b.n	80093b8 <_dtoa_r+0x1a0>
 8009450:	900f      	str	r0, [sp, #60]	; 0x3c
 8009452:	e7b2      	b.n	80093ba <_dtoa_r+0x1a2>
 8009454:	f1cb 0300 	rsb	r3, fp, #0
 8009458:	930a      	str	r3, [sp, #40]	; 0x28
 800945a:	2300      	movs	r3, #0
 800945c:	eba9 090b 	sub.w	r9, r9, fp
 8009460:	930e      	str	r3, [sp, #56]	; 0x38
 8009462:	e7c0      	b.n	80093e6 <_dtoa_r+0x1ce>
 8009464:	2300      	movs	r3, #0
 8009466:	930b      	str	r3, [sp, #44]	; 0x2c
 8009468:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800946a:	2b00      	cmp	r3, #0
 800946c:	dc55      	bgt.n	800951a <_dtoa_r+0x302>
 800946e:	2301      	movs	r3, #1
 8009470:	461a      	mov	r2, r3
 8009472:	9306      	str	r3, [sp, #24]
 8009474:	9308      	str	r3, [sp, #32]
 8009476:	9223      	str	r2, [sp, #140]	; 0x8c
 8009478:	e00b      	b.n	8009492 <_dtoa_r+0x27a>
 800947a:	2301      	movs	r3, #1
 800947c:	e7f3      	b.n	8009466 <_dtoa_r+0x24e>
 800947e:	2300      	movs	r3, #0
 8009480:	930b      	str	r3, [sp, #44]	; 0x2c
 8009482:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009484:	445b      	add	r3, fp
 8009486:	9306      	str	r3, [sp, #24]
 8009488:	3301      	adds	r3, #1
 800948a:	2b01      	cmp	r3, #1
 800948c:	9308      	str	r3, [sp, #32]
 800948e:	bfb8      	it	lt
 8009490:	2301      	movlt	r3, #1
 8009492:	2100      	movs	r1, #0
 8009494:	2204      	movs	r2, #4
 8009496:	69e8      	ldr	r0, [r5, #28]
 8009498:	f102 0614 	add.w	r6, r2, #20
 800949c:	429e      	cmp	r6, r3
 800949e:	d940      	bls.n	8009522 <_dtoa_r+0x30a>
 80094a0:	6041      	str	r1, [r0, #4]
 80094a2:	4628      	mov	r0, r5
 80094a4:	f000 fd98 	bl	8009fd8 <_Balloc>
 80094a8:	9003      	str	r0, [sp, #12]
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d13c      	bne.n	8009528 <_dtoa_r+0x310>
 80094ae:	4602      	mov	r2, r0
 80094b0:	f240 11af 	movw	r1, #431	; 0x1af
 80094b4:	4b16      	ldr	r3, [pc, #88]	; (8009510 <_dtoa_r+0x2f8>)
 80094b6:	e6c3      	b.n	8009240 <_dtoa_r+0x28>
 80094b8:	2301      	movs	r3, #1
 80094ba:	e7e1      	b.n	8009480 <_dtoa_r+0x268>
 80094bc:	2401      	movs	r4, #1
 80094be:	2300      	movs	r3, #0
 80094c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80094c2:	9322      	str	r3, [sp, #136]	; 0x88
 80094c4:	f04f 33ff 	mov.w	r3, #4294967295
 80094c8:	2200      	movs	r2, #0
 80094ca:	9306      	str	r3, [sp, #24]
 80094cc:	9308      	str	r3, [sp, #32]
 80094ce:	2312      	movs	r3, #18
 80094d0:	e7d1      	b.n	8009476 <_dtoa_r+0x25e>
 80094d2:	bf00      	nop
 80094d4:	f3af 8000 	nop.w
 80094d8:	636f4361 	.word	0x636f4361
 80094dc:	3fd287a7 	.word	0x3fd287a7
 80094e0:	8b60c8b3 	.word	0x8b60c8b3
 80094e4:	3fc68a28 	.word	0x3fc68a28
 80094e8:	509f79fb 	.word	0x509f79fb
 80094ec:	3fd34413 	.word	0x3fd34413
 80094f0:	0800c970 	.word	0x0800c970
 80094f4:	0800c987 	.word	0x0800c987
 80094f8:	7ff00000 	.word	0x7ff00000
 80094fc:	0800c96c 	.word	0x0800c96c
 8009500:	0800c963 	.word	0x0800c963
 8009504:	0800c93b 	.word	0x0800c93b
 8009508:	3ff80000 	.word	0x3ff80000
 800950c:	0800ca78 	.word	0x0800ca78
 8009510:	0800c9df 	.word	0x0800c9df
 8009514:	2301      	movs	r3, #1
 8009516:	930b      	str	r3, [sp, #44]	; 0x2c
 8009518:	e7d4      	b.n	80094c4 <_dtoa_r+0x2ac>
 800951a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800951c:	9306      	str	r3, [sp, #24]
 800951e:	9308      	str	r3, [sp, #32]
 8009520:	e7b7      	b.n	8009492 <_dtoa_r+0x27a>
 8009522:	3101      	adds	r1, #1
 8009524:	0052      	lsls	r2, r2, #1
 8009526:	e7b7      	b.n	8009498 <_dtoa_r+0x280>
 8009528:	69eb      	ldr	r3, [r5, #28]
 800952a:	9a03      	ldr	r2, [sp, #12]
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	9b08      	ldr	r3, [sp, #32]
 8009530:	2b0e      	cmp	r3, #14
 8009532:	f200 80a8 	bhi.w	8009686 <_dtoa_r+0x46e>
 8009536:	2c00      	cmp	r4, #0
 8009538:	f000 80a5 	beq.w	8009686 <_dtoa_r+0x46e>
 800953c:	f1bb 0f00 	cmp.w	fp, #0
 8009540:	dd34      	ble.n	80095ac <_dtoa_r+0x394>
 8009542:	4b9a      	ldr	r3, [pc, #616]	; (80097ac <_dtoa_r+0x594>)
 8009544:	f00b 020f 	and.w	r2, fp, #15
 8009548:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800954c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009550:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009554:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009558:	ea4f 142b 	mov.w	r4, fp, asr #4
 800955c:	d016      	beq.n	800958c <_dtoa_r+0x374>
 800955e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009562:	4b93      	ldr	r3, [pc, #588]	; (80097b0 <_dtoa_r+0x598>)
 8009564:	2703      	movs	r7, #3
 8009566:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800956a:	f7f7 f8df 	bl	800072c <__aeabi_ddiv>
 800956e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009572:	f004 040f 	and.w	r4, r4, #15
 8009576:	4e8e      	ldr	r6, [pc, #568]	; (80097b0 <_dtoa_r+0x598>)
 8009578:	b954      	cbnz	r4, 8009590 <_dtoa_r+0x378>
 800957a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800957e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009582:	f7f7 f8d3 	bl	800072c <__aeabi_ddiv>
 8009586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800958a:	e029      	b.n	80095e0 <_dtoa_r+0x3c8>
 800958c:	2702      	movs	r7, #2
 800958e:	e7f2      	b.n	8009576 <_dtoa_r+0x35e>
 8009590:	07e1      	lsls	r1, r4, #31
 8009592:	d508      	bpl.n	80095a6 <_dtoa_r+0x38e>
 8009594:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009598:	e9d6 2300 	ldrd	r2, r3, [r6]
 800959c:	f7f6 ff9c 	bl	80004d8 <__aeabi_dmul>
 80095a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80095a4:	3701      	adds	r7, #1
 80095a6:	1064      	asrs	r4, r4, #1
 80095a8:	3608      	adds	r6, #8
 80095aa:	e7e5      	b.n	8009578 <_dtoa_r+0x360>
 80095ac:	f000 80a5 	beq.w	80096fa <_dtoa_r+0x4e2>
 80095b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095b4:	f1cb 0400 	rsb	r4, fp, #0
 80095b8:	4b7c      	ldr	r3, [pc, #496]	; (80097ac <_dtoa_r+0x594>)
 80095ba:	f004 020f 	and.w	r2, r4, #15
 80095be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	f7f6 ff87 	bl	80004d8 <__aeabi_dmul>
 80095ca:	2702      	movs	r7, #2
 80095cc:	2300      	movs	r3, #0
 80095ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095d2:	4e77      	ldr	r6, [pc, #476]	; (80097b0 <_dtoa_r+0x598>)
 80095d4:	1124      	asrs	r4, r4, #4
 80095d6:	2c00      	cmp	r4, #0
 80095d8:	f040 8084 	bne.w	80096e4 <_dtoa_r+0x4cc>
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1d2      	bne.n	8009586 <_dtoa_r+0x36e>
 80095e0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80095e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80095e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f000 8087 	beq.w	80096fe <_dtoa_r+0x4e6>
 80095f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80095f4:	2200      	movs	r2, #0
 80095f6:	4b6f      	ldr	r3, [pc, #444]	; (80097b4 <_dtoa_r+0x59c>)
 80095f8:	f7f7 f9e0 	bl	80009bc <__aeabi_dcmplt>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d07e      	beq.n	80096fe <_dtoa_r+0x4e6>
 8009600:	9b08      	ldr	r3, [sp, #32]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d07b      	beq.n	80096fe <_dtoa_r+0x4e6>
 8009606:	9b06      	ldr	r3, [sp, #24]
 8009608:	2b00      	cmp	r3, #0
 800960a:	dd38      	ble.n	800967e <_dtoa_r+0x466>
 800960c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009610:	2200      	movs	r2, #0
 8009612:	4b69      	ldr	r3, [pc, #420]	; (80097b8 <_dtoa_r+0x5a0>)
 8009614:	f7f6 ff60 	bl	80004d8 <__aeabi_dmul>
 8009618:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800961c:	9c06      	ldr	r4, [sp, #24]
 800961e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009622:	3701      	adds	r7, #1
 8009624:	4638      	mov	r0, r7
 8009626:	f7f6 feed 	bl	8000404 <__aeabi_i2d>
 800962a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800962e:	f7f6 ff53 	bl	80004d8 <__aeabi_dmul>
 8009632:	2200      	movs	r2, #0
 8009634:	4b61      	ldr	r3, [pc, #388]	; (80097bc <_dtoa_r+0x5a4>)
 8009636:	f7f6 fd99 	bl	800016c <__adddf3>
 800963a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800963e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009642:	9611      	str	r6, [sp, #68]	; 0x44
 8009644:	2c00      	cmp	r4, #0
 8009646:	d15d      	bne.n	8009704 <_dtoa_r+0x4ec>
 8009648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800964c:	2200      	movs	r2, #0
 800964e:	4b5c      	ldr	r3, [pc, #368]	; (80097c0 <_dtoa_r+0x5a8>)
 8009650:	f7f6 fd8a 	bl	8000168 <__aeabi_dsub>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800965c:	4633      	mov	r3, r6
 800965e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009660:	f7f7 f9ca 	bl	80009f8 <__aeabi_dcmpgt>
 8009664:	2800      	cmp	r0, #0
 8009666:	f040 8295 	bne.w	8009b94 <_dtoa_r+0x97c>
 800966a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800966e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009670:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009674:	f7f7 f9a2 	bl	80009bc <__aeabi_dcmplt>
 8009678:	2800      	cmp	r0, #0
 800967a:	f040 8289 	bne.w	8009b90 <_dtoa_r+0x978>
 800967e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009682:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009686:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009688:	2b00      	cmp	r3, #0
 800968a:	f2c0 8151 	blt.w	8009930 <_dtoa_r+0x718>
 800968e:	f1bb 0f0e 	cmp.w	fp, #14
 8009692:	f300 814d 	bgt.w	8009930 <_dtoa_r+0x718>
 8009696:	4b45      	ldr	r3, [pc, #276]	; (80097ac <_dtoa_r+0x594>)
 8009698:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800969c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80096a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80096a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f280 80da 	bge.w	8009860 <_dtoa_r+0x648>
 80096ac:	9b08      	ldr	r3, [sp, #32]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f300 80d6 	bgt.w	8009860 <_dtoa_r+0x648>
 80096b4:	f040 826b 	bne.w	8009b8e <_dtoa_r+0x976>
 80096b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096bc:	2200      	movs	r2, #0
 80096be:	4b40      	ldr	r3, [pc, #256]	; (80097c0 <_dtoa_r+0x5a8>)
 80096c0:	f7f6 ff0a 	bl	80004d8 <__aeabi_dmul>
 80096c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096c8:	f7f7 f98c 	bl	80009e4 <__aeabi_dcmpge>
 80096cc:	9c08      	ldr	r4, [sp, #32]
 80096ce:	4626      	mov	r6, r4
 80096d0:	2800      	cmp	r0, #0
 80096d2:	f040 8241 	bne.w	8009b58 <_dtoa_r+0x940>
 80096d6:	2331      	movs	r3, #49	; 0x31
 80096d8:	9f03      	ldr	r7, [sp, #12]
 80096da:	f10b 0b01 	add.w	fp, fp, #1
 80096de:	f807 3b01 	strb.w	r3, [r7], #1
 80096e2:	e23d      	b.n	8009b60 <_dtoa_r+0x948>
 80096e4:	07e2      	lsls	r2, r4, #31
 80096e6:	d505      	bpl.n	80096f4 <_dtoa_r+0x4dc>
 80096e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096ec:	f7f6 fef4 	bl	80004d8 <__aeabi_dmul>
 80096f0:	2301      	movs	r3, #1
 80096f2:	3701      	adds	r7, #1
 80096f4:	1064      	asrs	r4, r4, #1
 80096f6:	3608      	adds	r6, #8
 80096f8:	e76d      	b.n	80095d6 <_dtoa_r+0x3be>
 80096fa:	2702      	movs	r7, #2
 80096fc:	e770      	b.n	80095e0 <_dtoa_r+0x3c8>
 80096fe:	46d8      	mov	r8, fp
 8009700:	9c08      	ldr	r4, [sp, #32]
 8009702:	e78f      	b.n	8009624 <_dtoa_r+0x40c>
 8009704:	9903      	ldr	r1, [sp, #12]
 8009706:	4b29      	ldr	r3, [pc, #164]	; (80097ac <_dtoa_r+0x594>)
 8009708:	4421      	add	r1, r4
 800970a:	9112      	str	r1, [sp, #72]	; 0x48
 800970c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800970e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009712:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009716:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800971a:	2900      	cmp	r1, #0
 800971c:	d054      	beq.n	80097c8 <_dtoa_r+0x5b0>
 800971e:	2000      	movs	r0, #0
 8009720:	4928      	ldr	r1, [pc, #160]	; (80097c4 <_dtoa_r+0x5ac>)
 8009722:	f7f7 f803 	bl	800072c <__aeabi_ddiv>
 8009726:	463b      	mov	r3, r7
 8009728:	4632      	mov	r2, r6
 800972a:	f7f6 fd1d 	bl	8000168 <__aeabi_dsub>
 800972e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009732:	9f03      	ldr	r7, [sp, #12]
 8009734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009738:	f7f7 f97e 	bl	8000a38 <__aeabi_d2iz>
 800973c:	4604      	mov	r4, r0
 800973e:	f7f6 fe61 	bl	8000404 <__aeabi_i2d>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800974a:	f7f6 fd0d 	bl	8000168 <__aeabi_dsub>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	3430      	adds	r4, #48	; 0x30
 8009754:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009758:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800975c:	f807 4b01 	strb.w	r4, [r7], #1
 8009760:	f7f7 f92c 	bl	80009bc <__aeabi_dcmplt>
 8009764:	2800      	cmp	r0, #0
 8009766:	d173      	bne.n	8009850 <_dtoa_r+0x638>
 8009768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800976c:	2000      	movs	r0, #0
 800976e:	4911      	ldr	r1, [pc, #68]	; (80097b4 <_dtoa_r+0x59c>)
 8009770:	f7f6 fcfa 	bl	8000168 <__aeabi_dsub>
 8009774:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009778:	f7f7 f920 	bl	80009bc <__aeabi_dcmplt>
 800977c:	2800      	cmp	r0, #0
 800977e:	f040 80b6 	bne.w	80098ee <_dtoa_r+0x6d6>
 8009782:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009784:	429f      	cmp	r7, r3
 8009786:	f43f af7a 	beq.w	800967e <_dtoa_r+0x466>
 800978a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800978e:	2200      	movs	r2, #0
 8009790:	4b09      	ldr	r3, [pc, #36]	; (80097b8 <_dtoa_r+0x5a0>)
 8009792:	f7f6 fea1 	bl	80004d8 <__aeabi_dmul>
 8009796:	2200      	movs	r2, #0
 8009798:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800979c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097a0:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <_dtoa_r+0x5a0>)
 80097a2:	f7f6 fe99 	bl	80004d8 <__aeabi_dmul>
 80097a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097aa:	e7c3      	b.n	8009734 <_dtoa_r+0x51c>
 80097ac:	0800ca78 	.word	0x0800ca78
 80097b0:	0800ca50 	.word	0x0800ca50
 80097b4:	3ff00000 	.word	0x3ff00000
 80097b8:	40240000 	.word	0x40240000
 80097bc:	401c0000 	.word	0x401c0000
 80097c0:	40140000 	.word	0x40140000
 80097c4:	3fe00000 	.word	0x3fe00000
 80097c8:	4630      	mov	r0, r6
 80097ca:	4639      	mov	r1, r7
 80097cc:	f7f6 fe84 	bl	80004d8 <__aeabi_dmul>
 80097d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80097d6:	9c03      	ldr	r4, [sp, #12]
 80097d8:	9314      	str	r3, [sp, #80]	; 0x50
 80097da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097de:	f7f7 f92b 	bl	8000a38 <__aeabi_d2iz>
 80097e2:	9015      	str	r0, [sp, #84]	; 0x54
 80097e4:	f7f6 fe0e 	bl	8000404 <__aeabi_i2d>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097f0:	f7f6 fcba 	bl	8000168 <__aeabi_dsub>
 80097f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097f6:	4606      	mov	r6, r0
 80097f8:	3330      	adds	r3, #48	; 0x30
 80097fa:	f804 3b01 	strb.w	r3, [r4], #1
 80097fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009800:	460f      	mov	r7, r1
 8009802:	429c      	cmp	r4, r3
 8009804:	f04f 0200 	mov.w	r2, #0
 8009808:	d124      	bne.n	8009854 <_dtoa_r+0x63c>
 800980a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800980e:	4baf      	ldr	r3, [pc, #700]	; (8009acc <_dtoa_r+0x8b4>)
 8009810:	f7f6 fcac 	bl	800016c <__adddf3>
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	4630      	mov	r0, r6
 800981a:	4639      	mov	r1, r7
 800981c:	f7f7 f8ec 	bl	80009f8 <__aeabi_dcmpgt>
 8009820:	2800      	cmp	r0, #0
 8009822:	d163      	bne.n	80098ec <_dtoa_r+0x6d4>
 8009824:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009828:	2000      	movs	r0, #0
 800982a:	49a8      	ldr	r1, [pc, #672]	; (8009acc <_dtoa_r+0x8b4>)
 800982c:	f7f6 fc9c 	bl	8000168 <__aeabi_dsub>
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	4630      	mov	r0, r6
 8009836:	4639      	mov	r1, r7
 8009838:	f7f7 f8c0 	bl	80009bc <__aeabi_dcmplt>
 800983c:	2800      	cmp	r0, #0
 800983e:	f43f af1e 	beq.w	800967e <_dtoa_r+0x466>
 8009842:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009844:	1e7b      	subs	r3, r7, #1
 8009846:	9314      	str	r3, [sp, #80]	; 0x50
 8009848:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800984c:	2b30      	cmp	r3, #48	; 0x30
 800984e:	d0f8      	beq.n	8009842 <_dtoa_r+0x62a>
 8009850:	46c3      	mov	fp, r8
 8009852:	e03b      	b.n	80098cc <_dtoa_r+0x6b4>
 8009854:	4b9e      	ldr	r3, [pc, #632]	; (8009ad0 <_dtoa_r+0x8b8>)
 8009856:	f7f6 fe3f 	bl	80004d8 <__aeabi_dmul>
 800985a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800985e:	e7bc      	b.n	80097da <_dtoa_r+0x5c2>
 8009860:	9f03      	ldr	r7, [sp, #12]
 8009862:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009866:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800986a:	4640      	mov	r0, r8
 800986c:	4649      	mov	r1, r9
 800986e:	f7f6 ff5d 	bl	800072c <__aeabi_ddiv>
 8009872:	f7f7 f8e1 	bl	8000a38 <__aeabi_d2iz>
 8009876:	4604      	mov	r4, r0
 8009878:	f7f6 fdc4 	bl	8000404 <__aeabi_i2d>
 800987c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009880:	f7f6 fe2a 	bl	80004d8 <__aeabi_dmul>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4640      	mov	r0, r8
 800988a:	4649      	mov	r1, r9
 800988c:	f7f6 fc6c 	bl	8000168 <__aeabi_dsub>
 8009890:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009894:	f807 6b01 	strb.w	r6, [r7], #1
 8009898:	9e03      	ldr	r6, [sp, #12]
 800989a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800989e:	1bbe      	subs	r6, r7, r6
 80098a0:	45b4      	cmp	ip, r6
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	d136      	bne.n	8009916 <_dtoa_r+0x6fe>
 80098a8:	f7f6 fc60 	bl	800016c <__adddf3>
 80098ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098b0:	4680      	mov	r8, r0
 80098b2:	4689      	mov	r9, r1
 80098b4:	f7f7 f8a0 	bl	80009f8 <__aeabi_dcmpgt>
 80098b8:	bb58      	cbnz	r0, 8009912 <_dtoa_r+0x6fa>
 80098ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098be:	4640      	mov	r0, r8
 80098c0:	4649      	mov	r1, r9
 80098c2:	f7f7 f871 	bl	80009a8 <__aeabi_dcmpeq>
 80098c6:	b108      	cbz	r0, 80098cc <_dtoa_r+0x6b4>
 80098c8:	07e3      	lsls	r3, r4, #31
 80098ca:	d422      	bmi.n	8009912 <_dtoa_r+0x6fa>
 80098cc:	4651      	mov	r1, sl
 80098ce:	4628      	mov	r0, r5
 80098d0:	f000 fbc2 	bl	800a058 <_Bfree>
 80098d4:	2300      	movs	r3, #0
 80098d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80098d8:	703b      	strb	r3, [r7, #0]
 80098da:	f10b 0301 	add.w	r3, fp, #1
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f43f ace6 	beq.w	80092b4 <_dtoa_r+0x9c>
 80098e8:	601f      	str	r7, [r3, #0]
 80098ea:	e4e3      	b.n	80092b4 <_dtoa_r+0x9c>
 80098ec:	4627      	mov	r7, r4
 80098ee:	463b      	mov	r3, r7
 80098f0:	461f      	mov	r7, r3
 80098f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098f6:	2a39      	cmp	r2, #57	; 0x39
 80098f8:	d107      	bne.n	800990a <_dtoa_r+0x6f2>
 80098fa:	9a03      	ldr	r2, [sp, #12]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d1f7      	bne.n	80098f0 <_dtoa_r+0x6d8>
 8009900:	2230      	movs	r2, #48	; 0x30
 8009902:	9903      	ldr	r1, [sp, #12]
 8009904:	f108 0801 	add.w	r8, r8, #1
 8009908:	700a      	strb	r2, [r1, #0]
 800990a:	781a      	ldrb	r2, [r3, #0]
 800990c:	3201      	adds	r2, #1
 800990e:	701a      	strb	r2, [r3, #0]
 8009910:	e79e      	b.n	8009850 <_dtoa_r+0x638>
 8009912:	46d8      	mov	r8, fp
 8009914:	e7eb      	b.n	80098ee <_dtoa_r+0x6d6>
 8009916:	2200      	movs	r2, #0
 8009918:	4b6d      	ldr	r3, [pc, #436]	; (8009ad0 <_dtoa_r+0x8b8>)
 800991a:	f7f6 fddd 	bl	80004d8 <__aeabi_dmul>
 800991e:	2200      	movs	r2, #0
 8009920:	2300      	movs	r3, #0
 8009922:	4680      	mov	r8, r0
 8009924:	4689      	mov	r9, r1
 8009926:	f7f7 f83f 	bl	80009a8 <__aeabi_dcmpeq>
 800992a:	2800      	cmp	r0, #0
 800992c:	d09b      	beq.n	8009866 <_dtoa_r+0x64e>
 800992e:	e7cd      	b.n	80098cc <_dtoa_r+0x6b4>
 8009930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009932:	2a00      	cmp	r2, #0
 8009934:	f000 80c4 	beq.w	8009ac0 <_dtoa_r+0x8a8>
 8009938:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800993a:	2a01      	cmp	r2, #1
 800993c:	f300 80a8 	bgt.w	8009a90 <_dtoa_r+0x878>
 8009940:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009942:	2a00      	cmp	r2, #0
 8009944:	f000 80a0 	beq.w	8009a88 <_dtoa_r+0x870>
 8009948:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800994c:	464f      	mov	r7, r9
 800994e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009952:	2101      	movs	r1, #1
 8009954:	441a      	add	r2, r3
 8009956:	4628      	mov	r0, r5
 8009958:	4499      	add	r9, r3
 800995a:	9209      	str	r2, [sp, #36]	; 0x24
 800995c:	f000 fc7c 	bl	800a258 <__i2b>
 8009960:	4606      	mov	r6, r0
 8009962:	b15f      	cbz	r7, 800997c <_dtoa_r+0x764>
 8009964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009966:	2b00      	cmp	r3, #0
 8009968:	dd08      	ble.n	800997c <_dtoa_r+0x764>
 800996a:	42bb      	cmp	r3, r7
 800996c:	bfa8      	it	ge
 800996e:	463b      	movge	r3, r7
 8009970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009972:	eba9 0903 	sub.w	r9, r9, r3
 8009976:	1aff      	subs	r7, r7, r3
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	9309      	str	r3, [sp, #36]	; 0x24
 800997c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800997e:	b1f3      	cbz	r3, 80099be <_dtoa_r+0x7a6>
 8009980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 80a0 	beq.w	8009ac8 <_dtoa_r+0x8b0>
 8009988:	2c00      	cmp	r4, #0
 800998a:	dd10      	ble.n	80099ae <_dtoa_r+0x796>
 800998c:	4631      	mov	r1, r6
 800998e:	4622      	mov	r2, r4
 8009990:	4628      	mov	r0, r5
 8009992:	f000 fd1f 	bl	800a3d4 <__pow5mult>
 8009996:	4652      	mov	r2, sl
 8009998:	4601      	mov	r1, r0
 800999a:	4606      	mov	r6, r0
 800999c:	4628      	mov	r0, r5
 800999e:	f000 fc71 	bl	800a284 <__multiply>
 80099a2:	4680      	mov	r8, r0
 80099a4:	4651      	mov	r1, sl
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 fb56 	bl	800a058 <_Bfree>
 80099ac:	46c2      	mov	sl, r8
 80099ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b0:	1b1a      	subs	r2, r3, r4
 80099b2:	d004      	beq.n	80099be <_dtoa_r+0x7a6>
 80099b4:	4651      	mov	r1, sl
 80099b6:	4628      	mov	r0, r5
 80099b8:	f000 fd0c 	bl	800a3d4 <__pow5mult>
 80099bc:	4682      	mov	sl, r0
 80099be:	2101      	movs	r1, #1
 80099c0:	4628      	mov	r0, r5
 80099c2:	f000 fc49 	bl	800a258 <__i2b>
 80099c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099c8:	4604      	mov	r4, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f340 8082 	ble.w	8009ad4 <_dtoa_r+0x8bc>
 80099d0:	461a      	mov	r2, r3
 80099d2:	4601      	mov	r1, r0
 80099d4:	4628      	mov	r0, r5
 80099d6:	f000 fcfd 	bl	800a3d4 <__pow5mult>
 80099da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099dc:	4604      	mov	r4, r0
 80099de:	2b01      	cmp	r3, #1
 80099e0:	dd7b      	ble.n	8009ada <_dtoa_r+0x8c2>
 80099e2:	f04f 0800 	mov.w	r8, #0
 80099e6:	6923      	ldr	r3, [r4, #16]
 80099e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099ec:	6918      	ldr	r0, [r3, #16]
 80099ee:	f000 fbe5 	bl	800a1bc <__hi0bits>
 80099f2:	f1c0 0020 	rsb	r0, r0, #32
 80099f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f8:	4418      	add	r0, r3
 80099fa:	f010 001f 	ands.w	r0, r0, #31
 80099fe:	f000 8092 	beq.w	8009b26 <_dtoa_r+0x90e>
 8009a02:	f1c0 0320 	rsb	r3, r0, #32
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	f340 8085 	ble.w	8009b16 <_dtoa_r+0x8fe>
 8009a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a0e:	f1c0 001c 	rsb	r0, r0, #28
 8009a12:	4403      	add	r3, r0
 8009a14:	4481      	add	r9, r0
 8009a16:	4407      	add	r7, r0
 8009a18:	9309      	str	r3, [sp, #36]	; 0x24
 8009a1a:	f1b9 0f00 	cmp.w	r9, #0
 8009a1e:	dd05      	ble.n	8009a2c <_dtoa_r+0x814>
 8009a20:	4651      	mov	r1, sl
 8009a22:	464a      	mov	r2, r9
 8009a24:	4628      	mov	r0, r5
 8009a26:	f000 fd2f 	bl	800a488 <__lshift>
 8009a2a:	4682      	mov	sl, r0
 8009a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	dd05      	ble.n	8009a3e <_dtoa_r+0x826>
 8009a32:	4621      	mov	r1, r4
 8009a34:	461a      	mov	r2, r3
 8009a36:	4628      	mov	r0, r5
 8009a38:	f000 fd26 	bl	800a488 <__lshift>
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d072      	beq.n	8009b2a <_dtoa_r+0x912>
 8009a44:	4621      	mov	r1, r4
 8009a46:	4650      	mov	r0, sl
 8009a48:	f000 fd8a 	bl	800a560 <__mcmp>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	da6c      	bge.n	8009b2a <_dtoa_r+0x912>
 8009a50:	2300      	movs	r3, #0
 8009a52:	4651      	mov	r1, sl
 8009a54:	220a      	movs	r2, #10
 8009a56:	4628      	mov	r0, r5
 8009a58:	f000 fb20 	bl	800a09c <__multadd>
 8009a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a5e:	4682      	mov	sl, r0
 8009a60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 81ac 	beq.w	8009dc2 <_dtoa_r+0xbaa>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	220a      	movs	r2, #10
 8009a70:	4628      	mov	r0, r5
 8009a72:	f000 fb13 	bl	800a09c <__multadd>
 8009a76:	9b06      	ldr	r3, [sp, #24]
 8009a78:	4606      	mov	r6, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f300 8093 	bgt.w	8009ba6 <_dtoa_r+0x98e>
 8009a80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	dc59      	bgt.n	8009b3a <_dtoa_r+0x922>
 8009a86:	e08e      	b.n	8009ba6 <_dtoa_r+0x98e>
 8009a88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a8a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a8e:	e75d      	b.n	800994c <_dtoa_r+0x734>
 8009a90:	9b08      	ldr	r3, [sp, #32]
 8009a92:	1e5c      	subs	r4, r3, #1
 8009a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a96:	42a3      	cmp	r3, r4
 8009a98:	bfbf      	itttt	lt
 8009a9a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009a9c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009a9e:	1ae3      	sublt	r3, r4, r3
 8009aa0:	18d2      	addlt	r2, r2, r3
 8009aa2:	bfa8      	it	ge
 8009aa4:	1b1c      	subge	r4, r3, r4
 8009aa6:	9b08      	ldr	r3, [sp, #32]
 8009aa8:	bfbe      	ittt	lt
 8009aaa:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009aac:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009aae:	2400      	movlt	r4, #0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	bfb5      	itete	lt
 8009ab4:	eba9 0703 	sublt.w	r7, r9, r3
 8009ab8:	464f      	movge	r7, r9
 8009aba:	2300      	movlt	r3, #0
 8009abc:	9b08      	ldrge	r3, [sp, #32]
 8009abe:	e747      	b.n	8009950 <_dtoa_r+0x738>
 8009ac0:	464f      	mov	r7, r9
 8009ac2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ac4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009ac6:	e74c      	b.n	8009962 <_dtoa_r+0x74a>
 8009ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aca:	e773      	b.n	80099b4 <_dtoa_r+0x79c>
 8009acc:	3fe00000 	.word	0x3fe00000
 8009ad0:	40240000 	.word	0x40240000
 8009ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	dc18      	bgt.n	8009b0c <_dtoa_r+0x8f4>
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	b9b3      	cbnz	r3, 8009b0c <_dtoa_r+0x8f4>
 8009ade:	9b05      	ldr	r3, [sp, #20]
 8009ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae4:	b993      	cbnz	r3, 8009b0c <_dtoa_r+0x8f4>
 8009ae6:	9b05      	ldr	r3, [sp, #20]
 8009ae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009aec:	0d1b      	lsrs	r3, r3, #20
 8009aee:	051b      	lsls	r3, r3, #20
 8009af0:	b17b      	cbz	r3, 8009b12 <_dtoa_r+0x8fa>
 8009af2:	f04f 0801 	mov.w	r8, #1
 8009af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af8:	f109 0901 	add.w	r9, r9, #1
 8009afc:	3301      	adds	r3, #1
 8009afe:	9309      	str	r3, [sp, #36]	; 0x24
 8009b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f47f af6f 	bne.w	80099e6 <_dtoa_r+0x7ce>
 8009b08:	2001      	movs	r0, #1
 8009b0a:	e774      	b.n	80099f6 <_dtoa_r+0x7de>
 8009b0c:	f04f 0800 	mov.w	r8, #0
 8009b10:	e7f6      	b.n	8009b00 <_dtoa_r+0x8e8>
 8009b12:	4698      	mov	r8, r3
 8009b14:	e7f4      	b.n	8009b00 <_dtoa_r+0x8e8>
 8009b16:	d080      	beq.n	8009a1a <_dtoa_r+0x802>
 8009b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b1a:	331c      	adds	r3, #28
 8009b1c:	441a      	add	r2, r3
 8009b1e:	4499      	add	r9, r3
 8009b20:	441f      	add	r7, r3
 8009b22:	9209      	str	r2, [sp, #36]	; 0x24
 8009b24:	e779      	b.n	8009a1a <_dtoa_r+0x802>
 8009b26:	4603      	mov	r3, r0
 8009b28:	e7f6      	b.n	8009b18 <_dtoa_r+0x900>
 8009b2a:	9b08      	ldr	r3, [sp, #32]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	dc34      	bgt.n	8009b9a <_dtoa_r+0x982>
 8009b30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	dd31      	ble.n	8009b9a <_dtoa_r+0x982>
 8009b36:	9b08      	ldr	r3, [sp, #32]
 8009b38:	9306      	str	r3, [sp, #24]
 8009b3a:	9b06      	ldr	r3, [sp, #24]
 8009b3c:	b963      	cbnz	r3, 8009b58 <_dtoa_r+0x940>
 8009b3e:	4621      	mov	r1, r4
 8009b40:	2205      	movs	r2, #5
 8009b42:	4628      	mov	r0, r5
 8009b44:	f000 faaa 	bl	800a09c <__multadd>
 8009b48:	4601      	mov	r1, r0
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	4650      	mov	r0, sl
 8009b4e:	f000 fd07 	bl	800a560 <__mcmp>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	f73f adbf 	bgt.w	80096d6 <_dtoa_r+0x4be>
 8009b58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b5a:	9f03      	ldr	r7, [sp, #12]
 8009b5c:	ea6f 0b03 	mvn.w	fp, r3
 8009b60:	f04f 0800 	mov.w	r8, #0
 8009b64:	4621      	mov	r1, r4
 8009b66:	4628      	mov	r0, r5
 8009b68:	f000 fa76 	bl	800a058 <_Bfree>
 8009b6c:	2e00      	cmp	r6, #0
 8009b6e:	f43f aead 	beq.w	80098cc <_dtoa_r+0x6b4>
 8009b72:	f1b8 0f00 	cmp.w	r8, #0
 8009b76:	d005      	beq.n	8009b84 <_dtoa_r+0x96c>
 8009b78:	45b0      	cmp	r8, r6
 8009b7a:	d003      	beq.n	8009b84 <_dtoa_r+0x96c>
 8009b7c:	4641      	mov	r1, r8
 8009b7e:	4628      	mov	r0, r5
 8009b80:	f000 fa6a 	bl	800a058 <_Bfree>
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	f000 fa66 	bl	800a058 <_Bfree>
 8009b8c:	e69e      	b.n	80098cc <_dtoa_r+0x6b4>
 8009b8e:	2400      	movs	r4, #0
 8009b90:	4626      	mov	r6, r4
 8009b92:	e7e1      	b.n	8009b58 <_dtoa_r+0x940>
 8009b94:	46c3      	mov	fp, r8
 8009b96:	4626      	mov	r6, r4
 8009b98:	e59d      	b.n	80096d6 <_dtoa_r+0x4be>
 8009b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f000 80c8 	beq.w	8009d32 <_dtoa_r+0xb1a>
 8009ba2:	9b08      	ldr	r3, [sp, #32]
 8009ba4:	9306      	str	r3, [sp, #24]
 8009ba6:	2f00      	cmp	r7, #0
 8009ba8:	dd05      	ble.n	8009bb6 <_dtoa_r+0x99e>
 8009baa:	4631      	mov	r1, r6
 8009bac:	463a      	mov	r2, r7
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f000 fc6a 	bl	800a488 <__lshift>
 8009bb4:	4606      	mov	r6, r0
 8009bb6:	f1b8 0f00 	cmp.w	r8, #0
 8009bba:	d05b      	beq.n	8009c74 <_dtoa_r+0xa5c>
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	6871      	ldr	r1, [r6, #4]
 8009bc0:	f000 fa0a 	bl	8009fd8 <_Balloc>
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	b928      	cbnz	r0, 8009bd4 <_dtoa_r+0x9bc>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009bce:	4b81      	ldr	r3, [pc, #516]	; (8009dd4 <_dtoa_r+0xbbc>)
 8009bd0:	f7ff bb36 	b.w	8009240 <_dtoa_r+0x28>
 8009bd4:	6932      	ldr	r2, [r6, #16]
 8009bd6:	f106 010c 	add.w	r1, r6, #12
 8009bda:	3202      	adds	r2, #2
 8009bdc:	0092      	lsls	r2, r2, #2
 8009bde:	300c      	adds	r0, #12
 8009be0:	f7ff fa7b 	bl	80090da <memcpy>
 8009be4:	2201      	movs	r2, #1
 8009be6:	4639      	mov	r1, r7
 8009be8:	4628      	mov	r0, r5
 8009bea:	f000 fc4d 	bl	800a488 <__lshift>
 8009bee:	46b0      	mov	r8, r6
 8009bf0:	4606      	mov	r6, r0
 8009bf2:	9b03      	ldr	r3, [sp, #12]
 8009bf4:	9a03      	ldr	r2, [sp, #12]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	9308      	str	r3, [sp, #32]
 8009bfa:	9b06      	ldr	r3, [sp, #24]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c00:	9b04      	ldr	r3, [sp, #16]
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	930a      	str	r3, [sp, #40]	; 0x28
 8009c08:	9b08      	ldr	r3, [sp, #32]
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	4650      	mov	r0, sl
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	f7ff fa75 	bl	8009100 <quorem>
 8009c16:	4641      	mov	r1, r8
 8009c18:	9006      	str	r0, [sp, #24]
 8009c1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009c1e:	4650      	mov	r0, sl
 8009c20:	f000 fc9e 	bl	800a560 <__mcmp>
 8009c24:	4632      	mov	r2, r6
 8009c26:	9009      	str	r0, [sp, #36]	; 0x24
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f000 fcb4 	bl	800a598 <__mdiff>
 8009c30:	68c2      	ldr	r2, [r0, #12]
 8009c32:	4607      	mov	r7, r0
 8009c34:	bb02      	cbnz	r2, 8009c78 <_dtoa_r+0xa60>
 8009c36:	4601      	mov	r1, r0
 8009c38:	4650      	mov	r0, sl
 8009c3a:	f000 fc91 	bl	800a560 <__mcmp>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	4639      	mov	r1, r7
 8009c42:	4628      	mov	r0, r5
 8009c44:	920c      	str	r2, [sp, #48]	; 0x30
 8009c46:	f000 fa07 	bl	800a058 <_Bfree>
 8009c4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c4e:	9f08      	ldr	r7, [sp, #32]
 8009c50:	ea43 0102 	orr.w	r1, r3, r2
 8009c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c56:	4319      	orrs	r1, r3
 8009c58:	d110      	bne.n	8009c7c <_dtoa_r+0xa64>
 8009c5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009c5e:	d029      	beq.n	8009cb4 <_dtoa_r+0xa9c>
 8009c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	dd02      	ble.n	8009c6c <_dtoa_r+0xa54>
 8009c66:	9b06      	ldr	r3, [sp, #24]
 8009c68:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009c6c:	9b04      	ldr	r3, [sp, #16]
 8009c6e:	f883 9000 	strb.w	r9, [r3]
 8009c72:	e777      	b.n	8009b64 <_dtoa_r+0x94c>
 8009c74:	4630      	mov	r0, r6
 8009c76:	e7ba      	b.n	8009bee <_dtoa_r+0x9d6>
 8009c78:	2201      	movs	r2, #1
 8009c7a:	e7e1      	b.n	8009c40 <_dtoa_r+0xa28>
 8009c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	db04      	blt.n	8009c8c <_dtoa_r+0xa74>
 8009c82:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009c84:	430b      	orrs	r3, r1
 8009c86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c88:	430b      	orrs	r3, r1
 8009c8a:	d120      	bne.n	8009cce <_dtoa_r+0xab6>
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	dded      	ble.n	8009c6c <_dtoa_r+0xa54>
 8009c90:	4651      	mov	r1, sl
 8009c92:	2201      	movs	r2, #1
 8009c94:	4628      	mov	r0, r5
 8009c96:	f000 fbf7 	bl	800a488 <__lshift>
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4682      	mov	sl, r0
 8009c9e:	f000 fc5f 	bl	800a560 <__mcmp>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	dc03      	bgt.n	8009cae <_dtoa_r+0xa96>
 8009ca6:	d1e1      	bne.n	8009c6c <_dtoa_r+0xa54>
 8009ca8:	f019 0f01 	tst.w	r9, #1
 8009cac:	d0de      	beq.n	8009c6c <_dtoa_r+0xa54>
 8009cae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009cb2:	d1d8      	bne.n	8009c66 <_dtoa_r+0xa4e>
 8009cb4:	2339      	movs	r3, #57	; 0x39
 8009cb6:	9a04      	ldr	r2, [sp, #16]
 8009cb8:	7013      	strb	r3, [r2, #0]
 8009cba:	463b      	mov	r3, r7
 8009cbc:	461f      	mov	r7, r3
 8009cbe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	2a39      	cmp	r2, #57	; 0x39
 8009cc6:	d06b      	beq.n	8009da0 <_dtoa_r+0xb88>
 8009cc8:	3201      	adds	r2, #1
 8009cca:	701a      	strb	r2, [r3, #0]
 8009ccc:	e74a      	b.n	8009b64 <_dtoa_r+0x94c>
 8009cce:	2a00      	cmp	r2, #0
 8009cd0:	dd07      	ble.n	8009ce2 <_dtoa_r+0xaca>
 8009cd2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009cd6:	d0ed      	beq.n	8009cb4 <_dtoa_r+0xa9c>
 8009cd8:	9a04      	ldr	r2, [sp, #16]
 8009cda:	f109 0301 	add.w	r3, r9, #1
 8009cde:	7013      	strb	r3, [r2, #0]
 8009ce0:	e740      	b.n	8009b64 <_dtoa_r+0x94c>
 8009ce2:	9b08      	ldr	r3, [sp, #32]
 8009ce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ce6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d042      	beq.n	8009d74 <_dtoa_r+0xb5c>
 8009cee:	4651      	mov	r1, sl
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	220a      	movs	r2, #10
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f000 f9d1 	bl	800a09c <__multadd>
 8009cfa:	45b0      	cmp	r8, r6
 8009cfc:	4682      	mov	sl, r0
 8009cfe:	f04f 0300 	mov.w	r3, #0
 8009d02:	f04f 020a 	mov.w	r2, #10
 8009d06:	4641      	mov	r1, r8
 8009d08:	4628      	mov	r0, r5
 8009d0a:	d107      	bne.n	8009d1c <_dtoa_r+0xb04>
 8009d0c:	f000 f9c6 	bl	800a09c <__multadd>
 8009d10:	4680      	mov	r8, r0
 8009d12:	4606      	mov	r6, r0
 8009d14:	9b08      	ldr	r3, [sp, #32]
 8009d16:	3301      	adds	r3, #1
 8009d18:	9308      	str	r3, [sp, #32]
 8009d1a:	e775      	b.n	8009c08 <_dtoa_r+0x9f0>
 8009d1c:	f000 f9be 	bl	800a09c <__multadd>
 8009d20:	4631      	mov	r1, r6
 8009d22:	4680      	mov	r8, r0
 8009d24:	2300      	movs	r3, #0
 8009d26:	220a      	movs	r2, #10
 8009d28:	4628      	mov	r0, r5
 8009d2a:	f000 f9b7 	bl	800a09c <__multadd>
 8009d2e:	4606      	mov	r6, r0
 8009d30:	e7f0      	b.n	8009d14 <_dtoa_r+0xafc>
 8009d32:	9b08      	ldr	r3, [sp, #32]
 8009d34:	9306      	str	r3, [sp, #24]
 8009d36:	9f03      	ldr	r7, [sp, #12]
 8009d38:	4621      	mov	r1, r4
 8009d3a:	4650      	mov	r0, sl
 8009d3c:	f7ff f9e0 	bl	8009100 <quorem>
 8009d40:	9b03      	ldr	r3, [sp, #12]
 8009d42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009d46:	f807 9b01 	strb.w	r9, [r7], #1
 8009d4a:	1afa      	subs	r2, r7, r3
 8009d4c:	9b06      	ldr	r3, [sp, #24]
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	dd07      	ble.n	8009d62 <_dtoa_r+0xb4a>
 8009d52:	4651      	mov	r1, sl
 8009d54:	2300      	movs	r3, #0
 8009d56:	220a      	movs	r2, #10
 8009d58:	4628      	mov	r0, r5
 8009d5a:	f000 f99f 	bl	800a09c <__multadd>
 8009d5e:	4682      	mov	sl, r0
 8009d60:	e7ea      	b.n	8009d38 <_dtoa_r+0xb20>
 8009d62:	9b06      	ldr	r3, [sp, #24]
 8009d64:	f04f 0800 	mov.w	r8, #0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bfcc      	ite	gt
 8009d6c:	461f      	movgt	r7, r3
 8009d6e:	2701      	movle	r7, #1
 8009d70:	9b03      	ldr	r3, [sp, #12]
 8009d72:	441f      	add	r7, r3
 8009d74:	4651      	mov	r1, sl
 8009d76:	2201      	movs	r2, #1
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f000 fb85 	bl	800a488 <__lshift>
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4682      	mov	sl, r0
 8009d82:	f000 fbed 	bl	800a560 <__mcmp>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	dc97      	bgt.n	8009cba <_dtoa_r+0xaa2>
 8009d8a:	d102      	bne.n	8009d92 <_dtoa_r+0xb7a>
 8009d8c:	f019 0f01 	tst.w	r9, #1
 8009d90:	d193      	bne.n	8009cba <_dtoa_r+0xaa2>
 8009d92:	463b      	mov	r3, r7
 8009d94:	461f      	mov	r7, r3
 8009d96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d9a:	2a30      	cmp	r2, #48	; 0x30
 8009d9c:	d0fa      	beq.n	8009d94 <_dtoa_r+0xb7c>
 8009d9e:	e6e1      	b.n	8009b64 <_dtoa_r+0x94c>
 8009da0:	9a03      	ldr	r2, [sp, #12]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d18a      	bne.n	8009cbc <_dtoa_r+0xaa4>
 8009da6:	2331      	movs	r3, #49	; 0x31
 8009da8:	f10b 0b01 	add.w	fp, fp, #1
 8009dac:	e797      	b.n	8009cde <_dtoa_r+0xac6>
 8009dae:	4b0a      	ldr	r3, [pc, #40]	; (8009dd8 <_dtoa_r+0xbc0>)
 8009db0:	f7ff ba9f 	b.w	80092f2 <_dtoa_r+0xda>
 8009db4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f47f aa77 	bne.w	80092aa <_dtoa_r+0x92>
 8009dbc:	4b07      	ldr	r3, [pc, #28]	; (8009ddc <_dtoa_r+0xbc4>)
 8009dbe:	f7ff ba98 	b.w	80092f2 <_dtoa_r+0xda>
 8009dc2:	9b06      	ldr	r3, [sp, #24]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	dcb6      	bgt.n	8009d36 <_dtoa_r+0xb1e>
 8009dc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	f73f aeb5 	bgt.w	8009b3a <_dtoa_r+0x922>
 8009dd0:	e7b1      	b.n	8009d36 <_dtoa_r+0xb1e>
 8009dd2:	bf00      	nop
 8009dd4:	0800c9df 	.word	0x0800c9df
 8009dd8:	0800c93a 	.word	0x0800c93a
 8009ddc:	0800c963 	.word	0x0800c963

08009de0 <_free_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4605      	mov	r5, r0
 8009de4:	2900      	cmp	r1, #0
 8009de6:	d040      	beq.n	8009e6a <_free_r+0x8a>
 8009de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dec:	1f0c      	subs	r4, r1, #4
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	bfb8      	it	lt
 8009df2:	18e4      	addlt	r4, r4, r3
 8009df4:	f000 f8e4 	bl	8009fc0 <__malloc_lock>
 8009df8:	4a1c      	ldr	r2, [pc, #112]	; (8009e6c <_free_r+0x8c>)
 8009dfa:	6813      	ldr	r3, [r2, #0]
 8009dfc:	b933      	cbnz	r3, 8009e0c <_free_r+0x2c>
 8009dfe:	6063      	str	r3, [r4, #4]
 8009e00:	6014      	str	r4, [r2, #0]
 8009e02:	4628      	mov	r0, r5
 8009e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e08:	f000 b8e0 	b.w	8009fcc <__malloc_unlock>
 8009e0c:	42a3      	cmp	r3, r4
 8009e0e:	d908      	bls.n	8009e22 <_free_r+0x42>
 8009e10:	6820      	ldr	r0, [r4, #0]
 8009e12:	1821      	adds	r1, r4, r0
 8009e14:	428b      	cmp	r3, r1
 8009e16:	bf01      	itttt	eq
 8009e18:	6819      	ldreq	r1, [r3, #0]
 8009e1a:	685b      	ldreq	r3, [r3, #4]
 8009e1c:	1809      	addeq	r1, r1, r0
 8009e1e:	6021      	streq	r1, [r4, #0]
 8009e20:	e7ed      	b.n	8009dfe <_free_r+0x1e>
 8009e22:	461a      	mov	r2, r3
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	b10b      	cbz	r3, 8009e2c <_free_r+0x4c>
 8009e28:	42a3      	cmp	r3, r4
 8009e2a:	d9fa      	bls.n	8009e22 <_free_r+0x42>
 8009e2c:	6811      	ldr	r1, [r2, #0]
 8009e2e:	1850      	adds	r0, r2, r1
 8009e30:	42a0      	cmp	r0, r4
 8009e32:	d10b      	bne.n	8009e4c <_free_r+0x6c>
 8009e34:	6820      	ldr	r0, [r4, #0]
 8009e36:	4401      	add	r1, r0
 8009e38:	1850      	adds	r0, r2, r1
 8009e3a:	4283      	cmp	r3, r0
 8009e3c:	6011      	str	r1, [r2, #0]
 8009e3e:	d1e0      	bne.n	8009e02 <_free_r+0x22>
 8009e40:	6818      	ldr	r0, [r3, #0]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	4408      	add	r0, r1
 8009e46:	6010      	str	r0, [r2, #0]
 8009e48:	6053      	str	r3, [r2, #4]
 8009e4a:	e7da      	b.n	8009e02 <_free_r+0x22>
 8009e4c:	d902      	bls.n	8009e54 <_free_r+0x74>
 8009e4e:	230c      	movs	r3, #12
 8009e50:	602b      	str	r3, [r5, #0]
 8009e52:	e7d6      	b.n	8009e02 <_free_r+0x22>
 8009e54:	6820      	ldr	r0, [r4, #0]
 8009e56:	1821      	adds	r1, r4, r0
 8009e58:	428b      	cmp	r3, r1
 8009e5a:	bf01      	itttt	eq
 8009e5c:	6819      	ldreq	r1, [r3, #0]
 8009e5e:	685b      	ldreq	r3, [r3, #4]
 8009e60:	1809      	addeq	r1, r1, r0
 8009e62:	6021      	streq	r1, [r4, #0]
 8009e64:	6063      	str	r3, [r4, #4]
 8009e66:	6054      	str	r4, [r2, #4]
 8009e68:	e7cb      	b.n	8009e02 <_free_r+0x22>
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	20001efc 	.word	0x20001efc

08009e70 <malloc>:
 8009e70:	4b02      	ldr	r3, [pc, #8]	; (8009e7c <malloc+0xc>)
 8009e72:	4601      	mov	r1, r0
 8009e74:	6818      	ldr	r0, [r3, #0]
 8009e76:	f000 b823 	b.w	8009ec0 <_malloc_r>
 8009e7a:	bf00      	nop
 8009e7c:	20000068 	.word	0x20000068

08009e80 <sbrk_aligned>:
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	4e0e      	ldr	r6, [pc, #56]	; (8009ebc <sbrk_aligned+0x3c>)
 8009e84:	460c      	mov	r4, r1
 8009e86:	6831      	ldr	r1, [r6, #0]
 8009e88:	4605      	mov	r5, r0
 8009e8a:	b911      	cbnz	r1, 8009e92 <sbrk_aligned+0x12>
 8009e8c:	f001 ffe4 	bl	800be58 <_sbrk_r>
 8009e90:	6030      	str	r0, [r6, #0]
 8009e92:	4621      	mov	r1, r4
 8009e94:	4628      	mov	r0, r5
 8009e96:	f001 ffdf 	bl	800be58 <_sbrk_r>
 8009e9a:	1c43      	adds	r3, r0, #1
 8009e9c:	d00a      	beq.n	8009eb4 <sbrk_aligned+0x34>
 8009e9e:	1cc4      	adds	r4, r0, #3
 8009ea0:	f024 0403 	bic.w	r4, r4, #3
 8009ea4:	42a0      	cmp	r0, r4
 8009ea6:	d007      	beq.n	8009eb8 <sbrk_aligned+0x38>
 8009ea8:	1a21      	subs	r1, r4, r0
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f001 ffd4 	bl	800be58 <_sbrk_r>
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	d101      	bne.n	8009eb8 <sbrk_aligned+0x38>
 8009eb4:	f04f 34ff 	mov.w	r4, #4294967295
 8009eb8:	4620      	mov	r0, r4
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
 8009ebc:	20001f00 	.word	0x20001f00

08009ec0 <_malloc_r>:
 8009ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ec4:	1ccd      	adds	r5, r1, #3
 8009ec6:	f025 0503 	bic.w	r5, r5, #3
 8009eca:	3508      	adds	r5, #8
 8009ecc:	2d0c      	cmp	r5, #12
 8009ece:	bf38      	it	cc
 8009ed0:	250c      	movcc	r5, #12
 8009ed2:	2d00      	cmp	r5, #0
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	db01      	blt.n	8009edc <_malloc_r+0x1c>
 8009ed8:	42a9      	cmp	r1, r5
 8009eda:	d905      	bls.n	8009ee8 <_malloc_r+0x28>
 8009edc:	230c      	movs	r3, #12
 8009ede:	2600      	movs	r6, #0
 8009ee0:	603b      	str	r3, [r7, #0]
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ee8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009fbc <_malloc_r+0xfc>
 8009eec:	f000 f868 	bl	8009fc0 <__malloc_lock>
 8009ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ef4:	461c      	mov	r4, r3
 8009ef6:	bb5c      	cbnz	r4, 8009f50 <_malloc_r+0x90>
 8009ef8:	4629      	mov	r1, r5
 8009efa:	4638      	mov	r0, r7
 8009efc:	f7ff ffc0 	bl	8009e80 <sbrk_aligned>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	4604      	mov	r4, r0
 8009f04:	d155      	bne.n	8009fb2 <_malloc_r+0xf2>
 8009f06:	f8d8 4000 	ldr.w	r4, [r8]
 8009f0a:	4626      	mov	r6, r4
 8009f0c:	2e00      	cmp	r6, #0
 8009f0e:	d145      	bne.n	8009f9c <_malloc_r+0xdc>
 8009f10:	2c00      	cmp	r4, #0
 8009f12:	d048      	beq.n	8009fa6 <_malloc_r+0xe6>
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	4631      	mov	r1, r6
 8009f18:	4638      	mov	r0, r7
 8009f1a:	eb04 0903 	add.w	r9, r4, r3
 8009f1e:	f001 ff9b 	bl	800be58 <_sbrk_r>
 8009f22:	4581      	cmp	r9, r0
 8009f24:	d13f      	bne.n	8009fa6 <_malloc_r+0xe6>
 8009f26:	6821      	ldr	r1, [r4, #0]
 8009f28:	4638      	mov	r0, r7
 8009f2a:	1a6d      	subs	r5, r5, r1
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	f7ff ffa7 	bl	8009e80 <sbrk_aligned>
 8009f32:	3001      	adds	r0, #1
 8009f34:	d037      	beq.n	8009fa6 <_malloc_r+0xe6>
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	442b      	add	r3, r5
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d038      	beq.n	8009fb6 <_malloc_r+0xf6>
 8009f44:	685a      	ldr	r2, [r3, #4]
 8009f46:	42a2      	cmp	r2, r4
 8009f48:	d12b      	bne.n	8009fa2 <_malloc_r+0xe2>
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	605a      	str	r2, [r3, #4]
 8009f4e:	e00f      	b.n	8009f70 <_malloc_r+0xb0>
 8009f50:	6822      	ldr	r2, [r4, #0]
 8009f52:	1b52      	subs	r2, r2, r5
 8009f54:	d41f      	bmi.n	8009f96 <_malloc_r+0xd6>
 8009f56:	2a0b      	cmp	r2, #11
 8009f58:	d917      	bls.n	8009f8a <_malloc_r+0xca>
 8009f5a:	1961      	adds	r1, r4, r5
 8009f5c:	42a3      	cmp	r3, r4
 8009f5e:	6025      	str	r5, [r4, #0]
 8009f60:	bf18      	it	ne
 8009f62:	6059      	strne	r1, [r3, #4]
 8009f64:	6863      	ldr	r3, [r4, #4]
 8009f66:	bf08      	it	eq
 8009f68:	f8c8 1000 	streq.w	r1, [r8]
 8009f6c:	5162      	str	r2, [r4, r5]
 8009f6e:	604b      	str	r3, [r1, #4]
 8009f70:	4638      	mov	r0, r7
 8009f72:	f104 060b 	add.w	r6, r4, #11
 8009f76:	f000 f829 	bl	8009fcc <__malloc_unlock>
 8009f7a:	f026 0607 	bic.w	r6, r6, #7
 8009f7e:	1d23      	adds	r3, r4, #4
 8009f80:	1af2      	subs	r2, r6, r3
 8009f82:	d0ae      	beq.n	8009ee2 <_malloc_r+0x22>
 8009f84:	1b9b      	subs	r3, r3, r6
 8009f86:	50a3      	str	r3, [r4, r2]
 8009f88:	e7ab      	b.n	8009ee2 <_malloc_r+0x22>
 8009f8a:	42a3      	cmp	r3, r4
 8009f8c:	6862      	ldr	r2, [r4, #4]
 8009f8e:	d1dd      	bne.n	8009f4c <_malloc_r+0x8c>
 8009f90:	f8c8 2000 	str.w	r2, [r8]
 8009f94:	e7ec      	b.n	8009f70 <_malloc_r+0xb0>
 8009f96:	4623      	mov	r3, r4
 8009f98:	6864      	ldr	r4, [r4, #4]
 8009f9a:	e7ac      	b.n	8009ef6 <_malloc_r+0x36>
 8009f9c:	4634      	mov	r4, r6
 8009f9e:	6876      	ldr	r6, [r6, #4]
 8009fa0:	e7b4      	b.n	8009f0c <_malloc_r+0x4c>
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	e7cc      	b.n	8009f40 <_malloc_r+0x80>
 8009fa6:	230c      	movs	r3, #12
 8009fa8:	4638      	mov	r0, r7
 8009faa:	603b      	str	r3, [r7, #0]
 8009fac:	f000 f80e 	bl	8009fcc <__malloc_unlock>
 8009fb0:	e797      	b.n	8009ee2 <_malloc_r+0x22>
 8009fb2:	6025      	str	r5, [r4, #0]
 8009fb4:	e7dc      	b.n	8009f70 <_malloc_r+0xb0>
 8009fb6:	605b      	str	r3, [r3, #4]
 8009fb8:	deff      	udf	#255	; 0xff
 8009fba:	bf00      	nop
 8009fbc:	20001efc 	.word	0x20001efc

08009fc0 <__malloc_lock>:
 8009fc0:	4801      	ldr	r0, [pc, #4]	; (8009fc8 <__malloc_lock+0x8>)
 8009fc2:	f7ff b87a 	b.w	80090ba <__retarget_lock_acquire_recursive>
 8009fc6:	bf00      	nop
 8009fc8:	20001ef8 	.word	0x20001ef8

08009fcc <__malloc_unlock>:
 8009fcc:	4801      	ldr	r0, [pc, #4]	; (8009fd4 <__malloc_unlock+0x8>)
 8009fce:	f7ff b875 	b.w	80090bc <__retarget_lock_release_recursive>
 8009fd2:	bf00      	nop
 8009fd4:	20001ef8 	.word	0x20001ef8

08009fd8 <_Balloc>:
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	69c6      	ldr	r6, [r0, #28]
 8009fdc:	4604      	mov	r4, r0
 8009fde:	460d      	mov	r5, r1
 8009fe0:	b976      	cbnz	r6, 800a000 <_Balloc+0x28>
 8009fe2:	2010      	movs	r0, #16
 8009fe4:	f7ff ff44 	bl	8009e70 <malloc>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	61e0      	str	r0, [r4, #28]
 8009fec:	b920      	cbnz	r0, 8009ff8 <_Balloc+0x20>
 8009fee:	216b      	movs	r1, #107	; 0x6b
 8009ff0:	4b17      	ldr	r3, [pc, #92]	; (800a050 <_Balloc+0x78>)
 8009ff2:	4818      	ldr	r0, [pc, #96]	; (800a054 <_Balloc+0x7c>)
 8009ff4:	f001 ff46 	bl	800be84 <__assert_func>
 8009ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ffc:	6006      	str	r6, [r0, #0]
 8009ffe:	60c6      	str	r6, [r0, #12]
 800a000:	69e6      	ldr	r6, [r4, #28]
 800a002:	68f3      	ldr	r3, [r6, #12]
 800a004:	b183      	cbz	r3, 800a028 <_Balloc+0x50>
 800a006:	69e3      	ldr	r3, [r4, #28]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a00e:	b9b8      	cbnz	r0, 800a040 <_Balloc+0x68>
 800a010:	2101      	movs	r1, #1
 800a012:	fa01 f605 	lsl.w	r6, r1, r5
 800a016:	1d72      	adds	r2, r6, #5
 800a018:	4620      	mov	r0, r4
 800a01a:	0092      	lsls	r2, r2, #2
 800a01c:	f001 ff50 	bl	800bec0 <_calloc_r>
 800a020:	b160      	cbz	r0, 800a03c <_Balloc+0x64>
 800a022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a026:	e00e      	b.n	800a046 <_Balloc+0x6e>
 800a028:	2221      	movs	r2, #33	; 0x21
 800a02a:	2104      	movs	r1, #4
 800a02c:	4620      	mov	r0, r4
 800a02e:	f001 ff47 	bl	800bec0 <_calloc_r>
 800a032:	69e3      	ldr	r3, [r4, #28]
 800a034:	60f0      	str	r0, [r6, #12]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e4      	bne.n	800a006 <_Balloc+0x2e>
 800a03c:	2000      	movs	r0, #0
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	6802      	ldr	r2, [r0, #0]
 800a042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a046:	2300      	movs	r3, #0
 800a048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a04c:	e7f7      	b.n	800a03e <_Balloc+0x66>
 800a04e:	bf00      	nop
 800a050:	0800c970 	.word	0x0800c970
 800a054:	0800c9f0 	.word	0x0800c9f0

0800a058 <_Bfree>:
 800a058:	b570      	push	{r4, r5, r6, lr}
 800a05a:	69c6      	ldr	r6, [r0, #28]
 800a05c:	4605      	mov	r5, r0
 800a05e:	460c      	mov	r4, r1
 800a060:	b976      	cbnz	r6, 800a080 <_Bfree+0x28>
 800a062:	2010      	movs	r0, #16
 800a064:	f7ff ff04 	bl	8009e70 <malloc>
 800a068:	4602      	mov	r2, r0
 800a06a:	61e8      	str	r0, [r5, #28]
 800a06c:	b920      	cbnz	r0, 800a078 <_Bfree+0x20>
 800a06e:	218f      	movs	r1, #143	; 0x8f
 800a070:	4b08      	ldr	r3, [pc, #32]	; (800a094 <_Bfree+0x3c>)
 800a072:	4809      	ldr	r0, [pc, #36]	; (800a098 <_Bfree+0x40>)
 800a074:	f001 ff06 	bl	800be84 <__assert_func>
 800a078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a07c:	6006      	str	r6, [r0, #0]
 800a07e:	60c6      	str	r6, [r0, #12]
 800a080:	b13c      	cbz	r4, 800a092 <_Bfree+0x3a>
 800a082:	69eb      	ldr	r3, [r5, #28]
 800a084:	6862      	ldr	r2, [r4, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a08c:	6021      	str	r1, [r4, #0]
 800a08e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a092:	bd70      	pop	{r4, r5, r6, pc}
 800a094:	0800c970 	.word	0x0800c970
 800a098:	0800c9f0 	.word	0x0800c9f0

0800a09c <__multadd>:
 800a09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a0:	4607      	mov	r7, r0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	461e      	mov	r6, r3
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	690d      	ldr	r5, [r1, #16]
 800a0aa:	f101 0c14 	add.w	ip, r1, #20
 800a0ae:	f8dc 3000 	ldr.w	r3, [ip]
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	b299      	uxth	r1, r3
 800a0b6:	fb02 6101 	mla	r1, r2, r1, r6
 800a0ba:	0c1e      	lsrs	r6, r3, #16
 800a0bc:	0c0b      	lsrs	r3, r1, #16
 800a0be:	fb02 3306 	mla	r3, r2, r6, r3
 800a0c2:	b289      	uxth	r1, r1
 800a0c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0c8:	4285      	cmp	r5, r0
 800a0ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a0d2:	dcec      	bgt.n	800a0ae <__multadd+0x12>
 800a0d4:	b30e      	cbz	r6, 800a11a <__multadd+0x7e>
 800a0d6:	68a3      	ldr	r3, [r4, #8]
 800a0d8:	42ab      	cmp	r3, r5
 800a0da:	dc19      	bgt.n	800a110 <__multadd+0x74>
 800a0dc:	6861      	ldr	r1, [r4, #4]
 800a0de:	4638      	mov	r0, r7
 800a0e0:	3101      	adds	r1, #1
 800a0e2:	f7ff ff79 	bl	8009fd8 <_Balloc>
 800a0e6:	4680      	mov	r8, r0
 800a0e8:	b928      	cbnz	r0, 800a0f6 <__multadd+0x5a>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	21ba      	movs	r1, #186	; 0xba
 800a0ee:	4b0c      	ldr	r3, [pc, #48]	; (800a120 <__multadd+0x84>)
 800a0f0:	480c      	ldr	r0, [pc, #48]	; (800a124 <__multadd+0x88>)
 800a0f2:	f001 fec7 	bl	800be84 <__assert_func>
 800a0f6:	6922      	ldr	r2, [r4, #16]
 800a0f8:	f104 010c 	add.w	r1, r4, #12
 800a0fc:	3202      	adds	r2, #2
 800a0fe:	0092      	lsls	r2, r2, #2
 800a100:	300c      	adds	r0, #12
 800a102:	f7fe ffea 	bl	80090da <memcpy>
 800a106:	4621      	mov	r1, r4
 800a108:	4638      	mov	r0, r7
 800a10a:	f7ff ffa5 	bl	800a058 <_Bfree>
 800a10e:	4644      	mov	r4, r8
 800a110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a114:	3501      	adds	r5, #1
 800a116:	615e      	str	r6, [r3, #20]
 800a118:	6125      	str	r5, [r4, #16]
 800a11a:	4620      	mov	r0, r4
 800a11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a120:	0800c9df 	.word	0x0800c9df
 800a124:	0800c9f0 	.word	0x0800c9f0

0800a128 <__s2b>:
 800a128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a12c:	4615      	mov	r5, r2
 800a12e:	2209      	movs	r2, #9
 800a130:	461f      	mov	r7, r3
 800a132:	3308      	adds	r3, #8
 800a134:	460c      	mov	r4, r1
 800a136:	fb93 f3f2 	sdiv	r3, r3, r2
 800a13a:	4606      	mov	r6, r0
 800a13c:	2201      	movs	r2, #1
 800a13e:	2100      	movs	r1, #0
 800a140:	429a      	cmp	r2, r3
 800a142:	db09      	blt.n	800a158 <__s2b+0x30>
 800a144:	4630      	mov	r0, r6
 800a146:	f7ff ff47 	bl	8009fd8 <_Balloc>
 800a14a:	b940      	cbnz	r0, 800a15e <__s2b+0x36>
 800a14c:	4602      	mov	r2, r0
 800a14e:	21d3      	movs	r1, #211	; 0xd3
 800a150:	4b18      	ldr	r3, [pc, #96]	; (800a1b4 <__s2b+0x8c>)
 800a152:	4819      	ldr	r0, [pc, #100]	; (800a1b8 <__s2b+0x90>)
 800a154:	f001 fe96 	bl	800be84 <__assert_func>
 800a158:	0052      	lsls	r2, r2, #1
 800a15a:	3101      	adds	r1, #1
 800a15c:	e7f0      	b.n	800a140 <__s2b+0x18>
 800a15e:	9b08      	ldr	r3, [sp, #32]
 800a160:	2d09      	cmp	r5, #9
 800a162:	6143      	str	r3, [r0, #20]
 800a164:	f04f 0301 	mov.w	r3, #1
 800a168:	6103      	str	r3, [r0, #16]
 800a16a:	dd16      	ble.n	800a19a <__s2b+0x72>
 800a16c:	f104 0909 	add.w	r9, r4, #9
 800a170:	46c8      	mov	r8, r9
 800a172:	442c      	add	r4, r5
 800a174:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a178:	4601      	mov	r1, r0
 800a17a:	220a      	movs	r2, #10
 800a17c:	4630      	mov	r0, r6
 800a17e:	3b30      	subs	r3, #48	; 0x30
 800a180:	f7ff ff8c 	bl	800a09c <__multadd>
 800a184:	45a0      	cmp	r8, r4
 800a186:	d1f5      	bne.n	800a174 <__s2b+0x4c>
 800a188:	f1a5 0408 	sub.w	r4, r5, #8
 800a18c:	444c      	add	r4, r9
 800a18e:	1b2d      	subs	r5, r5, r4
 800a190:	1963      	adds	r3, r4, r5
 800a192:	42bb      	cmp	r3, r7
 800a194:	db04      	blt.n	800a1a0 <__s2b+0x78>
 800a196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19a:	2509      	movs	r5, #9
 800a19c:	340a      	adds	r4, #10
 800a19e:	e7f6      	b.n	800a18e <__s2b+0x66>
 800a1a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1a4:	4601      	mov	r1, r0
 800a1a6:	220a      	movs	r2, #10
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	3b30      	subs	r3, #48	; 0x30
 800a1ac:	f7ff ff76 	bl	800a09c <__multadd>
 800a1b0:	e7ee      	b.n	800a190 <__s2b+0x68>
 800a1b2:	bf00      	nop
 800a1b4:	0800c9df 	.word	0x0800c9df
 800a1b8:	0800c9f0 	.word	0x0800c9f0

0800a1bc <__hi0bits>:
 800a1bc:	0c02      	lsrs	r2, r0, #16
 800a1be:	0412      	lsls	r2, r2, #16
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	b9ca      	cbnz	r2, 800a1f8 <__hi0bits+0x3c>
 800a1c4:	0403      	lsls	r3, r0, #16
 800a1c6:	2010      	movs	r0, #16
 800a1c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a1cc:	bf04      	itt	eq
 800a1ce:	021b      	lsleq	r3, r3, #8
 800a1d0:	3008      	addeq	r0, #8
 800a1d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a1d6:	bf04      	itt	eq
 800a1d8:	011b      	lsleq	r3, r3, #4
 800a1da:	3004      	addeq	r0, #4
 800a1dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a1e0:	bf04      	itt	eq
 800a1e2:	009b      	lsleq	r3, r3, #2
 800a1e4:	3002      	addeq	r0, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	db05      	blt.n	800a1f6 <__hi0bits+0x3a>
 800a1ea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a1ee:	f100 0001 	add.w	r0, r0, #1
 800a1f2:	bf08      	it	eq
 800a1f4:	2020      	moveq	r0, #32
 800a1f6:	4770      	bx	lr
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	e7e5      	b.n	800a1c8 <__hi0bits+0xc>

0800a1fc <__lo0bits>:
 800a1fc:	6803      	ldr	r3, [r0, #0]
 800a1fe:	4602      	mov	r2, r0
 800a200:	f013 0007 	ands.w	r0, r3, #7
 800a204:	d00b      	beq.n	800a21e <__lo0bits+0x22>
 800a206:	07d9      	lsls	r1, r3, #31
 800a208:	d421      	bmi.n	800a24e <__lo0bits+0x52>
 800a20a:	0798      	lsls	r0, r3, #30
 800a20c:	bf49      	itett	mi
 800a20e:	085b      	lsrmi	r3, r3, #1
 800a210:	089b      	lsrpl	r3, r3, #2
 800a212:	2001      	movmi	r0, #1
 800a214:	6013      	strmi	r3, [r2, #0]
 800a216:	bf5c      	itt	pl
 800a218:	2002      	movpl	r0, #2
 800a21a:	6013      	strpl	r3, [r2, #0]
 800a21c:	4770      	bx	lr
 800a21e:	b299      	uxth	r1, r3
 800a220:	b909      	cbnz	r1, 800a226 <__lo0bits+0x2a>
 800a222:	2010      	movs	r0, #16
 800a224:	0c1b      	lsrs	r3, r3, #16
 800a226:	b2d9      	uxtb	r1, r3
 800a228:	b909      	cbnz	r1, 800a22e <__lo0bits+0x32>
 800a22a:	3008      	adds	r0, #8
 800a22c:	0a1b      	lsrs	r3, r3, #8
 800a22e:	0719      	lsls	r1, r3, #28
 800a230:	bf04      	itt	eq
 800a232:	091b      	lsreq	r3, r3, #4
 800a234:	3004      	addeq	r0, #4
 800a236:	0799      	lsls	r1, r3, #30
 800a238:	bf04      	itt	eq
 800a23a:	089b      	lsreq	r3, r3, #2
 800a23c:	3002      	addeq	r0, #2
 800a23e:	07d9      	lsls	r1, r3, #31
 800a240:	d403      	bmi.n	800a24a <__lo0bits+0x4e>
 800a242:	085b      	lsrs	r3, r3, #1
 800a244:	f100 0001 	add.w	r0, r0, #1
 800a248:	d003      	beq.n	800a252 <__lo0bits+0x56>
 800a24a:	6013      	str	r3, [r2, #0]
 800a24c:	4770      	bx	lr
 800a24e:	2000      	movs	r0, #0
 800a250:	4770      	bx	lr
 800a252:	2020      	movs	r0, #32
 800a254:	4770      	bx	lr
	...

0800a258 <__i2b>:
 800a258:	b510      	push	{r4, lr}
 800a25a:	460c      	mov	r4, r1
 800a25c:	2101      	movs	r1, #1
 800a25e:	f7ff febb 	bl	8009fd8 <_Balloc>
 800a262:	4602      	mov	r2, r0
 800a264:	b928      	cbnz	r0, 800a272 <__i2b+0x1a>
 800a266:	f240 1145 	movw	r1, #325	; 0x145
 800a26a:	4b04      	ldr	r3, [pc, #16]	; (800a27c <__i2b+0x24>)
 800a26c:	4804      	ldr	r0, [pc, #16]	; (800a280 <__i2b+0x28>)
 800a26e:	f001 fe09 	bl	800be84 <__assert_func>
 800a272:	2301      	movs	r3, #1
 800a274:	6144      	str	r4, [r0, #20]
 800a276:	6103      	str	r3, [r0, #16]
 800a278:	bd10      	pop	{r4, pc}
 800a27a:	bf00      	nop
 800a27c:	0800c9df 	.word	0x0800c9df
 800a280:	0800c9f0 	.word	0x0800c9f0

0800a284 <__multiply>:
 800a284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a288:	4691      	mov	r9, r2
 800a28a:	690a      	ldr	r2, [r1, #16]
 800a28c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a290:	460c      	mov	r4, r1
 800a292:	429a      	cmp	r2, r3
 800a294:	bfbe      	ittt	lt
 800a296:	460b      	movlt	r3, r1
 800a298:	464c      	movlt	r4, r9
 800a29a:	4699      	movlt	r9, r3
 800a29c:	6927      	ldr	r7, [r4, #16]
 800a29e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2a2:	68a3      	ldr	r3, [r4, #8]
 800a2a4:	6861      	ldr	r1, [r4, #4]
 800a2a6:	eb07 060a 	add.w	r6, r7, sl
 800a2aa:	42b3      	cmp	r3, r6
 800a2ac:	b085      	sub	sp, #20
 800a2ae:	bfb8      	it	lt
 800a2b0:	3101      	addlt	r1, #1
 800a2b2:	f7ff fe91 	bl	8009fd8 <_Balloc>
 800a2b6:	b930      	cbnz	r0, 800a2c6 <__multiply+0x42>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a2be:	4b43      	ldr	r3, [pc, #268]	; (800a3cc <__multiply+0x148>)
 800a2c0:	4843      	ldr	r0, [pc, #268]	; (800a3d0 <__multiply+0x14c>)
 800a2c2:	f001 fddf 	bl	800be84 <__assert_func>
 800a2c6:	f100 0514 	add.w	r5, r0, #20
 800a2ca:	462b      	mov	r3, r5
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2d2:	4543      	cmp	r3, r8
 800a2d4:	d321      	bcc.n	800a31a <__multiply+0x96>
 800a2d6:	f104 0314 	add.w	r3, r4, #20
 800a2da:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a2de:	f109 0314 	add.w	r3, r9, #20
 800a2e2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a2e6:	9202      	str	r2, [sp, #8]
 800a2e8:	1b3a      	subs	r2, r7, r4
 800a2ea:	3a15      	subs	r2, #21
 800a2ec:	f022 0203 	bic.w	r2, r2, #3
 800a2f0:	3204      	adds	r2, #4
 800a2f2:	f104 0115 	add.w	r1, r4, #21
 800a2f6:	428f      	cmp	r7, r1
 800a2f8:	bf38      	it	cc
 800a2fa:	2204      	movcc	r2, #4
 800a2fc:	9201      	str	r2, [sp, #4]
 800a2fe:	9a02      	ldr	r2, [sp, #8]
 800a300:	9303      	str	r3, [sp, #12]
 800a302:	429a      	cmp	r2, r3
 800a304:	d80c      	bhi.n	800a320 <__multiply+0x9c>
 800a306:	2e00      	cmp	r6, #0
 800a308:	dd03      	ble.n	800a312 <__multiply+0x8e>
 800a30a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d05a      	beq.n	800a3c8 <__multiply+0x144>
 800a312:	6106      	str	r6, [r0, #16]
 800a314:	b005      	add	sp, #20
 800a316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31a:	f843 2b04 	str.w	r2, [r3], #4
 800a31e:	e7d8      	b.n	800a2d2 <__multiply+0x4e>
 800a320:	f8b3 a000 	ldrh.w	sl, [r3]
 800a324:	f1ba 0f00 	cmp.w	sl, #0
 800a328:	d023      	beq.n	800a372 <__multiply+0xee>
 800a32a:	46a9      	mov	r9, r5
 800a32c:	f04f 0c00 	mov.w	ip, #0
 800a330:	f104 0e14 	add.w	lr, r4, #20
 800a334:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a338:	f8d9 1000 	ldr.w	r1, [r9]
 800a33c:	fa1f fb82 	uxth.w	fp, r2
 800a340:	b289      	uxth	r1, r1
 800a342:	fb0a 110b 	mla	r1, sl, fp, r1
 800a346:	4461      	add	r1, ip
 800a348:	f8d9 c000 	ldr.w	ip, [r9]
 800a34c:	0c12      	lsrs	r2, r2, #16
 800a34e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a352:	fb0a c202 	mla	r2, sl, r2, ip
 800a356:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a35a:	b289      	uxth	r1, r1
 800a35c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a360:	4577      	cmp	r7, lr
 800a362:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a366:	f849 1b04 	str.w	r1, [r9], #4
 800a36a:	d8e3      	bhi.n	800a334 <__multiply+0xb0>
 800a36c:	9a01      	ldr	r2, [sp, #4]
 800a36e:	f845 c002 	str.w	ip, [r5, r2]
 800a372:	9a03      	ldr	r2, [sp, #12]
 800a374:	3304      	adds	r3, #4
 800a376:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a37a:	f1b9 0f00 	cmp.w	r9, #0
 800a37e:	d021      	beq.n	800a3c4 <__multiply+0x140>
 800a380:	46ae      	mov	lr, r5
 800a382:	f04f 0a00 	mov.w	sl, #0
 800a386:	6829      	ldr	r1, [r5, #0]
 800a388:	f104 0c14 	add.w	ip, r4, #20
 800a38c:	f8bc b000 	ldrh.w	fp, [ip]
 800a390:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a394:	b289      	uxth	r1, r1
 800a396:	fb09 220b 	mla	r2, r9, fp, r2
 800a39a:	4452      	add	r2, sl
 800a39c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3a0:	f84e 1b04 	str.w	r1, [lr], #4
 800a3a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a3a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3ac:	f8be 1000 	ldrh.w	r1, [lr]
 800a3b0:	4567      	cmp	r7, ip
 800a3b2:	fb09 110a 	mla	r1, r9, sl, r1
 800a3b6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a3ba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3be:	d8e5      	bhi.n	800a38c <__multiply+0x108>
 800a3c0:	9a01      	ldr	r2, [sp, #4]
 800a3c2:	50a9      	str	r1, [r5, r2]
 800a3c4:	3504      	adds	r5, #4
 800a3c6:	e79a      	b.n	800a2fe <__multiply+0x7a>
 800a3c8:	3e01      	subs	r6, #1
 800a3ca:	e79c      	b.n	800a306 <__multiply+0x82>
 800a3cc:	0800c9df 	.word	0x0800c9df
 800a3d0:	0800c9f0 	.word	0x0800c9f0

0800a3d4 <__pow5mult>:
 800a3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d8:	4615      	mov	r5, r2
 800a3da:	f012 0203 	ands.w	r2, r2, #3
 800a3de:	4606      	mov	r6, r0
 800a3e0:	460f      	mov	r7, r1
 800a3e2:	d007      	beq.n	800a3f4 <__pow5mult+0x20>
 800a3e4:	4c25      	ldr	r4, [pc, #148]	; (800a47c <__pow5mult+0xa8>)
 800a3e6:	3a01      	subs	r2, #1
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3ee:	f7ff fe55 	bl	800a09c <__multadd>
 800a3f2:	4607      	mov	r7, r0
 800a3f4:	10ad      	asrs	r5, r5, #2
 800a3f6:	d03d      	beq.n	800a474 <__pow5mult+0xa0>
 800a3f8:	69f4      	ldr	r4, [r6, #28]
 800a3fa:	b97c      	cbnz	r4, 800a41c <__pow5mult+0x48>
 800a3fc:	2010      	movs	r0, #16
 800a3fe:	f7ff fd37 	bl	8009e70 <malloc>
 800a402:	4602      	mov	r2, r0
 800a404:	61f0      	str	r0, [r6, #28]
 800a406:	b928      	cbnz	r0, 800a414 <__pow5mult+0x40>
 800a408:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a40c:	4b1c      	ldr	r3, [pc, #112]	; (800a480 <__pow5mult+0xac>)
 800a40e:	481d      	ldr	r0, [pc, #116]	; (800a484 <__pow5mult+0xb0>)
 800a410:	f001 fd38 	bl	800be84 <__assert_func>
 800a414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a418:	6004      	str	r4, [r0, #0]
 800a41a:	60c4      	str	r4, [r0, #12]
 800a41c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a424:	b94c      	cbnz	r4, 800a43a <__pow5mult+0x66>
 800a426:	f240 2171 	movw	r1, #625	; 0x271
 800a42a:	4630      	mov	r0, r6
 800a42c:	f7ff ff14 	bl	800a258 <__i2b>
 800a430:	2300      	movs	r3, #0
 800a432:	4604      	mov	r4, r0
 800a434:	f8c8 0008 	str.w	r0, [r8, #8]
 800a438:	6003      	str	r3, [r0, #0]
 800a43a:	f04f 0900 	mov.w	r9, #0
 800a43e:	07eb      	lsls	r3, r5, #31
 800a440:	d50a      	bpl.n	800a458 <__pow5mult+0x84>
 800a442:	4639      	mov	r1, r7
 800a444:	4622      	mov	r2, r4
 800a446:	4630      	mov	r0, r6
 800a448:	f7ff ff1c 	bl	800a284 <__multiply>
 800a44c:	4680      	mov	r8, r0
 800a44e:	4639      	mov	r1, r7
 800a450:	4630      	mov	r0, r6
 800a452:	f7ff fe01 	bl	800a058 <_Bfree>
 800a456:	4647      	mov	r7, r8
 800a458:	106d      	asrs	r5, r5, #1
 800a45a:	d00b      	beq.n	800a474 <__pow5mult+0xa0>
 800a45c:	6820      	ldr	r0, [r4, #0]
 800a45e:	b938      	cbnz	r0, 800a470 <__pow5mult+0x9c>
 800a460:	4622      	mov	r2, r4
 800a462:	4621      	mov	r1, r4
 800a464:	4630      	mov	r0, r6
 800a466:	f7ff ff0d 	bl	800a284 <__multiply>
 800a46a:	6020      	str	r0, [r4, #0]
 800a46c:	f8c0 9000 	str.w	r9, [r0]
 800a470:	4604      	mov	r4, r0
 800a472:	e7e4      	b.n	800a43e <__pow5mult+0x6a>
 800a474:	4638      	mov	r0, r7
 800a476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a47a:	bf00      	nop
 800a47c:	0800cb40 	.word	0x0800cb40
 800a480:	0800c970 	.word	0x0800c970
 800a484:	0800c9f0 	.word	0x0800c9f0

0800a488 <__lshift>:
 800a488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a48c:	460c      	mov	r4, r1
 800a48e:	4607      	mov	r7, r0
 800a490:	4691      	mov	r9, r2
 800a492:	6923      	ldr	r3, [r4, #16]
 800a494:	6849      	ldr	r1, [r1, #4]
 800a496:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a49a:	68a3      	ldr	r3, [r4, #8]
 800a49c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4a0:	f108 0601 	add.w	r6, r8, #1
 800a4a4:	42b3      	cmp	r3, r6
 800a4a6:	db0b      	blt.n	800a4c0 <__lshift+0x38>
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f7ff fd95 	bl	8009fd8 <_Balloc>
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	b948      	cbnz	r0, 800a4c6 <__lshift+0x3e>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a4b8:	4b27      	ldr	r3, [pc, #156]	; (800a558 <__lshift+0xd0>)
 800a4ba:	4828      	ldr	r0, [pc, #160]	; (800a55c <__lshift+0xd4>)
 800a4bc:	f001 fce2 	bl	800be84 <__assert_func>
 800a4c0:	3101      	adds	r1, #1
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	e7ee      	b.n	800a4a4 <__lshift+0x1c>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f100 0114 	add.w	r1, r0, #20
 800a4cc:	f100 0210 	add.w	r2, r0, #16
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	4553      	cmp	r3, sl
 800a4d4:	db33      	blt.n	800a53e <__lshift+0xb6>
 800a4d6:	6920      	ldr	r0, [r4, #16]
 800a4d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4dc:	f104 0314 	add.w	r3, r4, #20
 800a4e0:	f019 091f 	ands.w	r9, r9, #31
 800a4e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4ec:	d02b      	beq.n	800a546 <__lshift+0xbe>
 800a4ee:	468a      	mov	sl, r1
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f1c9 0e20 	rsb	lr, r9, #32
 800a4f6:	6818      	ldr	r0, [r3, #0]
 800a4f8:	fa00 f009 	lsl.w	r0, r0, r9
 800a4fc:	4310      	orrs	r0, r2
 800a4fe:	f84a 0b04 	str.w	r0, [sl], #4
 800a502:	f853 2b04 	ldr.w	r2, [r3], #4
 800a506:	459c      	cmp	ip, r3
 800a508:	fa22 f20e 	lsr.w	r2, r2, lr
 800a50c:	d8f3      	bhi.n	800a4f6 <__lshift+0x6e>
 800a50e:	ebac 0304 	sub.w	r3, ip, r4
 800a512:	3b15      	subs	r3, #21
 800a514:	f023 0303 	bic.w	r3, r3, #3
 800a518:	3304      	adds	r3, #4
 800a51a:	f104 0015 	add.w	r0, r4, #21
 800a51e:	4584      	cmp	ip, r0
 800a520:	bf38      	it	cc
 800a522:	2304      	movcc	r3, #4
 800a524:	50ca      	str	r2, [r1, r3]
 800a526:	b10a      	cbz	r2, 800a52c <__lshift+0xa4>
 800a528:	f108 0602 	add.w	r6, r8, #2
 800a52c:	3e01      	subs	r6, #1
 800a52e:	4638      	mov	r0, r7
 800a530:	4621      	mov	r1, r4
 800a532:	612e      	str	r6, [r5, #16]
 800a534:	f7ff fd90 	bl	800a058 <_Bfree>
 800a538:	4628      	mov	r0, r5
 800a53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a542:	3301      	adds	r3, #1
 800a544:	e7c5      	b.n	800a4d2 <__lshift+0x4a>
 800a546:	3904      	subs	r1, #4
 800a548:	f853 2b04 	ldr.w	r2, [r3], #4
 800a54c:	459c      	cmp	ip, r3
 800a54e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a552:	d8f9      	bhi.n	800a548 <__lshift+0xc0>
 800a554:	e7ea      	b.n	800a52c <__lshift+0xa4>
 800a556:	bf00      	nop
 800a558:	0800c9df 	.word	0x0800c9df
 800a55c:	0800c9f0 	.word	0x0800c9f0

0800a560 <__mcmp>:
 800a560:	4603      	mov	r3, r0
 800a562:	690a      	ldr	r2, [r1, #16]
 800a564:	6900      	ldr	r0, [r0, #16]
 800a566:	b530      	push	{r4, r5, lr}
 800a568:	1a80      	subs	r0, r0, r2
 800a56a:	d10d      	bne.n	800a588 <__mcmp+0x28>
 800a56c:	3314      	adds	r3, #20
 800a56e:	3114      	adds	r1, #20
 800a570:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a574:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a578:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a57c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a580:	4295      	cmp	r5, r2
 800a582:	d002      	beq.n	800a58a <__mcmp+0x2a>
 800a584:	d304      	bcc.n	800a590 <__mcmp+0x30>
 800a586:	2001      	movs	r0, #1
 800a588:	bd30      	pop	{r4, r5, pc}
 800a58a:	42a3      	cmp	r3, r4
 800a58c:	d3f4      	bcc.n	800a578 <__mcmp+0x18>
 800a58e:	e7fb      	b.n	800a588 <__mcmp+0x28>
 800a590:	f04f 30ff 	mov.w	r0, #4294967295
 800a594:	e7f8      	b.n	800a588 <__mcmp+0x28>
	...

0800a598 <__mdiff>:
 800a598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	460d      	mov	r5, r1
 800a59e:	4607      	mov	r7, r0
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	4614      	mov	r4, r2
 800a5a6:	f7ff ffdb 	bl	800a560 <__mcmp>
 800a5aa:	1e06      	subs	r6, r0, #0
 800a5ac:	d111      	bne.n	800a5d2 <__mdiff+0x3a>
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	f7ff fd11 	bl	8009fd8 <_Balloc>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	b928      	cbnz	r0, 800a5c6 <__mdiff+0x2e>
 800a5ba:	f240 2137 	movw	r1, #567	; 0x237
 800a5be:	4b3a      	ldr	r3, [pc, #232]	; (800a6a8 <__mdiff+0x110>)
 800a5c0:	483a      	ldr	r0, [pc, #232]	; (800a6ac <__mdiff+0x114>)
 800a5c2:	f001 fc5f 	bl	800be84 <__assert_func>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d2:	bfa4      	itt	ge
 800a5d4:	4623      	movge	r3, r4
 800a5d6:	462c      	movge	r4, r5
 800a5d8:	4638      	mov	r0, r7
 800a5da:	6861      	ldr	r1, [r4, #4]
 800a5dc:	bfa6      	itte	ge
 800a5de:	461d      	movge	r5, r3
 800a5e0:	2600      	movge	r6, #0
 800a5e2:	2601      	movlt	r6, #1
 800a5e4:	f7ff fcf8 	bl	8009fd8 <_Balloc>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	b918      	cbnz	r0, 800a5f4 <__mdiff+0x5c>
 800a5ec:	f240 2145 	movw	r1, #581	; 0x245
 800a5f0:	4b2d      	ldr	r3, [pc, #180]	; (800a6a8 <__mdiff+0x110>)
 800a5f2:	e7e5      	b.n	800a5c0 <__mdiff+0x28>
 800a5f4:	f102 0814 	add.w	r8, r2, #20
 800a5f8:	46c2      	mov	sl, r8
 800a5fa:	f04f 0c00 	mov.w	ip, #0
 800a5fe:	6927      	ldr	r7, [r4, #16]
 800a600:	60c6      	str	r6, [r0, #12]
 800a602:	692e      	ldr	r6, [r5, #16]
 800a604:	f104 0014 	add.w	r0, r4, #20
 800a608:	f105 0914 	add.w	r9, r5, #20
 800a60c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a610:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a614:	3410      	adds	r4, #16
 800a616:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a61a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a61e:	fa1f f18b 	uxth.w	r1, fp
 800a622:	4461      	add	r1, ip
 800a624:	fa1f fc83 	uxth.w	ip, r3
 800a628:	0c1b      	lsrs	r3, r3, #16
 800a62a:	eba1 010c 	sub.w	r1, r1, ip
 800a62e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a632:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a636:	b289      	uxth	r1, r1
 800a638:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a63c:	454e      	cmp	r6, r9
 800a63e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a642:	f84a 1b04 	str.w	r1, [sl], #4
 800a646:	d8e6      	bhi.n	800a616 <__mdiff+0x7e>
 800a648:	1b73      	subs	r3, r6, r5
 800a64a:	3b15      	subs	r3, #21
 800a64c:	f023 0303 	bic.w	r3, r3, #3
 800a650:	3515      	adds	r5, #21
 800a652:	3304      	adds	r3, #4
 800a654:	42ae      	cmp	r6, r5
 800a656:	bf38      	it	cc
 800a658:	2304      	movcc	r3, #4
 800a65a:	4418      	add	r0, r3
 800a65c:	4443      	add	r3, r8
 800a65e:	461e      	mov	r6, r3
 800a660:	4605      	mov	r5, r0
 800a662:	4575      	cmp	r5, lr
 800a664:	d30e      	bcc.n	800a684 <__mdiff+0xec>
 800a666:	f10e 0103 	add.w	r1, lr, #3
 800a66a:	1a09      	subs	r1, r1, r0
 800a66c:	f021 0103 	bic.w	r1, r1, #3
 800a670:	3803      	subs	r0, #3
 800a672:	4586      	cmp	lr, r0
 800a674:	bf38      	it	cc
 800a676:	2100      	movcc	r1, #0
 800a678:	440b      	add	r3, r1
 800a67a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a67e:	b189      	cbz	r1, 800a6a4 <__mdiff+0x10c>
 800a680:	6117      	str	r7, [r2, #16]
 800a682:	e7a3      	b.n	800a5cc <__mdiff+0x34>
 800a684:	f855 8b04 	ldr.w	r8, [r5], #4
 800a688:	fa1f f188 	uxth.w	r1, r8
 800a68c:	4461      	add	r1, ip
 800a68e:	140c      	asrs	r4, r1, #16
 800a690:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a694:	b289      	uxth	r1, r1
 800a696:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a69a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a69e:	f846 1b04 	str.w	r1, [r6], #4
 800a6a2:	e7de      	b.n	800a662 <__mdiff+0xca>
 800a6a4:	3f01      	subs	r7, #1
 800a6a6:	e7e8      	b.n	800a67a <__mdiff+0xe2>
 800a6a8:	0800c9df 	.word	0x0800c9df
 800a6ac:	0800c9f0 	.word	0x0800c9f0

0800a6b0 <__ulp>:
 800a6b0:	4b0e      	ldr	r3, [pc, #56]	; (800a6ec <__ulp+0x3c>)
 800a6b2:	400b      	ands	r3, r1
 800a6b4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	dc08      	bgt.n	800a6ce <__ulp+0x1e>
 800a6bc:	425b      	negs	r3, r3
 800a6be:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a6c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6c6:	da04      	bge.n	800a6d2 <__ulp+0x22>
 800a6c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a6cc:	4113      	asrs	r3, r2
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	e008      	b.n	800a6e4 <__ulp+0x34>
 800a6d2:	f1a2 0314 	sub.w	r3, r2, #20
 800a6d6:	2b1e      	cmp	r3, #30
 800a6d8:	bfd6      	itet	le
 800a6da:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a6de:	2201      	movgt	r2, #1
 800a6e0:	40da      	lsrle	r2, r3
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	7ff00000 	.word	0x7ff00000

0800a6f0 <__b2d>:
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f2:	6905      	ldr	r5, [r0, #16]
 800a6f4:	f100 0714 	add.w	r7, r0, #20
 800a6f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a6fc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a700:	1f2e      	subs	r6, r5, #4
 800a702:	4620      	mov	r0, r4
 800a704:	f7ff fd5a 	bl	800a1bc <__hi0bits>
 800a708:	f1c0 0220 	rsb	r2, r0, #32
 800a70c:	280a      	cmp	r0, #10
 800a70e:	4603      	mov	r3, r0
 800a710:	f8df c068 	ldr.w	ip, [pc, #104]	; 800a77c <__b2d+0x8c>
 800a714:	600a      	str	r2, [r1, #0]
 800a716:	dc12      	bgt.n	800a73e <__b2d+0x4e>
 800a718:	f1c0 0e0b 	rsb	lr, r0, #11
 800a71c:	fa24 f20e 	lsr.w	r2, r4, lr
 800a720:	42b7      	cmp	r7, r6
 800a722:	ea42 010c 	orr.w	r1, r2, ip
 800a726:	bf2c      	ite	cs
 800a728:	2200      	movcs	r2, #0
 800a72a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a72e:	3315      	adds	r3, #21
 800a730:	fa04 f303 	lsl.w	r3, r4, r3
 800a734:	fa22 f20e 	lsr.w	r2, r2, lr
 800a738:	431a      	orrs	r2, r3
 800a73a:	4610      	mov	r0, r2
 800a73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a73e:	42b7      	cmp	r7, r6
 800a740:	bf2e      	itee	cs
 800a742:	2200      	movcs	r2, #0
 800a744:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a748:	f1a5 0608 	subcc.w	r6, r5, #8
 800a74c:	3b0b      	subs	r3, #11
 800a74e:	d012      	beq.n	800a776 <__b2d+0x86>
 800a750:	f1c3 0520 	rsb	r5, r3, #32
 800a754:	fa22 f105 	lsr.w	r1, r2, r5
 800a758:	409c      	lsls	r4, r3
 800a75a:	430c      	orrs	r4, r1
 800a75c:	42be      	cmp	r6, r7
 800a75e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800a762:	bf94      	ite	ls
 800a764:	2400      	movls	r4, #0
 800a766:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a76a:	409a      	lsls	r2, r3
 800a76c:	40ec      	lsrs	r4, r5
 800a76e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a772:	4322      	orrs	r2, r4
 800a774:	e7e1      	b.n	800a73a <__b2d+0x4a>
 800a776:	ea44 010c 	orr.w	r1, r4, ip
 800a77a:	e7de      	b.n	800a73a <__b2d+0x4a>
 800a77c:	3ff00000 	.word	0x3ff00000

0800a780 <__d2b>:
 800a780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a782:	2101      	movs	r1, #1
 800a784:	4617      	mov	r7, r2
 800a786:	461c      	mov	r4, r3
 800a788:	9e08      	ldr	r6, [sp, #32]
 800a78a:	f7ff fc25 	bl	8009fd8 <_Balloc>
 800a78e:	4605      	mov	r5, r0
 800a790:	b930      	cbnz	r0, 800a7a0 <__d2b+0x20>
 800a792:	4602      	mov	r2, r0
 800a794:	f240 310f 	movw	r1, #783	; 0x30f
 800a798:	4b22      	ldr	r3, [pc, #136]	; (800a824 <__d2b+0xa4>)
 800a79a:	4823      	ldr	r0, [pc, #140]	; (800a828 <__d2b+0xa8>)
 800a79c:	f001 fb72 	bl	800be84 <__assert_func>
 800a7a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a7a4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a7a8:	bb24      	cbnz	r4, 800a7f4 <__d2b+0x74>
 800a7aa:	2f00      	cmp	r7, #0
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	d026      	beq.n	800a7fe <__d2b+0x7e>
 800a7b0:	4668      	mov	r0, sp
 800a7b2:	9700      	str	r7, [sp, #0]
 800a7b4:	f7ff fd22 	bl	800a1fc <__lo0bits>
 800a7b8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7bc:	b1e8      	cbz	r0, 800a7fa <__d2b+0x7a>
 800a7be:	f1c0 0320 	rsb	r3, r0, #32
 800a7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c6:	430b      	orrs	r3, r1
 800a7c8:	40c2      	lsrs	r2, r0
 800a7ca:	616b      	str	r3, [r5, #20]
 800a7cc:	9201      	str	r2, [sp, #4]
 800a7ce:	9b01      	ldr	r3, [sp, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bf14      	ite	ne
 800a7d4:	2102      	movne	r1, #2
 800a7d6:	2101      	moveq	r1, #1
 800a7d8:	61ab      	str	r3, [r5, #24]
 800a7da:	6129      	str	r1, [r5, #16]
 800a7dc:	b1bc      	cbz	r4, 800a80e <__d2b+0x8e>
 800a7de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a7e2:	4404      	add	r4, r0
 800a7e4:	6034      	str	r4, [r6, #0]
 800a7e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ec:	6018      	str	r0, [r3, #0]
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	b003      	add	sp, #12
 800a7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7f8:	e7d7      	b.n	800a7aa <__d2b+0x2a>
 800a7fa:	6169      	str	r1, [r5, #20]
 800a7fc:	e7e7      	b.n	800a7ce <__d2b+0x4e>
 800a7fe:	a801      	add	r0, sp, #4
 800a800:	f7ff fcfc 	bl	800a1fc <__lo0bits>
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	2101      	movs	r1, #1
 800a808:	616b      	str	r3, [r5, #20]
 800a80a:	3020      	adds	r0, #32
 800a80c:	e7e5      	b.n	800a7da <__d2b+0x5a>
 800a80e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a812:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a816:	6030      	str	r0, [r6, #0]
 800a818:	6918      	ldr	r0, [r3, #16]
 800a81a:	f7ff fccf 	bl	800a1bc <__hi0bits>
 800a81e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a822:	e7e2      	b.n	800a7ea <__d2b+0x6a>
 800a824:	0800c9df 	.word	0x0800c9df
 800a828:	0800c9f0 	.word	0x0800c9f0

0800a82c <__ratio>:
 800a82c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a830:	4688      	mov	r8, r1
 800a832:	4669      	mov	r1, sp
 800a834:	4681      	mov	r9, r0
 800a836:	f7ff ff5b 	bl	800a6f0 <__b2d>
 800a83a:	460f      	mov	r7, r1
 800a83c:	4604      	mov	r4, r0
 800a83e:	460d      	mov	r5, r1
 800a840:	4640      	mov	r0, r8
 800a842:	a901      	add	r1, sp, #4
 800a844:	f7ff ff54 	bl	800a6f0 <__b2d>
 800a848:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a84c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a850:	468b      	mov	fp, r1
 800a852:	eba3 0c02 	sub.w	ip, r3, r2
 800a856:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a85a:	1a9b      	subs	r3, r3, r2
 800a85c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a860:	2b00      	cmp	r3, #0
 800a862:	bfd5      	itete	le
 800a864:	460a      	movle	r2, r1
 800a866:	462a      	movgt	r2, r5
 800a868:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a86c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a870:	bfd8      	it	le
 800a872:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a876:	465b      	mov	r3, fp
 800a878:	4602      	mov	r2, r0
 800a87a:	4639      	mov	r1, r7
 800a87c:	4620      	mov	r0, r4
 800a87e:	f7f5 ff55 	bl	800072c <__aeabi_ddiv>
 800a882:	b003      	add	sp, #12
 800a884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a888 <__copybits>:
 800a888:	3901      	subs	r1, #1
 800a88a:	b570      	push	{r4, r5, r6, lr}
 800a88c:	1149      	asrs	r1, r1, #5
 800a88e:	6914      	ldr	r4, [r2, #16]
 800a890:	3101      	adds	r1, #1
 800a892:	f102 0314 	add.w	r3, r2, #20
 800a896:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a89a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a89e:	1f05      	subs	r5, r0, #4
 800a8a0:	42a3      	cmp	r3, r4
 800a8a2:	d30c      	bcc.n	800a8be <__copybits+0x36>
 800a8a4:	1aa3      	subs	r3, r4, r2
 800a8a6:	3b11      	subs	r3, #17
 800a8a8:	f023 0303 	bic.w	r3, r3, #3
 800a8ac:	3211      	adds	r2, #17
 800a8ae:	42a2      	cmp	r2, r4
 800a8b0:	bf88      	it	hi
 800a8b2:	2300      	movhi	r3, #0
 800a8b4:	4418      	add	r0, r3
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	4288      	cmp	r0, r1
 800a8ba:	d305      	bcc.n	800a8c8 <__copybits+0x40>
 800a8bc:	bd70      	pop	{r4, r5, r6, pc}
 800a8be:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8c2:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8c6:	e7eb      	b.n	800a8a0 <__copybits+0x18>
 800a8c8:	f840 3b04 	str.w	r3, [r0], #4
 800a8cc:	e7f4      	b.n	800a8b8 <__copybits+0x30>

0800a8ce <__any_on>:
 800a8ce:	f100 0214 	add.w	r2, r0, #20
 800a8d2:	6900      	ldr	r0, [r0, #16]
 800a8d4:	114b      	asrs	r3, r1, #5
 800a8d6:	4298      	cmp	r0, r3
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	db11      	blt.n	800a900 <__any_on+0x32>
 800a8dc:	dd0a      	ble.n	800a8f4 <__any_on+0x26>
 800a8de:	f011 011f 	ands.w	r1, r1, #31
 800a8e2:	d007      	beq.n	800a8f4 <__any_on+0x26>
 800a8e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8e8:	fa24 f001 	lsr.w	r0, r4, r1
 800a8ec:	fa00 f101 	lsl.w	r1, r0, r1
 800a8f0:	428c      	cmp	r4, r1
 800a8f2:	d10b      	bne.n	800a90c <__any_on+0x3e>
 800a8f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d803      	bhi.n	800a904 <__any_on+0x36>
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	bd10      	pop	{r4, pc}
 800a900:	4603      	mov	r3, r0
 800a902:	e7f7      	b.n	800a8f4 <__any_on+0x26>
 800a904:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a908:	2900      	cmp	r1, #0
 800a90a:	d0f5      	beq.n	800a8f8 <__any_on+0x2a>
 800a90c:	2001      	movs	r0, #1
 800a90e:	e7f6      	b.n	800a8fe <__any_on+0x30>

0800a910 <sulp>:
 800a910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a914:	460f      	mov	r7, r1
 800a916:	4690      	mov	r8, r2
 800a918:	f7ff feca 	bl	800a6b0 <__ulp>
 800a91c:	4604      	mov	r4, r0
 800a91e:	460d      	mov	r5, r1
 800a920:	f1b8 0f00 	cmp.w	r8, #0
 800a924:	d011      	beq.n	800a94a <sulp+0x3a>
 800a926:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a92a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a92e:	2b00      	cmp	r3, #0
 800a930:	dd0b      	ble.n	800a94a <sulp+0x3a>
 800a932:	2400      	movs	r4, #0
 800a934:	051b      	lsls	r3, r3, #20
 800a936:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a93a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a93e:	4622      	mov	r2, r4
 800a940:	462b      	mov	r3, r5
 800a942:	f7f5 fdc9 	bl	80004d8 <__aeabi_dmul>
 800a946:	4604      	mov	r4, r0
 800a948:	460d      	mov	r5, r1
 800a94a:	4620      	mov	r0, r4
 800a94c:	4629      	mov	r1, r5
 800a94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a952:	0000      	movs	r0, r0
 800a954:	0000      	movs	r0, r0
	...

0800a958 <_strtod_l>:
 800a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95c:	b09f      	sub	sp, #124	; 0x7c
 800a95e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a960:	2200      	movs	r2, #0
 800a962:	4604      	mov	r4, r0
 800a964:	921a      	str	r2, [sp, #104]	; 0x68
 800a966:	460d      	mov	r5, r1
 800a968:	f04f 0800 	mov.w	r8, #0
 800a96c:	f04f 0900 	mov.w	r9, #0
 800a970:	460a      	mov	r2, r1
 800a972:	9219      	str	r2, [sp, #100]	; 0x64
 800a974:	7811      	ldrb	r1, [r2, #0]
 800a976:	292b      	cmp	r1, #43	; 0x2b
 800a978:	d04a      	beq.n	800aa10 <_strtod_l+0xb8>
 800a97a:	d838      	bhi.n	800a9ee <_strtod_l+0x96>
 800a97c:	290d      	cmp	r1, #13
 800a97e:	d832      	bhi.n	800a9e6 <_strtod_l+0x8e>
 800a980:	2908      	cmp	r1, #8
 800a982:	d832      	bhi.n	800a9ea <_strtod_l+0x92>
 800a984:	2900      	cmp	r1, #0
 800a986:	d03b      	beq.n	800aa00 <_strtod_l+0xa8>
 800a988:	2200      	movs	r2, #0
 800a98a:	920e      	str	r2, [sp, #56]	; 0x38
 800a98c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a98e:	7832      	ldrb	r2, [r6, #0]
 800a990:	2a30      	cmp	r2, #48	; 0x30
 800a992:	f040 80b2 	bne.w	800aafa <_strtod_l+0x1a2>
 800a996:	7872      	ldrb	r2, [r6, #1]
 800a998:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a99c:	2a58      	cmp	r2, #88	; 0x58
 800a99e:	d16e      	bne.n	800aa7e <_strtod_l+0x126>
 800a9a0:	9302      	str	r3, [sp, #8]
 800a9a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	ab1a      	add	r3, sp, #104	; 0x68
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	4a8c      	ldr	r2, [pc, #560]	; (800abe0 <_strtod_l+0x288>)
 800a9ae:	ab1b      	add	r3, sp, #108	; 0x6c
 800a9b0:	a919      	add	r1, sp, #100	; 0x64
 800a9b2:	f001 fb01 	bl	800bfb8 <__gethex>
 800a9b6:	f010 070f 	ands.w	r7, r0, #15
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	d005      	beq.n	800a9ca <_strtod_l+0x72>
 800a9be:	2f06      	cmp	r7, #6
 800a9c0:	d128      	bne.n	800aa14 <_strtod_l+0xbc>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	3601      	adds	r6, #1
 800a9c6:	9619      	str	r6, [sp, #100]	; 0x64
 800a9c8:	930e      	str	r3, [sp, #56]	; 0x38
 800a9ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f040 85a0 	bne.w	800b512 <_strtod_l+0xbba>
 800a9d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9d4:	b1cb      	cbz	r3, 800aa0a <_strtod_l+0xb2>
 800a9d6:	4642      	mov	r2, r8
 800a9d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a9dc:	4610      	mov	r0, r2
 800a9de:	4619      	mov	r1, r3
 800a9e0:	b01f      	add	sp, #124	; 0x7c
 800a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e6:	2920      	cmp	r1, #32
 800a9e8:	d1ce      	bne.n	800a988 <_strtod_l+0x30>
 800a9ea:	3201      	adds	r2, #1
 800a9ec:	e7c1      	b.n	800a972 <_strtod_l+0x1a>
 800a9ee:	292d      	cmp	r1, #45	; 0x2d
 800a9f0:	d1ca      	bne.n	800a988 <_strtod_l+0x30>
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	910e      	str	r1, [sp, #56]	; 0x38
 800a9f6:	1c51      	adds	r1, r2, #1
 800a9f8:	9119      	str	r1, [sp, #100]	; 0x64
 800a9fa:	7852      	ldrb	r2, [r2, #1]
 800a9fc:	2a00      	cmp	r2, #0
 800a9fe:	d1c5      	bne.n	800a98c <_strtod_l+0x34>
 800aa00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa02:	9519      	str	r5, [sp, #100]	; 0x64
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f040 8582 	bne.w	800b50e <_strtod_l+0xbb6>
 800aa0a:	4642      	mov	r2, r8
 800aa0c:	464b      	mov	r3, r9
 800aa0e:	e7e5      	b.n	800a9dc <_strtod_l+0x84>
 800aa10:	2100      	movs	r1, #0
 800aa12:	e7ef      	b.n	800a9f4 <_strtod_l+0x9c>
 800aa14:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aa16:	b13a      	cbz	r2, 800aa28 <_strtod_l+0xd0>
 800aa18:	2135      	movs	r1, #53	; 0x35
 800aa1a:	a81c      	add	r0, sp, #112	; 0x70
 800aa1c:	f7ff ff34 	bl	800a888 <__copybits>
 800aa20:	4620      	mov	r0, r4
 800aa22:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aa24:	f7ff fb18 	bl	800a058 <_Bfree>
 800aa28:	3f01      	subs	r7, #1
 800aa2a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aa2c:	2f04      	cmp	r7, #4
 800aa2e:	d806      	bhi.n	800aa3e <_strtod_l+0xe6>
 800aa30:	e8df f007 	tbb	[pc, r7]
 800aa34:	201d0314 	.word	0x201d0314
 800aa38:	14          	.byte	0x14
 800aa39:	00          	.byte	0x00
 800aa3a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800aa3e:	05e9      	lsls	r1, r5, #23
 800aa40:	bf48      	it	mi
 800aa42:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800aa46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa4a:	0d1b      	lsrs	r3, r3, #20
 800aa4c:	051b      	lsls	r3, r3, #20
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1bb      	bne.n	800a9ca <_strtod_l+0x72>
 800aa52:	f7fe fb07 	bl	8009064 <__errno>
 800aa56:	2322      	movs	r3, #34	; 0x22
 800aa58:	6003      	str	r3, [r0, #0]
 800aa5a:	e7b6      	b.n	800a9ca <_strtod_l+0x72>
 800aa5c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa60:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800aa64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aa68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800aa6c:	e7e7      	b.n	800aa3e <_strtod_l+0xe6>
 800aa6e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800abe4 <_strtod_l+0x28c>
 800aa72:	e7e4      	b.n	800aa3e <_strtod_l+0xe6>
 800aa74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800aa78:	f04f 38ff 	mov.w	r8, #4294967295
 800aa7c:	e7df      	b.n	800aa3e <_strtod_l+0xe6>
 800aa7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	9219      	str	r2, [sp, #100]	; 0x64
 800aa84:	785b      	ldrb	r3, [r3, #1]
 800aa86:	2b30      	cmp	r3, #48	; 0x30
 800aa88:	d0f9      	beq.n	800aa7e <_strtod_l+0x126>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d09d      	beq.n	800a9ca <_strtod_l+0x72>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	f04f 0a00 	mov.w	sl, #0
 800aa94:	220a      	movs	r2, #10
 800aa96:	46d3      	mov	fp, sl
 800aa98:	9305      	str	r3, [sp, #20]
 800aa9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa9c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800aaa0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aaa2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800aaa4:	7806      	ldrb	r6, [r0, #0]
 800aaa6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aaaa:	b2d9      	uxtb	r1, r3
 800aaac:	2909      	cmp	r1, #9
 800aaae:	d926      	bls.n	800aafe <_strtod_l+0x1a6>
 800aab0:	2201      	movs	r2, #1
 800aab2:	494d      	ldr	r1, [pc, #308]	; (800abe8 <_strtod_l+0x290>)
 800aab4:	f001 f9be 	bl	800be34 <strncmp>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d030      	beq.n	800ab1e <_strtod_l+0x1c6>
 800aabc:	2000      	movs	r0, #0
 800aabe:	4632      	mov	r2, r6
 800aac0:	4603      	mov	r3, r0
 800aac2:	465e      	mov	r6, fp
 800aac4:	9008      	str	r0, [sp, #32]
 800aac6:	2a65      	cmp	r2, #101	; 0x65
 800aac8:	d001      	beq.n	800aace <_strtod_l+0x176>
 800aaca:	2a45      	cmp	r2, #69	; 0x45
 800aacc:	d113      	bne.n	800aaf6 <_strtod_l+0x19e>
 800aace:	b91e      	cbnz	r6, 800aad8 <_strtod_l+0x180>
 800aad0:	9a05      	ldr	r2, [sp, #20]
 800aad2:	4302      	orrs	r2, r0
 800aad4:	d094      	beq.n	800aa00 <_strtod_l+0xa8>
 800aad6:	2600      	movs	r6, #0
 800aad8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800aada:	1c6a      	adds	r2, r5, #1
 800aadc:	9219      	str	r2, [sp, #100]	; 0x64
 800aade:	786a      	ldrb	r2, [r5, #1]
 800aae0:	2a2b      	cmp	r2, #43	; 0x2b
 800aae2:	d074      	beq.n	800abce <_strtod_l+0x276>
 800aae4:	2a2d      	cmp	r2, #45	; 0x2d
 800aae6:	d078      	beq.n	800abda <_strtod_l+0x282>
 800aae8:	f04f 0c00 	mov.w	ip, #0
 800aaec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aaf0:	2909      	cmp	r1, #9
 800aaf2:	d97f      	bls.n	800abf4 <_strtod_l+0x29c>
 800aaf4:	9519      	str	r5, [sp, #100]	; 0x64
 800aaf6:	2700      	movs	r7, #0
 800aaf8:	e09e      	b.n	800ac38 <_strtod_l+0x2e0>
 800aafa:	2300      	movs	r3, #0
 800aafc:	e7c8      	b.n	800aa90 <_strtod_l+0x138>
 800aafe:	f1bb 0f08 	cmp.w	fp, #8
 800ab02:	bfd8      	it	le
 800ab04:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800ab06:	f100 0001 	add.w	r0, r0, #1
 800ab0a:	bfd6      	itet	le
 800ab0c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab10:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ab14:	930a      	strle	r3, [sp, #40]	; 0x28
 800ab16:	f10b 0b01 	add.w	fp, fp, #1
 800ab1a:	9019      	str	r0, [sp, #100]	; 0x64
 800ab1c:	e7c1      	b.n	800aaa2 <_strtod_l+0x14a>
 800ab1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	9219      	str	r2, [sp, #100]	; 0x64
 800ab24:	785a      	ldrb	r2, [r3, #1]
 800ab26:	f1bb 0f00 	cmp.w	fp, #0
 800ab2a:	d037      	beq.n	800ab9c <_strtod_l+0x244>
 800ab2c:	465e      	mov	r6, fp
 800ab2e:	9008      	str	r0, [sp, #32]
 800ab30:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ab34:	2b09      	cmp	r3, #9
 800ab36:	d912      	bls.n	800ab5e <_strtod_l+0x206>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e7c4      	b.n	800aac6 <_strtod_l+0x16e>
 800ab3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab3e:	3001      	adds	r0, #1
 800ab40:	1c5a      	adds	r2, r3, #1
 800ab42:	9219      	str	r2, [sp, #100]	; 0x64
 800ab44:	785a      	ldrb	r2, [r3, #1]
 800ab46:	2a30      	cmp	r2, #48	; 0x30
 800ab48:	d0f8      	beq.n	800ab3c <_strtod_l+0x1e4>
 800ab4a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ab4e:	2b08      	cmp	r3, #8
 800ab50:	f200 84e4 	bhi.w	800b51c <_strtod_l+0xbc4>
 800ab54:	9008      	str	r0, [sp, #32]
 800ab56:	2000      	movs	r0, #0
 800ab58:	4606      	mov	r6, r0
 800ab5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab5e:	3a30      	subs	r2, #48	; 0x30
 800ab60:	f100 0301 	add.w	r3, r0, #1
 800ab64:	d014      	beq.n	800ab90 <_strtod_l+0x238>
 800ab66:	9908      	ldr	r1, [sp, #32]
 800ab68:	eb00 0c06 	add.w	ip, r0, r6
 800ab6c:	4419      	add	r1, r3
 800ab6e:	9108      	str	r1, [sp, #32]
 800ab70:	4633      	mov	r3, r6
 800ab72:	210a      	movs	r1, #10
 800ab74:	4563      	cmp	r3, ip
 800ab76:	d113      	bne.n	800aba0 <_strtod_l+0x248>
 800ab78:	1833      	adds	r3, r6, r0
 800ab7a:	2b08      	cmp	r3, #8
 800ab7c:	f106 0601 	add.w	r6, r6, #1
 800ab80:	4406      	add	r6, r0
 800ab82:	dc1a      	bgt.n	800abba <_strtod_l+0x262>
 800ab84:	230a      	movs	r3, #10
 800ab86:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab88:	fb03 2301 	mla	r3, r3, r1, r2
 800ab8c:	930a      	str	r3, [sp, #40]	; 0x28
 800ab8e:	2300      	movs	r3, #0
 800ab90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ab92:	4618      	mov	r0, r3
 800ab94:	1c51      	adds	r1, r2, #1
 800ab96:	9119      	str	r1, [sp, #100]	; 0x64
 800ab98:	7852      	ldrb	r2, [r2, #1]
 800ab9a:	e7c9      	b.n	800ab30 <_strtod_l+0x1d8>
 800ab9c:	4658      	mov	r0, fp
 800ab9e:	e7d2      	b.n	800ab46 <_strtod_l+0x1ee>
 800aba0:	2b08      	cmp	r3, #8
 800aba2:	f103 0301 	add.w	r3, r3, #1
 800aba6:	dc03      	bgt.n	800abb0 <_strtod_l+0x258>
 800aba8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800abaa:	434f      	muls	r7, r1
 800abac:	970a      	str	r7, [sp, #40]	; 0x28
 800abae:	e7e1      	b.n	800ab74 <_strtod_l+0x21c>
 800abb0:	2b10      	cmp	r3, #16
 800abb2:	bfd8      	it	le
 800abb4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800abb8:	e7dc      	b.n	800ab74 <_strtod_l+0x21c>
 800abba:	2e10      	cmp	r6, #16
 800abbc:	bfdc      	itt	le
 800abbe:	230a      	movle	r3, #10
 800abc0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800abc4:	e7e3      	b.n	800ab8e <_strtod_l+0x236>
 800abc6:	2300      	movs	r3, #0
 800abc8:	9308      	str	r3, [sp, #32]
 800abca:	2301      	movs	r3, #1
 800abcc:	e780      	b.n	800aad0 <_strtod_l+0x178>
 800abce:	f04f 0c00 	mov.w	ip, #0
 800abd2:	1caa      	adds	r2, r5, #2
 800abd4:	9219      	str	r2, [sp, #100]	; 0x64
 800abd6:	78aa      	ldrb	r2, [r5, #2]
 800abd8:	e788      	b.n	800aaec <_strtod_l+0x194>
 800abda:	f04f 0c01 	mov.w	ip, #1
 800abde:	e7f8      	b.n	800abd2 <_strtod_l+0x27a>
 800abe0:	0800cb50 	.word	0x0800cb50
 800abe4:	7ff00000 	.word	0x7ff00000
 800abe8:	0800cb4c 	.word	0x0800cb4c
 800abec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800abee:	1c51      	adds	r1, r2, #1
 800abf0:	9119      	str	r1, [sp, #100]	; 0x64
 800abf2:	7852      	ldrb	r2, [r2, #1]
 800abf4:	2a30      	cmp	r2, #48	; 0x30
 800abf6:	d0f9      	beq.n	800abec <_strtod_l+0x294>
 800abf8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800abfc:	2908      	cmp	r1, #8
 800abfe:	f63f af7a 	bhi.w	800aaf6 <_strtod_l+0x19e>
 800ac02:	3a30      	subs	r2, #48	; 0x30
 800ac04:	9209      	str	r2, [sp, #36]	; 0x24
 800ac06:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac08:	920c      	str	r2, [sp, #48]	; 0x30
 800ac0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac0c:	1c57      	adds	r7, r2, #1
 800ac0e:	9719      	str	r7, [sp, #100]	; 0x64
 800ac10:	7852      	ldrb	r2, [r2, #1]
 800ac12:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ac16:	f1be 0f09 	cmp.w	lr, #9
 800ac1a:	d938      	bls.n	800ac8e <_strtod_l+0x336>
 800ac1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ac1e:	1a7f      	subs	r7, r7, r1
 800ac20:	2f08      	cmp	r7, #8
 800ac22:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ac26:	dc03      	bgt.n	800ac30 <_strtod_l+0x2d8>
 800ac28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac2a:	428f      	cmp	r7, r1
 800ac2c:	bfa8      	it	ge
 800ac2e:	460f      	movge	r7, r1
 800ac30:	f1bc 0f00 	cmp.w	ip, #0
 800ac34:	d000      	beq.n	800ac38 <_strtod_l+0x2e0>
 800ac36:	427f      	negs	r7, r7
 800ac38:	2e00      	cmp	r6, #0
 800ac3a:	d14f      	bne.n	800acdc <_strtod_l+0x384>
 800ac3c:	9905      	ldr	r1, [sp, #20]
 800ac3e:	4301      	orrs	r1, r0
 800ac40:	f47f aec3 	bne.w	800a9ca <_strtod_l+0x72>
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f47f aedb 	bne.w	800aa00 <_strtod_l+0xa8>
 800ac4a:	2a69      	cmp	r2, #105	; 0x69
 800ac4c:	d029      	beq.n	800aca2 <_strtod_l+0x34a>
 800ac4e:	dc26      	bgt.n	800ac9e <_strtod_l+0x346>
 800ac50:	2a49      	cmp	r2, #73	; 0x49
 800ac52:	d026      	beq.n	800aca2 <_strtod_l+0x34a>
 800ac54:	2a4e      	cmp	r2, #78	; 0x4e
 800ac56:	f47f aed3 	bne.w	800aa00 <_strtod_l+0xa8>
 800ac5a:	499a      	ldr	r1, [pc, #616]	; (800aec4 <_strtod_l+0x56c>)
 800ac5c:	a819      	add	r0, sp, #100	; 0x64
 800ac5e:	f001 fbed 	bl	800c43c <__match>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	f43f aecc 	beq.w	800aa00 <_strtod_l+0xa8>
 800ac68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	2b28      	cmp	r3, #40	; 0x28
 800ac6e:	d12f      	bne.n	800acd0 <_strtod_l+0x378>
 800ac70:	4995      	ldr	r1, [pc, #596]	; (800aec8 <_strtod_l+0x570>)
 800ac72:	aa1c      	add	r2, sp, #112	; 0x70
 800ac74:	a819      	add	r0, sp, #100	; 0x64
 800ac76:	f001 fbf5 	bl	800c464 <__hexnan>
 800ac7a:	2805      	cmp	r0, #5
 800ac7c:	d128      	bne.n	800acd0 <_strtod_l+0x378>
 800ac7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac80:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ac84:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ac88:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ac8c:	e69d      	b.n	800a9ca <_strtod_l+0x72>
 800ac8e:	210a      	movs	r1, #10
 800ac90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ac92:	fb01 2107 	mla	r1, r1, r7, r2
 800ac96:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ac9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac9c:	e7b5      	b.n	800ac0a <_strtod_l+0x2b2>
 800ac9e:	2a6e      	cmp	r2, #110	; 0x6e
 800aca0:	e7d9      	b.n	800ac56 <_strtod_l+0x2fe>
 800aca2:	498a      	ldr	r1, [pc, #552]	; (800aecc <_strtod_l+0x574>)
 800aca4:	a819      	add	r0, sp, #100	; 0x64
 800aca6:	f001 fbc9 	bl	800c43c <__match>
 800acaa:	2800      	cmp	r0, #0
 800acac:	f43f aea8 	beq.w	800aa00 <_strtod_l+0xa8>
 800acb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acb2:	4987      	ldr	r1, [pc, #540]	; (800aed0 <_strtod_l+0x578>)
 800acb4:	3b01      	subs	r3, #1
 800acb6:	a819      	add	r0, sp, #100	; 0x64
 800acb8:	9319      	str	r3, [sp, #100]	; 0x64
 800acba:	f001 fbbf 	bl	800c43c <__match>
 800acbe:	b910      	cbnz	r0, 800acc6 <_strtod_l+0x36e>
 800acc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acc2:	3301      	adds	r3, #1
 800acc4:	9319      	str	r3, [sp, #100]	; 0x64
 800acc6:	f04f 0800 	mov.w	r8, #0
 800acca:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800aed4 <_strtod_l+0x57c>
 800acce:	e67c      	b.n	800a9ca <_strtod_l+0x72>
 800acd0:	4881      	ldr	r0, [pc, #516]	; (800aed8 <_strtod_l+0x580>)
 800acd2:	f001 f8d1 	bl	800be78 <nan>
 800acd6:	4680      	mov	r8, r0
 800acd8:	4689      	mov	r9, r1
 800acda:	e676      	b.n	800a9ca <_strtod_l+0x72>
 800acdc:	9b08      	ldr	r3, [sp, #32]
 800acde:	f1bb 0f00 	cmp.w	fp, #0
 800ace2:	bf08      	it	eq
 800ace4:	46b3      	moveq	fp, r6
 800ace6:	1afb      	subs	r3, r7, r3
 800ace8:	2e10      	cmp	r6, #16
 800acea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800acec:	4635      	mov	r5, r6
 800acee:	9309      	str	r3, [sp, #36]	; 0x24
 800acf0:	bfa8      	it	ge
 800acf2:	2510      	movge	r5, #16
 800acf4:	f7f5 fb76 	bl	80003e4 <__aeabi_ui2d>
 800acf8:	2e09      	cmp	r6, #9
 800acfa:	4680      	mov	r8, r0
 800acfc:	4689      	mov	r9, r1
 800acfe:	dd13      	ble.n	800ad28 <_strtod_l+0x3d0>
 800ad00:	4b76      	ldr	r3, [pc, #472]	; (800aedc <_strtod_l+0x584>)
 800ad02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ad06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ad0a:	f7f5 fbe5 	bl	80004d8 <__aeabi_dmul>
 800ad0e:	4680      	mov	r8, r0
 800ad10:	4650      	mov	r0, sl
 800ad12:	4689      	mov	r9, r1
 800ad14:	f7f5 fb66 	bl	80003e4 <__aeabi_ui2d>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4649      	mov	r1, r9
 800ad20:	f7f5 fa24 	bl	800016c <__adddf3>
 800ad24:	4680      	mov	r8, r0
 800ad26:	4689      	mov	r9, r1
 800ad28:	2e0f      	cmp	r6, #15
 800ad2a:	dc36      	bgt.n	800ad9a <_strtod_l+0x442>
 800ad2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f43f ae4b 	beq.w	800a9ca <_strtod_l+0x72>
 800ad34:	dd22      	ble.n	800ad7c <_strtod_l+0x424>
 800ad36:	2b16      	cmp	r3, #22
 800ad38:	dc09      	bgt.n	800ad4e <_strtod_l+0x3f6>
 800ad3a:	4968      	ldr	r1, [pc, #416]	; (800aedc <_strtod_l+0x584>)
 800ad3c:	4642      	mov	r2, r8
 800ad3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad42:	464b      	mov	r3, r9
 800ad44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad48:	f7f5 fbc6 	bl	80004d8 <__aeabi_dmul>
 800ad4c:	e7c3      	b.n	800acd6 <_strtod_l+0x37e>
 800ad4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad50:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ad54:	4293      	cmp	r3, r2
 800ad56:	db20      	blt.n	800ad9a <_strtod_l+0x442>
 800ad58:	4c60      	ldr	r4, [pc, #384]	; (800aedc <_strtod_l+0x584>)
 800ad5a:	f1c6 060f 	rsb	r6, r6, #15
 800ad5e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ad62:	4642      	mov	r2, r8
 800ad64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad68:	464b      	mov	r3, r9
 800ad6a:	f7f5 fbb5 	bl	80004d8 <__aeabi_dmul>
 800ad6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad70:	1b9e      	subs	r6, r3, r6
 800ad72:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ad76:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ad7a:	e7e5      	b.n	800ad48 <_strtod_l+0x3f0>
 800ad7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7e:	3316      	adds	r3, #22
 800ad80:	db0b      	blt.n	800ad9a <_strtod_l+0x442>
 800ad82:	9b08      	ldr	r3, [sp, #32]
 800ad84:	4640      	mov	r0, r8
 800ad86:	1bdf      	subs	r7, r3, r7
 800ad88:	4b54      	ldr	r3, [pc, #336]	; (800aedc <_strtod_l+0x584>)
 800ad8a:	4649      	mov	r1, r9
 800ad8c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ad90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad94:	f7f5 fcca 	bl	800072c <__aeabi_ddiv>
 800ad98:	e79d      	b.n	800acd6 <_strtod_l+0x37e>
 800ad9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad9c:	1b75      	subs	r5, r6, r5
 800ad9e:	441d      	add	r5, r3
 800ada0:	2d00      	cmp	r5, #0
 800ada2:	dd70      	ble.n	800ae86 <_strtod_l+0x52e>
 800ada4:	f015 030f 	ands.w	r3, r5, #15
 800ada8:	d00a      	beq.n	800adc0 <_strtod_l+0x468>
 800adaa:	494c      	ldr	r1, [pc, #304]	; (800aedc <_strtod_l+0x584>)
 800adac:	4642      	mov	r2, r8
 800adae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adb6:	464b      	mov	r3, r9
 800adb8:	f7f5 fb8e 	bl	80004d8 <__aeabi_dmul>
 800adbc:	4680      	mov	r8, r0
 800adbe:	4689      	mov	r9, r1
 800adc0:	f035 050f 	bics.w	r5, r5, #15
 800adc4:	d04d      	beq.n	800ae62 <_strtod_l+0x50a>
 800adc6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800adca:	dd22      	ble.n	800ae12 <_strtod_l+0x4ba>
 800adcc:	2600      	movs	r6, #0
 800adce:	46b3      	mov	fp, r6
 800add0:	960b      	str	r6, [sp, #44]	; 0x2c
 800add2:	9608      	str	r6, [sp, #32]
 800add4:	2322      	movs	r3, #34	; 0x22
 800add6:	f04f 0800 	mov.w	r8, #0
 800adda:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800aed4 <_strtod_l+0x57c>
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f43f adf1 	beq.w	800a9ca <_strtod_l+0x72>
 800ade8:	4620      	mov	r0, r4
 800adea:	991a      	ldr	r1, [sp, #104]	; 0x68
 800adec:	f7ff f934 	bl	800a058 <_Bfree>
 800adf0:	4620      	mov	r0, r4
 800adf2:	9908      	ldr	r1, [sp, #32]
 800adf4:	f7ff f930 	bl	800a058 <_Bfree>
 800adf8:	4659      	mov	r1, fp
 800adfa:	4620      	mov	r0, r4
 800adfc:	f7ff f92c 	bl	800a058 <_Bfree>
 800ae00:	4620      	mov	r0, r4
 800ae02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae04:	f7ff f928 	bl	800a058 <_Bfree>
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f7ff f924 	bl	800a058 <_Bfree>
 800ae10:	e5db      	b.n	800a9ca <_strtod_l+0x72>
 800ae12:	4b33      	ldr	r3, [pc, #204]	; (800aee0 <_strtod_l+0x588>)
 800ae14:	4640      	mov	r0, r8
 800ae16:	9305      	str	r3, [sp, #20]
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	469a      	mov	sl, r3
 800ae1e:	112d      	asrs	r5, r5, #4
 800ae20:	2d01      	cmp	r5, #1
 800ae22:	dc21      	bgt.n	800ae68 <_strtod_l+0x510>
 800ae24:	b10b      	cbz	r3, 800ae2a <_strtod_l+0x4d2>
 800ae26:	4680      	mov	r8, r0
 800ae28:	4689      	mov	r9, r1
 800ae2a:	492d      	ldr	r1, [pc, #180]	; (800aee0 <_strtod_l+0x588>)
 800ae2c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ae30:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ae34:	4642      	mov	r2, r8
 800ae36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae3a:	464b      	mov	r3, r9
 800ae3c:	f7f5 fb4c 	bl	80004d8 <__aeabi_dmul>
 800ae40:	4b24      	ldr	r3, [pc, #144]	; (800aed4 <_strtod_l+0x57c>)
 800ae42:	460a      	mov	r2, r1
 800ae44:	400b      	ands	r3, r1
 800ae46:	4927      	ldr	r1, [pc, #156]	; (800aee4 <_strtod_l+0x58c>)
 800ae48:	4680      	mov	r8, r0
 800ae4a:	428b      	cmp	r3, r1
 800ae4c:	d8be      	bhi.n	800adcc <_strtod_l+0x474>
 800ae4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ae52:	428b      	cmp	r3, r1
 800ae54:	bf86      	itte	hi
 800ae56:	f04f 38ff 	movhi.w	r8, #4294967295
 800ae5a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800aee8 <_strtod_l+0x590>
 800ae5e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ae62:	2300      	movs	r3, #0
 800ae64:	9305      	str	r3, [sp, #20]
 800ae66:	e07b      	b.n	800af60 <_strtod_l+0x608>
 800ae68:	07ea      	lsls	r2, r5, #31
 800ae6a:	d505      	bpl.n	800ae78 <_strtod_l+0x520>
 800ae6c:	9b05      	ldr	r3, [sp, #20]
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	f7f5 fb31 	bl	80004d8 <__aeabi_dmul>
 800ae76:	2301      	movs	r3, #1
 800ae78:	9a05      	ldr	r2, [sp, #20]
 800ae7a:	f10a 0a01 	add.w	sl, sl, #1
 800ae7e:	3208      	adds	r2, #8
 800ae80:	106d      	asrs	r5, r5, #1
 800ae82:	9205      	str	r2, [sp, #20]
 800ae84:	e7cc      	b.n	800ae20 <_strtod_l+0x4c8>
 800ae86:	d0ec      	beq.n	800ae62 <_strtod_l+0x50a>
 800ae88:	426d      	negs	r5, r5
 800ae8a:	f015 020f 	ands.w	r2, r5, #15
 800ae8e:	d00a      	beq.n	800aea6 <_strtod_l+0x54e>
 800ae90:	4b12      	ldr	r3, [pc, #72]	; (800aedc <_strtod_l+0x584>)
 800ae92:	4640      	mov	r0, r8
 800ae94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae98:	4649      	mov	r1, r9
 800ae9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9e:	f7f5 fc45 	bl	800072c <__aeabi_ddiv>
 800aea2:	4680      	mov	r8, r0
 800aea4:	4689      	mov	r9, r1
 800aea6:	112d      	asrs	r5, r5, #4
 800aea8:	d0db      	beq.n	800ae62 <_strtod_l+0x50a>
 800aeaa:	2d1f      	cmp	r5, #31
 800aeac:	dd1e      	ble.n	800aeec <_strtod_l+0x594>
 800aeae:	2600      	movs	r6, #0
 800aeb0:	46b3      	mov	fp, r6
 800aeb2:	960b      	str	r6, [sp, #44]	; 0x2c
 800aeb4:	9608      	str	r6, [sp, #32]
 800aeb6:	2322      	movs	r3, #34	; 0x22
 800aeb8:	f04f 0800 	mov.w	r8, #0
 800aebc:	f04f 0900 	mov.w	r9, #0
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	e78d      	b.n	800ade0 <_strtod_l+0x488>
 800aec4:	0800c937 	.word	0x0800c937
 800aec8:	0800cb64 	.word	0x0800cb64
 800aecc:	0800c92f 	.word	0x0800c92f
 800aed0:	0800c966 	.word	0x0800c966
 800aed4:	7ff00000 	.word	0x7ff00000
 800aed8:	0800ccf5 	.word	0x0800ccf5
 800aedc:	0800ca78 	.word	0x0800ca78
 800aee0:	0800ca50 	.word	0x0800ca50
 800aee4:	7ca00000 	.word	0x7ca00000
 800aee8:	7fefffff 	.word	0x7fefffff
 800aeec:	f015 0310 	ands.w	r3, r5, #16
 800aef0:	bf18      	it	ne
 800aef2:	236a      	movne	r3, #106	; 0x6a
 800aef4:	4640      	mov	r0, r8
 800aef6:	9305      	str	r3, [sp, #20]
 800aef8:	4649      	mov	r1, r9
 800aefa:	2300      	movs	r3, #0
 800aefc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800b1c8 <_strtod_l+0x870>
 800af00:	07ea      	lsls	r2, r5, #31
 800af02:	d504      	bpl.n	800af0e <_strtod_l+0x5b6>
 800af04:	e9da 2300 	ldrd	r2, r3, [sl]
 800af08:	f7f5 fae6 	bl	80004d8 <__aeabi_dmul>
 800af0c:	2301      	movs	r3, #1
 800af0e:	106d      	asrs	r5, r5, #1
 800af10:	f10a 0a08 	add.w	sl, sl, #8
 800af14:	d1f4      	bne.n	800af00 <_strtod_l+0x5a8>
 800af16:	b10b      	cbz	r3, 800af1c <_strtod_l+0x5c4>
 800af18:	4680      	mov	r8, r0
 800af1a:	4689      	mov	r9, r1
 800af1c:	9b05      	ldr	r3, [sp, #20]
 800af1e:	b1bb      	cbz	r3, 800af50 <_strtod_l+0x5f8>
 800af20:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800af24:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800af28:	2b00      	cmp	r3, #0
 800af2a:	4649      	mov	r1, r9
 800af2c:	dd10      	ble.n	800af50 <_strtod_l+0x5f8>
 800af2e:	2b1f      	cmp	r3, #31
 800af30:	f340 8128 	ble.w	800b184 <_strtod_l+0x82c>
 800af34:	2b34      	cmp	r3, #52	; 0x34
 800af36:	bfd8      	it	le
 800af38:	f04f 33ff 	movle.w	r3, #4294967295
 800af3c:	f04f 0800 	mov.w	r8, #0
 800af40:	bfcf      	iteee	gt
 800af42:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800af46:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800af4a:	4093      	lslle	r3, r2
 800af4c:	ea03 0901 	andle.w	r9, r3, r1
 800af50:	2200      	movs	r2, #0
 800af52:	2300      	movs	r3, #0
 800af54:	4640      	mov	r0, r8
 800af56:	4649      	mov	r1, r9
 800af58:	f7f5 fd26 	bl	80009a8 <__aeabi_dcmpeq>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d1a6      	bne.n	800aeae <_strtod_l+0x556>
 800af60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af62:	465a      	mov	r2, fp
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	4620      	mov	r0, r4
 800af68:	4633      	mov	r3, r6
 800af6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af6c:	f7ff f8dc 	bl	800a128 <__s2b>
 800af70:	900b      	str	r0, [sp, #44]	; 0x2c
 800af72:	2800      	cmp	r0, #0
 800af74:	f43f af2a 	beq.w	800adcc <_strtod_l+0x474>
 800af78:	2600      	movs	r6, #0
 800af7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af7c:	9b08      	ldr	r3, [sp, #32]
 800af7e:	2a00      	cmp	r2, #0
 800af80:	eba3 0307 	sub.w	r3, r3, r7
 800af84:	bfa8      	it	ge
 800af86:	2300      	movge	r3, #0
 800af88:	46b3      	mov	fp, r6
 800af8a:	9312      	str	r3, [sp, #72]	; 0x48
 800af8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800af90:	9316      	str	r3, [sp, #88]	; 0x58
 800af92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af94:	4620      	mov	r0, r4
 800af96:	6859      	ldr	r1, [r3, #4]
 800af98:	f7ff f81e 	bl	8009fd8 <_Balloc>
 800af9c:	9008      	str	r0, [sp, #32]
 800af9e:	2800      	cmp	r0, #0
 800afa0:	f43f af18 	beq.w	800add4 <_strtod_l+0x47c>
 800afa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afa6:	300c      	adds	r0, #12
 800afa8:	691a      	ldr	r2, [r3, #16]
 800afaa:	f103 010c 	add.w	r1, r3, #12
 800afae:	3202      	adds	r2, #2
 800afb0:	0092      	lsls	r2, r2, #2
 800afb2:	f7fe f892 	bl	80090da <memcpy>
 800afb6:	ab1c      	add	r3, sp, #112	; 0x70
 800afb8:	9301      	str	r3, [sp, #4]
 800afba:	ab1b      	add	r3, sp, #108	; 0x6c
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	4642      	mov	r2, r8
 800afc0:	464b      	mov	r3, r9
 800afc2:	4620      	mov	r0, r4
 800afc4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800afc8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800afcc:	f7ff fbd8 	bl	800a780 <__d2b>
 800afd0:	901a      	str	r0, [sp, #104]	; 0x68
 800afd2:	2800      	cmp	r0, #0
 800afd4:	f43f aefe 	beq.w	800add4 <_strtod_l+0x47c>
 800afd8:	2101      	movs	r1, #1
 800afda:	4620      	mov	r0, r4
 800afdc:	f7ff f93c 	bl	800a258 <__i2b>
 800afe0:	4683      	mov	fp, r0
 800afe2:	2800      	cmp	r0, #0
 800afe4:	f43f aef6 	beq.w	800add4 <_strtod_l+0x47c>
 800afe8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800afea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800afec:	2f00      	cmp	r7, #0
 800afee:	bfab      	itete	ge
 800aff0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800aff2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800aff4:	eb07 0a03 	addge.w	sl, r7, r3
 800aff8:	1bdd      	sublt	r5, r3, r7
 800affa:	9b05      	ldr	r3, [sp, #20]
 800affc:	bfa8      	it	ge
 800affe:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b000:	eba7 0703 	sub.w	r7, r7, r3
 800b004:	4417      	add	r7, r2
 800b006:	4b71      	ldr	r3, [pc, #452]	; (800b1cc <_strtod_l+0x874>)
 800b008:	f107 37ff 	add.w	r7, r7, #4294967295
 800b00c:	bfb8      	it	lt
 800b00e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800b012:	429f      	cmp	r7, r3
 800b014:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b018:	f280 80c7 	bge.w	800b1aa <_strtod_l+0x852>
 800b01c:	1bdb      	subs	r3, r3, r7
 800b01e:	2b1f      	cmp	r3, #31
 800b020:	f04f 0101 	mov.w	r1, #1
 800b024:	eba2 0203 	sub.w	r2, r2, r3
 800b028:	f300 80b3 	bgt.w	800b192 <_strtod_l+0x83a>
 800b02c:	fa01 f303 	lsl.w	r3, r1, r3
 800b030:	9313      	str	r3, [sp, #76]	; 0x4c
 800b032:	2300      	movs	r3, #0
 800b034:	9310      	str	r3, [sp, #64]	; 0x40
 800b036:	eb0a 0702 	add.w	r7, sl, r2
 800b03a:	9b05      	ldr	r3, [sp, #20]
 800b03c:	45ba      	cmp	sl, r7
 800b03e:	4415      	add	r5, r2
 800b040:	441d      	add	r5, r3
 800b042:	4653      	mov	r3, sl
 800b044:	bfa8      	it	ge
 800b046:	463b      	movge	r3, r7
 800b048:	42ab      	cmp	r3, r5
 800b04a:	bfa8      	it	ge
 800b04c:	462b      	movge	r3, r5
 800b04e:	2b00      	cmp	r3, #0
 800b050:	bfc2      	ittt	gt
 800b052:	1aff      	subgt	r7, r7, r3
 800b054:	1aed      	subgt	r5, r5, r3
 800b056:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b05a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	dd17      	ble.n	800b090 <_strtod_l+0x738>
 800b060:	4659      	mov	r1, fp
 800b062:	461a      	mov	r2, r3
 800b064:	4620      	mov	r0, r4
 800b066:	f7ff f9b5 	bl	800a3d4 <__pow5mult>
 800b06a:	4683      	mov	fp, r0
 800b06c:	2800      	cmp	r0, #0
 800b06e:	f43f aeb1 	beq.w	800add4 <_strtod_l+0x47c>
 800b072:	4601      	mov	r1, r0
 800b074:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b076:	4620      	mov	r0, r4
 800b078:	f7ff f904 	bl	800a284 <__multiply>
 800b07c:	900a      	str	r0, [sp, #40]	; 0x28
 800b07e:	2800      	cmp	r0, #0
 800b080:	f43f aea8 	beq.w	800add4 <_strtod_l+0x47c>
 800b084:	4620      	mov	r0, r4
 800b086:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b088:	f7fe ffe6 	bl	800a058 <_Bfree>
 800b08c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b08e:	931a      	str	r3, [sp, #104]	; 0x68
 800b090:	2f00      	cmp	r7, #0
 800b092:	f300 808f 	bgt.w	800b1b4 <_strtod_l+0x85c>
 800b096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b098:	2b00      	cmp	r3, #0
 800b09a:	dd08      	ble.n	800b0ae <_strtod_l+0x756>
 800b09c:	4620      	mov	r0, r4
 800b09e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b0a0:	9908      	ldr	r1, [sp, #32]
 800b0a2:	f7ff f997 	bl	800a3d4 <__pow5mult>
 800b0a6:	9008      	str	r0, [sp, #32]
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	f43f ae93 	beq.w	800add4 <_strtod_l+0x47c>
 800b0ae:	2d00      	cmp	r5, #0
 800b0b0:	dd08      	ble.n	800b0c4 <_strtod_l+0x76c>
 800b0b2:	462a      	mov	r2, r5
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	9908      	ldr	r1, [sp, #32]
 800b0b8:	f7ff f9e6 	bl	800a488 <__lshift>
 800b0bc:	9008      	str	r0, [sp, #32]
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	f43f ae88 	beq.w	800add4 <_strtod_l+0x47c>
 800b0c4:	f1ba 0f00 	cmp.w	sl, #0
 800b0c8:	dd08      	ble.n	800b0dc <_strtod_l+0x784>
 800b0ca:	4659      	mov	r1, fp
 800b0cc:	4652      	mov	r2, sl
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f7ff f9da 	bl	800a488 <__lshift>
 800b0d4:	4683      	mov	fp, r0
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	f43f ae7c 	beq.w	800add4 <_strtod_l+0x47c>
 800b0dc:	4620      	mov	r0, r4
 800b0de:	9a08      	ldr	r2, [sp, #32]
 800b0e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b0e2:	f7ff fa59 	bl	800a598 <__mdiff>
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	f43f ae73 	beq.w	800add4 <_strtod_l+0x47c>
 800b0ee:	2500      	movs	r5, #0
 800b0f0:	68c3      	ldr	r3, [r0, #12]
 800b0f2:	4659      	mov	r1, fp
 800b0f4:	60c5      	str	r5, [r0, #12]
 800b0f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b0f8:	f7ff fa32 	bl	800a560 <__mcmp>
 800b0fc:	42a8      	cmp	r0, r5
 800b0fe:	da6b      	bge.n	800b1d8 <_strtod_l+0x880>
 800b100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b102:	ea53 0308 	orrs.w	r3, r3, r8
 800b106:	f040 808f 	bne.w	800b228 <_strtod_l+0x8d0>
 800b10a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f040 808a 	bne.w	800b228 <_strtod_l+0x8d0>
 800b114:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b118:	0d1b      	lsrs	r3, r3, #20
 800b11a:	051b      	lsls	r3, r3, #20
 800b11c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b120:	f240 8082 	bls.w	800b228 <_strtod_l+0x8d0>
 800b124:	6973      	ldr	r3, [r6, #20]
 800b126:	b913      	cbnz	r3, 800b12e <_strtod_l+0x7d6>
 800b128:	6933      	ldr	r3, [r6, #16]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	dd7c      	ble.n	800b228 <_strtod_l+0x8d0>
 800b12e:	4631      	mov	r1, r6
 800b130:	2201      	movs	r2, #1
 800b132:	4620      	mov	r0, r4
 800b134:	f7ff f9a8 	bl	800a488 <__lshift>
 800b138:	4659      	mov	r1, fp
 800b13a:	4606      	mov	r6, r0
 800b13c:	f7ff fa10 	bl	800a560 <__mcmp>
 800b140:	2800      	cmp	r0, #0
 800b142:	dd71      	ble.n	800b228 <_strtod_l+0x8d0>
 800b144:	9905      	ldr	r1, [sp, #20]
 800b146:	464b      	mov	r3, r9
 800b148:	4a21      	ldr	r2, [pc, #132]	; (800b1d0 <_strtod_l+0x878>)
 800b14a:	2900      	cmp	r1, #0
 800b14c:	f000 808d 	beq.w	800b26a <_strtod_l+0x912>
 800b150:	ea02 0109 	and.w	r1, r2, r9
 800b154:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b158:	f300 8087 	bgt.w	800b26a <_strtod_l+0x912>
 800b15c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b160:	f77f aea9 	ble.w	800aeb6 <_strtod_l+0x55e>
 800b164:	4640      	mov	r0, r8
 800b166:	4649      	mov	r1, r9
 800b168:	4b1a      	ldr	r3, [pc, #104]	; (800b1d4 <_strtod_l+0x87c>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	f7f5 f9b4 	bl	80004d8 <__aeabi_dmul>
 800b170:	4b17      	ldr	r3, [pc, #92]	; (800b1d0 <_strtod_l+0x878>)
 800b172:	4680      	mov	r8, r0
 800b174:	400b      	ands	r3, r1
 800b176:	4689      	mov	r9, r1
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f47f ae35 	bne.w	800ade8 <_strtod_l+0x490>
 800b17e:	2322      	movs	r3, #34	; 0x22
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	e631      	b.n	800ade8 <_strtod_l+0x490>
 800b184:	f04f 32ff 	mov.w	r2, #4294967295
 800b188:	fa02 f303 	lsl.w	r3, r2, r3
 800b18c:	ea03 0808 	and.w	r8, r3, r8
 800b190:	e6de      	b.n	800af50 <_strtod_l+0x5f8>
 800b192:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800b196:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800b19a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800b19e:	37e2      	adds	r7, #226	; 0xe2
 800b1a0:	fa01 f307 	lsl.w	r3, r1, r7
 800b1a4:	9310      	str	r3, [sp, #64]	; 0x40
 800b1a6:	9113      	str	r1, [sp, #76]	; 0x4c
 800b1a8:	e745      	b.n	800b036 <_strtod_l+0x6de>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9310      	str	r3, [sp, #64]	; 0x40
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b1b2:	e740      	b.n	800b036 <_strtod_l+0x6de>
 800b1b4:	463a      	mov	r2, r7
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b1ba:	f7ff f965 	bl	800a488 <__lshift>
 800b1be:	901a      	str	r0, [sp, #104]	; 0x68
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	f47f af68 	bne.w	800b096 <_strtod_l+0x73e>
 800b1c6:	e605      	b.n	800add4 <_strtod_l+0x47c>
 800b1c8:	0800cb78 	.word	0x0800cb78
 800b1cc:	fffffc02 	.word	0xfffffc02
 800b1d0:	7ff00000 	.word	0x7ff00000
 800b1d4:	39500000 	.word	0x39500000
 800b1d8:	46ca      	mov	sl, r9
 800b1da:	d165      	bne.n	800b2a8 <_strtod_l+0x950>
 800b1dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1e2:	b352      	cbz	r2, 800b23a <_strtod_l+0x8e2>
 800b1e4:	4a9e      	ldr	r2, [pc, #632]	; (800b460 <_strtod_l+0xb08>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d12a      	bne.n	800b240 <_strtod_l+0x8e8>
 800b1ea:	9b05      	ldr	r3, [sp, #20]
 800b1ec:	4641      	mov	r1, r8
 800b1ee:	b1fb      	cbz	r3, 800b230 <_strtod_l+0x8d8>
 800b1f0:	4b9c      	ldr	r3, [pc, #624]	; (800b464 <_strtod_l+0xb0c>)
 800b1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f6:	ea09 0303 	and.w	r3, r9, r3
 800b1fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b1fe:	d81a      	bhi.n	800b236 <_strtod_l+0x8de>
 800b200:	0d1b      	lsrs	r3, r3, #20
 800b202:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b206:	fa02 f303 	lsl.w	r3, r2, r3
 800b20a:	4299      	cmp	r1, r3
 800b20c:	d118      	bne.n	800b240 <_strtod_l+0x8e8>
 800b20e:	4b96      	ldr	r3, [pc, #600]	; (800b468 <_strtod_l+0xb10>)
 800b210:	459a      	cmp	sl, r3
 800b212:	d102      	bne.n	800b21a <_strtod_l+0x8c2>
 800b214:	3101      	adds	r1, #1
 800b216:	f43f addd 	beq.w	800add4 <_strtod_l+0x47c>
 800b21a:	f04f 0800 	mov.w	r8, #0
 800b21e:	4b91      	ldr	r3, [pc, #580]	; (800b464 <_strtod_l+0xb0c>)
 800b220:	ea0a 0303 	and.w	r3, sl, r3
 800b224:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b228:	9b05      	ldr	r3, [sp, #20]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d19a      	bne.n	800b164 <_strtod_l+0x80c>
 800b22e:	e5db      	b.n	800ade8 <_strtod_l+0x490>
 800b230:	f04f 33ff 	mov.w	r3, #4294967295
 800b234:	e7e9      	b.n	800b20a <_strtod_l+0x8b2>
 800b236:	4613      	mov	r3, r2
 800b238:	e7e7      	b.n	800b20a <_strtod_l+0x8b2>
 800b23a:	ea53 0308 	orrs.w	r3, r3, r8
 800b23e:	d081      	beq.n	800b144 <_strtod_l+0x7ec>
 800b240:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b242:	b1e3      	cbz	r3, 800b27e <_strtod_l+0x926>
 800b244:	ea13 0f0a 	tst.w	r3, sl
 800b248:	d0ee      	beq.n	800b228 <_strtod_l+0x8d0>
 800b24a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b24c:	4640      	mov	r0, r8
 800b24e:	4649      	mov	r1, r9
 800b250:	9a05      	ldr	r2, [sp, #20]
 800b252:	b1c3      	cbz	r3, 800b286 <_strtod_l+0x92e>
 800b254:	f7ff fb5c 	bl	800a910 <sulp>
 800b258:	4602      	mov	r2, r0
 800b25a:	460b      	mov	r3, r1
 800b25c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b25e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b260:	f7f4 ff84 	bl	800016c <__adddf3>
 800b264:	4680      	mov	r8, r0
 800b266:	4689      	mov	r9, r1
 800b268:	e7de      	b.n	800b228 <_strtod_l+0x8d0>
 800b26a:	4013      	ands	r3, r2
 800b26c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b270:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b274:	f04f 38ff 	mov.w	r8, #4294967295
 800b278:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b27c:	e7d4      	b.n	800b228 <_strtod_l+0x8d0>
 800b27e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b280:	ea13 0f08 	tst.w	r3, r8
 800b284:	e7e0      	b.n	800b248 <_strtod_l+0x8f0>
 800b286:	f7ff fb43 	bl	800a910 <sulp>
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b290:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b292:	f7f4 ff69 	bl	8000168 <__aeabi_dsub>
 800b296:	2200      	movs	r2, #0
 800b298:	2300      	movs	r3, #0
 800b29a:	4680      	mov	r8, r0
 800b29c:	4689      	mov	r9, r1
 800b29e:	f7f5 fb83 	bl	80009a8 <__aeabi_dcmpeq>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d0c0      	beq.n	800b228 <_strtod_l+0x8d0>
 800b2a6:	e606      	b.n	800aeb6 <_strtod_l+0x55e>
 800b2a8:	4659      	mov	r1, fp
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f7ff fabe 	bl	800a82c <__ratio>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b2be:	f7f5 fb87 	bl	80009d0 <__aeabi_dcmple>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	d06f      	beq.n	800b3a6 <_strtod_l+0xa4e>
 800b2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d17c      	bne.n	800b3c6 <_strtod_l+0xa6e>
 800b2cc:	f1b8 0f00 	cmp.w	r8, #0
 800b2d0:	d159      	bne.n	800b386 <_strtod_l+0xa2e>
 800b2d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d17b      	bne.n	800b3d2 <_strtod_l+0xa7a>
 800b2da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2de:	2200      	movs	r2, #0
 800b2e0:	4b62      	ldr	r3, [pc, #392]	; (800b46c <_strtod_l+0xb14>)
 800b2e2:	f7f5 fb6b 	bl	80009bc <__aeabi_dcmplt>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	d15a      	bne.n	800b3a0 <_strtod_l+0xa48>
 800b2ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	4b5f      	ldr	r3, [pc, #380]	; (800b470 <_strtod_l+0xb18>)
 800b2f2:	f7f5 f8f1 	bl	80004d8 <__aeabi_dmul>
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	460f      	mov	r7, r1
 800b2fa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b2fe:	9506      	str	r5, [sp, #24]
 800b300:	9307      	str	r3, [sp, #28]
 800b302:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b306:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b30a:	4b56      	ldr	r3, [pc, #344]	; (800b464 <_strtod_l+0xb0c>)
 800b30c:	4a55      	ldr	r2, [pc, #340]	; (800b464 <_strtod_l+0xb0c>)
 800b30e:	ea0a 0303 	and.w	r3, sl, r3
 800b312:	9313      	str	r3, [sp, #76]	; 0x4c
 800b314:	4b57      	ldr	r3, [pc, #348]	; (800b474 <_strtod_l+0xb1c>)
 800b316:	ea0a 0202 	and.w	r2, sl, r2
 800b31a:	429a      	cmp	r2, r3
 800b31c:	f040 80b0 	bne.w	800b480 <_strtod_l+0xb28>
 800b320:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b324:	4640      	mov	r0, r8
 800b326:	4649      	mov	r1, r9
 800b328:	f7ff f9c2 	bl	800a6b0 <__ulp>
 800b32c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b330:	f7f5 f8d2 	bl	80004d8 <__aeabi_dmul>
 800b334:	4642      	mov	r2, r8
 800b336:	464b      	mov	r3, r9
 800b338:	f7f4 ff18 	bl	800016c <__adddf3>
 800b33c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800b464 <_strtod_l+0xb0c>
 800b340:	4a4d      	ldr	r2, [pc, #308]	; (800b478 <_strtod_l+0xb20>)
 800b342:	ea01 0a0a 	and.w	sl, r1, sl
 800b346:	4592      	cmp	sl, r2
 800b348:	4680      	mov	r8, r0
 800b34a:	d948      	bls.n	800b3de <_strtod_l+0xa86>
 800b34c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b34e:	4b46      	ldr	r3, [pc, #280]	; (800b468 <_strtod_l+0xb10>)
 800b350:	429a      	cmp	r2, r3
 800b352:	d103      	bne.n	800b35c <_strtod_l+0xa04>
 800b354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b356:	3301      	adds	r3, #1
 800b358:	f43f ad3c 	beq.w	800add4 <_strtod_l+0x47c>
 800b35c:	f04f 38ff 	mov.w	r8, #4294967295
 800b360:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800b468 <_strtod_l+0xb10>
 800b364:	4620      	mov	r0, r4
 800b366:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b368:	f7fe fe76 	bl	800a058 <_Bfree>
 800b36c:	4620      	mov	r0, r4
 800b36e:	9908      	ldr	r1, [sp, #32]
 800b370:	f7fe fe72 	bl	800a058 <_Bfree>
 800b374:	4659      	mov	r1, fp
 800b376:	4620      	mov	r0, r4
 800b378:	f7fe fe6e 	bl	800a058 <_Bfree>
 800b37c:	4631      	mov	r1, r6
 800b37e:	4620      	mov	r0, r4
 800b380:	f7fe fe6a 	bl	800a058 <_Bfree>
 800b384:	e605      	b.n	800af92 <_strtod_l+0x63a>
 800b386:	f1b8 0f01 	cmp.w	r8, #1
 800b38a:	d103      	bne.n	800b394 <_strtod_l+0xa3c>
 800b38c:	f1b9 0f00 	cmp.w	r9, #0
 800b390:	f43f ad91 	beq.w	800aeb6 <_strtod_l+0x55e>
 800b394:	2200      	movs	r2, #0
 800b396:	4b39      	ldr	r3, [pc, #228]	; (800b47c <_strtod_l+0xb24>)
 800b398:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b39a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b39e:	e016      	b.n	800b3ce <_strtod_l+0xa76>
 800b3a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b3a2:	4f33      	ldr	r7, [pc, #204]	; (800b470 <_strtod_l+0xb18>)
 800b3a4:	e7a9      	b.n	800b2fa <_strtod_l+0x9a2>
 800b3a6:	4b32      	ldr	r3, [pc, #200]	; (800b470 <_strtod_l+0xb18>)
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b3ae:	f7f5 f893 	bl	80004d8 <__aeabi_dmul>
 800b3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3b4:	4605      	mov	r5, r0
 800b3b6:	460f      	mov	r7, r1
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d09e      	beq.n	800b2fa <_strtod_l+0x9a2>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	460b      	mov	r3, r1
 800b3c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b3c4:	e79d      	b.n	800b302 <_strtod_l+0x9aa>
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	4b28      	ldr	r3, [pc, #160]	; (800b46c <_strtod_l+0xb14>)
 800b3ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b3ce:	4f27      	ldr	r7, [pc, #156]	; (800b46c <_strtod_l+0xb14>)
 800b3d0:	e797      	b.n	800b302 <_strtod_l+0x9aa>
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	4b29      	ldr	r3, [pc, #164]	; (800b47c <_strtod_l+0xb24>)
 800b3d6:	4645      	mov	r5, r8
 800b3d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b3dc:	e7f7      	b.n	800b3ce <_strtod_l+0xa76>
 800b3de:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800b3e2:	9b05      	ldr	r3, [sp, #20]
 800b3e4:	46ca      	mov	sl, r9
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1bc      	bne.n	800b364 <_strtod_l+0xa0c>
 800b3ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b3ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b3f0:	0d1b      	lsrs	r3, r3, #20
 800b3f2:	051b      	lsls	r3, r3, #20
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d1b5      	bne.n	800b364 <_strtod_l+0xa0c>
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	4639      	mov	r1, r7
 800b3fc:	f7f5 fe12 	bl	8001024 <__aeabi_d2lz>
 800b400:	f7f5 f83c 	bl	800047c <__aeabi_l2d>
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	4628      	mov	r0, r5
 800b40a:	4639      	mov	r1, r7
 800b40c:	f7f4 feac 	bl	8000168 <__aeabi_dsub>
 800b410:	460b      	mov	r3, r1
 800b412:	4602      	mov	r2, r0
 800b414:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800b418:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b41e:	ea4a 0a08 	orr.w	sl, sl, r8
 800b422:	ea5a 0a03 	orrs.w	sl, sl, r3
 800b426:	d06c      	beq.n	800b502 <_strtod_l+0xbaa>
 800b428:	a309      	add	r3, pc, #36	; (adr r3, 800b450 <_strtod_l+0xaf8>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f7f5 fac5 	bl	80009bc <__aeabi_dcmplt>
 800b432:	2800      	cmp	r0, #0
 800b434:	f47f acd8 	bne.w	800ade8 <_strtod_l+0x490>
 800b438:	a307      	add	r3, pc, #28	; (adr r3, 800b458 <_strtod_l+0xb00>)
 800b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b442:	f7f5 fad9 	bl	80009f8 <__aeabi_dcmpgt>
 800b446:	2800      	cmp	r0, #0
 800b448:	d08c      	beq.n	800b364 <_strtod_l+0xa0c>
 800b44a:	e4cd      	b.n	800ade8 <_strtod_l+0x490>
 800b44c:	f3af 8000 	nop.w
 800b450:	94a03595 	.word	0x94a03595
 800b454:	3fdfffff 	.word	0x3fdfffff
 800b458:	35afe535 	.word	0x35afe535
 800b45c:	3fe00000 	.word	0x3fe00000
 800b460:	000fffff 	.word	0x000fffff
 800b464:	7ff00000 	.word	0x7ff00000
 800b468:	7fefffff 	.word	0x7fefffff
 800b46c:	3ff00000 	.word	0x3ff00000
 800b470:	3fe00000 	.word	0x3fe00000
 800b474:	7fe00000 	.word	0x7fe00000
 800b478:	7c9fffff 	.word	0x7c9fffff
 800b47c:	bff00000 	.word	0xbff00000
 800b480:	9b05      	ldr	r3, [sp, #20]
 800b482:	b333      	cbz	r3, 800b4d2 <_strtod_l+0xb7a>
 800b484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b486:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b48a:	d822      	bhi.n	800b4d2 <_strtod_l+0xb7a>
 800b48c:	a328      	add	r3, pc, #160	; (adr r3, 800b530 <_strtod_l+0xbd8>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	4628      	mov	r0, r5
 800b494:	4639      	mov	r1, r7
 800b496:	f7f5 fa9b 	bl	80009d0 <__aeabi_dcmple>
 800b49a:	b1a0      	cbz	r0, 800b4c6 <_strtod_l+0xb6e>
 800b49c:	4639      	mov	r1, r7
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f7f5 faf2 	bl	8000a88 <__aeabi_d2uiz>
 800b4a4:	2801      	cmp	r0, #1
 800b4a6:	bf38      	it	cc
 800b4a8:	2001      	movcc	r0, #1
 800b4aa:	f7f4 ff9b 	bl	80003e4 <__aeabi_ui2d>
 800b4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b0:	4605      	mov	r5, r0
 800b4b2:	460f      	mov	r7, r1
 800b4b4:	bb03      	cbnz	r3, 800b4f8 <_strtod_l+0xba0>
 800b4b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4ba:	9014      	str	r0, [sp, #80]	; 0x50
 800b4bc:	9315      	str	r3, [sp, #84]	; 0x54
 800b4be:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b4c2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b4c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b4ca:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b4ce:	1a9b      	subs	r3, r3, r2
 800b4d0:	9311      	str	r3, [sp, #68]	; 0x44
 800b4d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b4d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b4d6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800b4da:	f7ff f8e9 	bl	800a6b0 <__ulp>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	4649      	mov	r1, r9
 800b4e6:	f7f4 fff7 	bl	80004d8 <__aeabi_dmul>
 800b4ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4ee:	f7f4 fe3d 	bl	800016c <__adddf3>
 800b4f2:	4680      	mov	r8, r0
 800b4f4:	4689      	mov	r9, r1
 800b4f6:	e774      	b.n	800b3e2 <_strtod_l+0xa8a>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b500:	e7dd      	b.n	800b4be <_strtod_l+0xb66>
 800b502:	a30d      	add	r3, pc, #52	; (adr r3, 800b538 <_strtod_l+0xbe0>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f7f5 fa58 	bl	80009bc <__aeabi_dcmplt>
 800b50c:	e79b      	b.n	800b446 <_strtod_l+0xaee>
 800b50e:	2300      	movs	r3, #0
 800b510:	930e      	str	r3, [sp, #56]	; 0x38
 800b512:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b514:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b516:	6013      	str	r3, [r2, #0]
 800b518:	f7ff ba5b 	b.w	800a9d2 <_strtod_l+0x7a>
 800b51c:	2a65      	cmp	r2, #101	; 0x65
 800b51e:	f43f ab52 	beq.w	800abc6 <_strtod_l+0x26e>
 800b522:	2a45      	cmp	r2, #69	; 0x45
 800b524:	f43f ab4f 	beq.w	800abc6 <_strtod_l+0x26e>
 800b528:	2301      	movs	r3, #1
 800b52a:	f7ff bb87 	b.w	800ac3c <_strtod_l+0x2e4>
 800b52e:	bf00      	nop
 800b530:	ffc00000 	.word	0xffc00000
 800b534:	41dfffff 	.word	0x41dfffff
 800b538:	94a03595 	.word	0x94a03595
 800b53c:	3fcfffff 	.word	0x3fcfffff

0800b540 <_strtod_r>:
 800b540:	4b01      	ldr	r3, [pc, #4]	; (800b548 <_strtod_r+0x8>)
 800b542:	f7ff ba09 	b.w	800a958 <_strtod_l>
 800b546:	bf00      	nop
 800b548:	2000006c 	.word	0x2000006c

0800b54c <_strtol_l.constprop.0>:
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b552:	4686      	mov	lr, r0
 800b554:	4690      	mov	r8, r2
 800b556:	d001      	beq.n	800b55c <_strtol_l.constprop.0+0x10>
 800b558:	2b24      	cmp	r3, #36	; 0x24
 800b55a:	d906      	bls.n	800b56a <_strtol_l.constprop.0+0x1e>
 800b55c:	f7fd fd82 	bl	8009064 <__errno>
 800b560:	2316      	movs	r3, #22
 800b562:	6003      	str	r3, [r0, #0]
 800b564:	2000      	movs	r0, #0
 800b566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56a:	460d      	mov	r5, r1
 800b56c:	4835      	ldr	r0, [pc, #212]	; (800b644 <_strtol_l.constprop.0+0xf8>)
 800b56e:	462a      	mov	r2, r5
 800b570:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b574:	5d06      	ldrb	r6, [r0, r4]
 800b576:	f016 0608 	ands.w	r6, r6, #8
 800b57a:	d1f8      	bne.n	800b56e <_strtol_l.constprop.0+0x22>
 800b57c:	2c2d      	cmp	r4, #45	; 0x2d
 800b57e:	d12e      	bne.n	800b5de <_strtol_l.constprop.0+0x92>
 800b580:	2601      	movs	r6, #1
 800b582:	782c      	ldrb	r4, [r5, #0]
 800b584:	1c95      	adds	r5, r2, #2
 800b586:	2b00      	cmp	r3, #0
 800b588:	d057      	beq.n	800b63a <_strtol_l.constprop.0+0xee>
 800b58a:	2b10      	cmp	r3, #16
 800b58c:	d109      	bne.n	800b5a2 <_strtol_l.constprop.0+0x56>
 800b58e:	2c30      	cmp	r4, #48	; 0x30
 800b590:	d107      	bne.n	800b5a2 <_strtol_l.constprop.0+0x56>
 800b592:	782a      	ldrb	r2, [r5, #0]
 800b594:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b598:	2a58      	cmp	r2, #88	; 0x58
 800b59a:	d149      	bne.n	800b630 <_strtol_l.constprop.0+0xe4>
 800b59c:	2310      	movs	r3, #16
 800b59e:	786c      	ldrb	r4, [r5, #1]
 800b5a0:	3502      	adds	r5, #2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800b5a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b5ac:	fbbc f9f3 	udiv	r9, ip, r3
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	fb03 ca19 	mls	sl, r3, r9, ip
 800b5b6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b5ba:	2f09      	cmp	r7, #9
 800b5bc:	d814      	bhi.n	800b5e8 <_strtol_l.constprop.0+0x9c>
 800b5be:	463c      	mov	r4, r7
 800b5c0:	42a3      	cmp	r3, r4
 800b5c2:	dd20      	ble.n	800b606 <_strtol_l.constprop.0+0xba>
 800b5c4:	1c57      	adds	r7, r2, #1
 800b5c6:	d007      	beq.n	800b5d8 <_strtol_l.constprop.0+0x8c>
 800b5c8:	4581      	cmp	r9, r0
 800b5ca:	d319      	bcc.n	800b600 <_strtol_l.constprop.0+0xb4>
 800b5cc:	d101      	bne.n	800b5d2 <_strtol_l.constprop.0+0x86>
 800b5ce:	45a2      	cmp	sl, r4
 800b5d0:	db16      	blt.n	800b600 <_strtol_l.constprop.0+0xb4>
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	fb00 4003 	mla	r0, r0, r3, r4
 800b5d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5dc:	e7eb      	b.n	800b5b6 <_strtol_l.constprop.0+0x6a>
 800b5de:	2c2b      	cmp	r4, #43	; 0x2b
 800b5e0:	bf04      	itt	eq
 800b5e2:	782c      	ldrbeq	r4, [r5, #0]
 800b5e4:	1c95      	addeq	r5, r2, #2
 800b5e6:	e7ce      	b.n	800b586 <_strtol_l.constprop.0+0x3a>
 800b5e8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b5ec:	2f19      	cmp	r7, #25
 800b5ee:	d801      	bhi.n	800b5f4 <_strtol_l.constprop.0+0xa8>
 800b5f0:	3c37      	subs	r4, #55	; 0x37
 800b5f2:	e7e5      	b.n	800b5c0 <_strtol_l.constprop.0+0x74>
 800b5f4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b5f8:	2f19      	cmp	r7, #25
 800b5fa:	d804      	bhi.n	800b606 <_strtol_l.constprop.0+0xba>
 800b5fc:	3c57      	subs	r4, #87	; 0x57
 800b5fe:	e7df      	b.n	800b5c0 <_strtol_l.constprop.0+0x74>
 800b600:	f04f 32ff 	mov.w	r2, #4294967295
 800b604:	e7e8      	b.n	800b5d8 <_strtol_l.constprop.0+0x8c>
 800b606:	1c53      	adds	r3, r2, #1
 800b608:	d108      	bne.n	800b61c <_strtol_l.constprop.0+0xd0>
 800b60a:	2322      	movs	r3, #34	; 0x22
 800b60c:	4660      	mov	r0, ip
 800b60e:	f8ce 3000 	str.w	r3, [lr]
 800b612:	f1b8 0f00 	cmp.w	r8, #0
 800b616:	d0a6      	beq.n	800b566 <_strtol_l.constprop.0+0x1a>
 800b618:	1e69      	subs	r1, r5, #1
 800b61a:	e006      	b.n	800b62a <_strtol_l.constprop.0+0xde>
 800b61c:	b106      	cbz	r6, 800b620 <_strtol_l.constprop.0+0xd4>
 800b61e:	4240      	negs	r0, r0
 800b620:	f1b8 0f00 	cmp.w	r8, #0
 800b624:	d09f      	beq.n	800b566 <_strtol_l.constprop.0+0x1a>
 800b626:	2a00      	cmp	r2, #0
 800b628:	d1f6      	bne.n	800b618 <_strtol_l.constprop.0+0xcc>
 800b62a:	f8c8 1000 	str.w	r1, [r8]
 800b62e:	e79a      	b.n	800b566 <_strtol_l.constprop.0+0x1a>
 800b630:	2430      	movs	r4, #48	; 0x30
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1b5      	bne.n	800b5a2 <_strtol_l.constprop.0+0x56>
 800b636:	2308      	movs	r3, #8
 800b638:	e7b3      	b.n	800b5a2 <_strtol_l.constprop.0+0x56>
 800b63a:	2c30      	cmp	r4, #48	; 0x30
 800b63c:	d0a9      	beq.n	800b592 <_strtol_l.constprop.0+0x46>
 800b63e:	230a      	movs	r3, #10
 800b640:	e7af      	b.n	800b5a2 <_strtol_l.constprop.0+0x56>
 800b642:	bf00      	nop
 800b644:	0800cba1 	.word	0x0800cba1

0800b648 <_strtol_r>:
 800b648:	f7ff bf80 	b.w	800b54c <_strtol_l.constprop.0>

0800b64c <__ssputs_r>:
 800b64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b650:	461f      	mov	r7, r3
 800b652:	688e      	ldr	r6, [r1, #8]
 800b654:	4682      	mov	sl, r0
 800b656:	42be      	cmp	r6, r7
 800b658:	460c      	mov	r4, r1
 800b65a:	4690      	mov	r8, r2
 800b65c:	680b      	ldr	r3, [r1, #0]
 800b65e:	d82c      	bhi.n	800b6ba <__ssputs_r+0x6e>
 800b660:	898a      	ldrh	r2, [r1, #12]
 800b662:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b666:	d026      	beq.n	800b6b6 <__ssputs_r+0x6a>
 800b668:	6965      	ldr	r5, [r4, #20]
 800b66a:	6909      	ldr	r1, [r1, #16]
 800b66c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b670:	eba3 0901 	sub.w	r9, r3, r1
 800b674:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b678:	1c7b      	adds	r3, r7, #1
 800b67a:	444b      	add	r3, r9
 800b67c:	106d      	asrs	r5, r5, #1
 800b67e:	429d      	cmp	r5, r3
 800b680:	bf38      	it	cc
 800b682:	461d      	movcc	r5, r3
 800b684:	0553      	lsls	r3, r2, #21
 800b686:	d527      	bpl.n	800b6d8 <__ssputs_r+0x8c>
 800b688:	4629      	mov	r1, r5
 800b68a:	f7fe fc19 	bl	8009ec0 <_malloc_r>
 800b68e:	4606      	mov	r6, r0
 800b690:	b360      	cbz	r0, 800b6ec <__ssputs_r+0xa0>
 800b692:	464a      	mov	r2, r9
 800b694:	6921      	ldr	r1, [r4, #16]
 800b696:	f7fd fd20 	bl	80090da <memcpy>
 800b69a:	89a3      	ldrh	r3, [r4, #12]
 800b69c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6a4:	81a3      	strh	r3, [r4, #12]
 800b6a6:	6126      	str	r6, [r4, #16]
 800b6a8:	444e      	add	r6, r9
 800b6aa:	6026      	str	r6, [r4, #0]
 800b6ac:	463e      	mov	r6, r7
 800b6ae:	6165      	str	r5, [r4, #20]
 800b6b0:	eba5 0509 	sub.w	r5, r5, r9
 800b6b4:	60a5      	str	r5, [r4, #8]
 800b6b6:	42be      	cmp	r6, r7
 800b6b8:	d900      	bls.n	800b6bc <__ssputs_r+0x70>
 800b6ba:	463e      	mov	r6, r7
 800b6bc:	4632      	mov	r2, r6
 800b6be:	4641      	mov	r1, r8
 800b6c0:	6820      	ldr	r0, [r4, #0]
 800b6c2:	f000 fb9d 	bl	800be00 <memmove>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	68a3      	ldr	r3, [r4, #8]
 800b6ca:	1b9b      	subs	r3, r3, r6
 800b6cc:	60a3      	str	r3, [r4, #8]
 800b6ce:	6823      	ldr	r3, [r4, #0]
 800b6d0:	4433      	add	r3, r6
 800b6d2:	6023      	str	r3, [r4, #0]
 800b6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d8:	462a      	mov	r2, r5
 800b6da:	f000 ff70 	bl	800c5be <_realloc_r>
 800b6de:	4606      	mov	r6, r0
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d1e0      	bne.n	800b6a6 <__ssputs_r+0x5a>
 800b6e4:	4650      	mov	r0, sl
 800b6e6:	6921      	ldr	r1, [r4, #16]
 800b6e8:	f7fe fb7a 	bl	8009de0 <_free_r>
 800b6ec:	230c      	movs	r3, #12
 800b6ee:	f8ca 3000 	str.w	r3, [sl]
 800b6f2:	89a3      	ldrh	r3, [r4, #12]
 800b6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6fc:	81a3      	strh	r3, [r4, #12]
 800b6fe:	e7e9      	b.n	800b6d4 <__ssputs_r+0x88>

0800b700 <_svfiprintf_r>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	4698      	mov	r8, r3
 800b706:	898b      	ldrh	r3, [r1, #12]
 800b708:	4607      	mov	r7, r0
 800b70a:	061b      	lsls	r3, r3, #24
 800b70c:	460d      	mov	r5, r1
 800b70e:	4614      	mov	r4, r2
 800b710:	b09d      	sub	sp, #116	; 0x74
 800b712:	d50e      	bpl.n	800b732 <_svfiprintf_r+0x32>
 800b714:	690b      	ldr	r3, [r1, #16]
 800b716:	b963      	cbnz	r3, 800b732 <_svfiprintf_r+0x32>
 800b718:	2140      	movs	r1, #64	; 0x40
 800b71a:	f7fe fbd1 	bl	8009ec0 <_malloc_r>
 800b71e:	6028      	str	r0, [r5, #0]
 800b720:	6128      	str	r0, [r5, #16]
 800b722:	b920      	cbnz	r0, 800b72e <_svfiprintf_r+0x2e>
 800b724:	230c      	movs	r3, #12
 800b726:	603b      	str	r3, [r7, #0]
 800b728:	f04f 30ff 	mov.w	r0, #4294967295
 800b72c:	e0d0      	b.n	800b8d0 <_svfiprintf_r+0x1d0>
 800b72e:	2340      	movs	r3, #64	; 0x40
 800b730:	616b      	str	r3, [r5, #20]
 800b732:	2300      	movs	r3, #0
 800b734:	9309      	str	r3, [sp, #36]	; 0x24
 800b736:	2320      	movs	r3, #32
 800b738:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b73c:	2330      	movs	r3, #48	; 0x30
 800b73e:	f04f 0901 	mov.w	r9, #1
 800b742:	f8cd 800c 	str.w	r8, [sp, #12]
 800b746:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b8e8 <_svfiprintf_r+0x1e8>
 800b74a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b74e:	4623      	mov	r3, r4
 800b750:	469a      	mov	sl, r3
 800b752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b756:	b10a      	cbz	r2, 800b75c <_svfiprintf_r+0x5c>
 800b758:	2a25      	cmp	r2, #37	; 0x25
 800b75a:	d1f9      	bne.n	800b750 <_svfiprintf_r+0x50>
 800b75c:	ebba 0b04 	subs.w	fp, sl, r4
 800b760:	d00b      	beq.n	800b77a <_svfiprintf_r+0x7a>
 800b762:	465b      	mov	r3, fp
 800b764:	4622      	mov	r2, r4
 800b766:	4629      	mov	r1, r5
 800b768:	4638      	mov	r0, r7
 800b76a:	f7ff ff6f 	bl	800b64c <__ssputs_r>
 800b76e:	3001      	adds	r0, #1
 800b770:	f000 80a9 	beq.w	800b8c6 <_svfiprintf_r+0x1c6>
 800b774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b776:	445a      	add	r2, fp
 800b778:	9209      	str	r2, [sp, #36]	; 0x24
 800b77a:	f89a 3000 	ldrb.w	r3, [sl]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f000 80a1 	beq.w	800b8c6 <_svfiprintf_r+0x1c6>
 800b784:	2300      	movs	r3, #0
 800b786:	f04f 32ff 	mov.w	r2, #4294967295
 800b78a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b78e:	f10a 0a01 	add.w	sl, sl, #1
 800b792:	9304      	str	r3, [sp, #16]
 800b794:	9307      	str	r3, [sp, #28]
 800b796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b79a:	931a      	str	r3, [sp, #104]	; 0x68
 800b79c:	4654      	mov	r4, sl
 800b79e:	2205      	movs	r2, #5
 800b7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a4:	4850      	ldr	r0, [pc, #320]	; (800b8e8 <_svfiprintf_r+0x1e8>)
 800b7a6:	f7fd fc8a 	bl	80090be <memchr>
 800b7aa:	9a04      	ldr	r2, [sp, #16]
 800b7ac:	b9d8      	cbnz	r0, 800b7e6 <_svfiprintf_r+0xe6>
 800b7ae:	06d0      	lsls	r0, r2, #27
 800b7b0:	bf44      	itt	mi
 800b7b2:	2320      	movmi	r3, #32
 800b7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7b8:	0711      	lsls	r1, r2, #28
 800b7ba:	bf44      	itt	mi
 800b7bc:	232b      	movmi	r3, #43	; 0x2b
 800b7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7c8:	d015      	beq.n	800b7f6 <_svfiprintf_r+0xf6>
 800b7ca:	4654      	mov	r4, sl
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	f04f 0c0a 	mov.w	ip, #10
 800b7d2:	9a07      	ldr	r2, [sp, #28]
 800b7d4:	4621      	mov	r1, r4
 800b7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7da:	3b30      	subs	r3, #48	; 0x30
 800b7dc:	2b09      	cmp	r3, #9
 800b7de:	d94d      	bls.n	800b87c <_svfiprintf_r+0x17c>
 800b7e0:	b1b0      	cbz	r0, 800b810 <_svfiprintf_r+0x110>
 800b7e2:	9207      	str	r2, [sp, #28]
 800b7e4:	e014      	b.n	800b810 <_svfiprintf_r+0x110>
 800b7e6:	eba0 0308 	sub.w	r3, r0, r8
 800b7ea:	fa09 f303 	lsl.w	r3, r9, r3
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	46a2      	mov	sl, r4
 800b7f2:	9304      	str	r3, [sp, #16]
 800b7f4:	e7d2      	b.n	800b79c <_svfiprintf_r+0x9c>
 800b7f6:	9b03      	ldr	r3, [sp, #12]
 800b7f8:	1d19      	adds	r1, r3, #4
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	9103      	str	r1, [sp, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	bfbb      	ittet	lt
 800b802:	425b      	neglt	r3, r3
 800b804:	f042 0202 	orrlt.w	r2, r2, #2
 800b808:	9307      	strge	r3, [sp, #28]
 800b80a:	9307      	strlt	r3, [sp, #28]
 800b80c:	bfb8      	it	lt
 800b80e:	9204      	strlt	r2, [sp, #16]
 800b810:	7823      	ldrb	r3, [r4, #0]
 800b812:	2b2e      	cmp	r3, #46	; 0x2e
 800b814:	d10c      	bne.n	800b830 <_svfiprintf_r+0x130>
 800b816:	7863      	ldrb	r3, [r4, #1]
 800b818:	2b2a      	cmp	r3, #42	; 0x2a
 800b81a:	d134      	bne.n	800b886 <_svfiprintf_r+0x186>
 800b81c:	9b03      	ldr	r3, [sp, #12]
 800b81e:	3402      	adds	r4, #2
 800b820:	1d1a      	adds	r2, r3, #4
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	9203      	str	r2, [sp, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	bfb8      	it	lt
 800b82a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b82e:	9305      	str	r3, [sp, #20]
 800b830:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b8ec <_svfiprintf_r+0x1ec>
 800b834:	2203      	movs	r2, #3
 800b836:	4650      	mov	r0, sl
 800b838:	7821      	ldrb	r1, [r4, #0]
 800b83a:	f7fd fc40 	bl	80090be <memchr>
 800b83e:	b138      	cbz	r0, 800b850 <_svfiprintf_r+0x150>
 800b840:	2240      	movs	r2, #64	; 0x40
 800b842:	9b04      	ldr	r3, [sp, #16]
 800b844:	eba0 000a 	sub.w	r0, r0, sl
 800b848:	4082      	lsls	r2, r0
 800b84a:	4313      	orrs	r3, r2
 800b84c:	3401      	adds	r4, #1
 800b84e:	9304      	str	r3, [sp, #16]
 800b850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b854:	2206      	movs	r2, #6
 800b856:	4826      	ldr	r0, [pc, #152]	; (800b8f0 <_svfiprintf_r+0x1f0>)
 800b858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b85c:	f7fd fc2f 	bl	80090be <memchr>
 800b860:	2800      	cmp	r0, #0
 800b862:	d038      	beq.n	800b8d6 <_svfiprintf_r+0x1d6>
 800b864:	4b23      	ldr	r3, [pc, #140]	; (800b8f4 <_svfiprintf_r+0x1f4>)
 800b866:	bb1b      	cbnz	r3, 800b8b0 <_svfiprintf_r+0x1b0>
 800b868:	9b03      	ldr	r3, [sp, #12]
 800b86a:	3307      	adds	r3, #7
 800b86c:	f023 0307 	bic.w	r3, r3, #7
 800b870:	3308      	adds	r3, #8
 800b872:	9303      	str	r3, [sp, #12]
 800b874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b876:	4433      	add	r3, r6
 800b878:	9309      	str	r3, [sp, #36]	; 0x24
 800b87a:	e768      	b.n	800b74e <_svfiprintf_r+0x4e>
 800b87c:	460c      	mov	r4, r1
 800b87e:	2001      	movs	r0, #1
 800b880:	fb0c 3202 	mla	r2, ip, r2, r3
 800b884:	e7a6      	b.n	800b7d4 <_svfiprintf_r+0xd4>
 800b886:	2300      	movs	r3, #0
 800b888:	f04f 0c0a 	mov.w	ip, #10
 800b88c:	4619      	mov	r1, r3
 800b88e:	3401      	adds	r4, #1
 800b890:	9305      	str	r3, [sp, #20]
 800b892:	4620      	mov	r0, r4
 800b894:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b898:	3a30      	subs	r2, #48	; 0x30
 800b89a:	2a09      	cmp	r2, #9
 800b89c:	d903      	bls.n	800b8a6 <_svfiprintf_r+0x1a6>
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d0c6      	beq.n	800b830 <_svfiprintf_r+0x130>
 800b8a2:	9105      	str	r1, [sp, #20]
 800b8a4:	e7c4      	b.n	800b830 <_svfiprintf_r+0x130>
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8ae:	e7f0      	b.n	800b892 <_svfiprintf_r+0x192>
 800b8b0:	ab03      	add	r3, sp, #12
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	462a      	mov	r2, r5
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	4b0f      	ldr	r3, [pc, #60]	; (800b8f8 <_svfiprintf_r+0x1f8>)
 800b8ba:	a904      	add	r1, sp, #16
 800b8bc:	f7fc fc78 	bl	80081b0 <_printf_float>
 800b8c0:	1c42      	adds	r2, r0, #1
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	d1d6      	bne.n	800b874 <_svfiprintf_r+0x174>
 800b8c6:	89ab      	ldrh	r3, [r5, #12]
 800b8c8:	065b      	lsls	r3, r3, #25
 800b8ca:	f53f af2d 	bmi.w	800b728 <_svfiprintf_r+0x28>
 800b8ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8d0:	b01d      	add	sp, #116	; 0x74
 800b8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d6:	ab03      	add	r3, sp, #12
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	462a      	mov	r2, r5
 800b8dc:	4638      	mov	r0, r7
 800b8de:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <_svfiprintf_r+0x1f8>)
 800b8e0:	a904      	add	r1, sp, #16
 800b8e2:	f7fc ff05 	bl	80086f0 <_printf_i>
 800b8e6:	e7eb      	b.n	800b8c0 <_svfiprintf_r+0x1c0>
 800b8e8:	0800cca1 	.word	0x0800cca1
 800b8ec:	0800cca7 	.word	0x0800cca7
 800b8f0:	0800ccab 	.word	0x0800ccab
 800b8f4:	080081b1 	.word	0x080081b1
 800b8f8:	0800b64d 	.word	0x0800b64d

0800b8fc <__sfputc_r>:
 800b8fc:	6893      	ldr	r3, [r2, #8]
 800b8fe:	b410      	push	{r4}
 800b900:	3b01      	subs	r3, #1
 800b902:	2b00      	cmp	r3, #0
 800b904:	6093      	str	r3, [r2, #8]
 800b906:	da07      	bge.n	800b918 <__sfputc_r+0x1c>
 800b908:	6994      	ldr	r4, [r2, #24]
 800b90a:	42a3      	cmp	r3, r4
 800b90c:	db01      	blt.n	800b912 <__sfputc_r+0x16>
 800b90e:	290a      	cmp	r1, #10
 800b910:	d102      	bne.n	800b918 <__sfputc_r+0x1c>
 800b912:	bc10      	pop	{r4}
 800b914:	f000 b9de 	b.w	800bcd4 <__swbuf_r>
 800b918:	6813      	ldr	r3, [r2, #0]
 800b91a:	1c58      	adds	r0, r3, #1
 800b91c:	6010      	str	r0, [r2, #0]
 800b91e:	7019      	strb	r1, [r3, #0]
 800b920:	4608      	mov	r0, r1
 800b922:	bc10      	pop	{r4}
 800b924:	4770      	bx	lr

0800b926 <__sfputs_r>:
 800b926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b928:	4606      	mov	r6, r0
 800b92a:	460f      	mov	r7, r1
 800b92c:	4614      	mov	r4, r2
 800b92e:	18d5      	adds	r5, r2, r3
 800b930:	42ac      	cmp	r4, r5
 800b932:	d101      	bne.n	800b938 <__sfputs_r+0x12>
 800b934:	2000      	movs	r0, #0
 800b936:	e007      	b.n	800b948 <__sfputs_r+0x22>
 800b938:	463a      	mov	r2, r7
 800b93a:	4630      	mov	r0, r6
 800b93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b940:	f7ff ffdc 	bl	800b8fc <__sfputc_r>
 800b944:	1c43      	adds	r3, r0, #1
 800b946:	d1f3      	bne.n	800b930 <__sfputs_r+0xa>
 800b948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b94c <_vfiprintf_r>:
 800b94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b950:	460d      	mov	r5, r1
 800b952:	4614      	mov	r4, r2
 800b954:	4698      	mov	r8, r3
 800b956:	4606      	mov	r6, r0
 800b958:	b09d      	sub	sp, #116	; 0x74
 800b95a:	b118      	cbz	r0, 800b964 <_vfiprintf_r+0x18>
 800b95c:	6a03      	ldr	r3, [r0, #32]
 800b95e:	b90b      	cbnz	r3, 800b964 <_vfiprintf_r+0x18>
 800b960:	f7fd fa82 	bl	8008e68 <__sinit>
 800b964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b966:	07d9      	lsls	r1, r3, #31
 800b968:	d405      	bmi.n	800b976 <_vfiprintf_r+0x2a>
 800b96a:	89ab      	ldrh	r3, [r5, #12]
 800b96c:	059a      	lsls	r2, r3, #22
 800b96e:	d402      	bmi.n	800b976 <_vfiprintf_r+0x2a>
 800b970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b972:	f7fd fba2 	bl	80090ba <__retarget_lock_acquire_recursive>
 800b976:	89ab      	ldrh	r3, [r5, #12]
 800b978:	071b      	lsls	r3, r3, #28
 800b97a:	d501      	bpl.n	800b980 <_vfiprintf_r+0x34>
 800b97c:	692b      	ldr	r3, [r5, #16]
 800b97e:	b99b      	cbnz	r3, 800b9a8 <_vfiprintf_r+0x5c>
 800b980:	4629      	mov	r1, r5
 800b982:	4630      	mov	r0, r6
 800b984:	f000 f9e4 	bl	800bd50 <__swsetup_r>
 800b988:	b170      	cbz	r0, 800b9a8 <_vfiprintf_r+0x5c>
 800b98a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b98c:	07dc      	lsls	r4, r3, #31
 800b98e:	d504      	bpl.n	800b99a <_vfiprintf_r+0x4e>
 800b990:	f04f 30ff 	mov.w	r0, #4294967295
 800b994:	b01d      	add	sp, #116	; 0x74
 800b996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99a:	89ab      	ldrh	r3, [r5, #12]
 800b99c:	0598      	lsls	r0, r3, #22
 800b99e:	d4f7      	bmi.n	800b990 <_vfiprintf_r+0x44>
 800b9a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9a2:	f7fd fb8b 	bl	80090bc <__retarget_lock_release_recursive>
 800b9a6:	e7f3      	b.n	800b990 <_vfiprintf_r+0x44>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ac:	2320      	movs	r3, #32
 800b9ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9b2:	2330      	movs	r3, #48	; 0x30
 800b9b4:	f04f 0901 	mov.w	r9, #1
 800b9b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800bb6c <_vfiprintf_r+0x220>
 800b9c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9c4:	4623      	mov	r3, r4
 800b9c6:	469a      	mov	sl, r3
 800b9c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9cc:	b10a      	cbz	r2, 800b9d2 <_vfiprintf_r+0x86>
 800b9ce:	2a25      	cmp	r2, #37	; 0x25
 800b9d0:	d1f9      	bne.n	800b9c6 <_vfiprintf_r+0x7a>
 800b9d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b9d6:	d00b      	beq.n	800b9f0 <_vfiprintf_r+0xa4>
 800b9d8:	465b      	mov	r3, fp
 800b9da:	4622      	mov	r2, r4
 800b9dc:	4629      	mov	r1, r5
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f7ff ffa1 	bl	800b926 <__sfputs_r>
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	f000 80a9 	beq.w	800bb3c <_vfiprintf_r+0x1f0>
 800b9ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9ec:	445a      	add	r2, fp
 800b9ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 80a1 	beq.w	800bb3c <_vfiprintf_r+0x1f0>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800ba00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba04:	f10a 0a01 	add.w	sl, sl, #1
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	9307      	str	r3, [sp, #28]
 800ba0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba10:	931a      	str	r3, [sp, #104]	; 0x68
 800ba12:	4654      	mov	r4, sl
 800ba14:	2205      	movs	r2, #5
 800ba16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba1a:	4854      	ldr	r0, [pc, #336]	; (800bb6c <_vfiprintf_r+0x220>)
 800ba1c:	f7fd fb4f 	bl	80090be <memchr>
 800ba20:	9a04      	ldr	r2, [sp, #16]
 800ba22:	b9d8      	cbnz	r0, 800ba5c <_vfiprintf_r+0x110>
 800ba24:	06d1      	lsls	r1, r2, #27
 800ba26:	bf44      	itt	mi
 800ba28:	2320      	movmi	r3, #32
 800ba2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba2e:	0713      	lsls	r3, r2, #28
 800ba30:	bf44      	itt	mi
 800ba32:	232b      	movmi	r3, #43	; 0x2b
 800ba34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba38:	f89a 3000 	ldrb.w	r3, [sl]
 800ba3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba3e:	d015      	beq.n	800ba6c <_vfiprintf_r+0x120>
 800ba40:	4654      	mov	r4, sl
 800ba42:	2000      	movs	r0, #0
 800ba44:	f04f 0c0a 	mov.w	ip, #10
 800ba48:	9a07      	ldr	r2, [sp, #28]
 800ba4a:	4621      	mov	r1, r4
 800ba4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba50:	3b30      	subs	r3, #48	; 0x30
 800ba52:	2b09      	cmp	r3, #9
 800ba54:	d94d      	bls.n	800baf2 <_vfiprintf_r+0x1a6>
 800ba56:	b1b0      	cbz	r0, 800ba86 <_vfiprintf_r+0x13a>
 800ba58:	9207      	str	r2, [sp, #28]
 800ba5a:	e014      	b.n	800ba86 <_vfiprintf_r+0x13a>
 800ba5c:	eba0 0308 	sub.w	r3, r0, r8
 800ba60:	fa09 f303 	lsl.w	r3, r9, r3
 800ba64:	4313      	orrs	r3, r2
 800ba66:	46a2      	mov	sl, r4
 800ba68:	9304      	str	r3, [sp, #16]
 800ba6a:	e7d2      	b.n	800ba12 <_vfiprintf_r+0xc6>
 800ba6c:	9b03      	ldr	r3, [sp, #12]
 800ba6e:	1d19      	adds	r1, r3, #4
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	9103      	str	r1, [sp, #12]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	bfbb      	ittet	lt
 800ba78:	425b      	neglt	r3, r3
 800ba7a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba7e:	9307      	strge	r3, [sp, #28]
 800ba80:	9307      	strlt	r3, [sp, #28]
 800ba82:	bfb8      	it	lt
 800ba84:	9204      	strlt	r2, [sp, #16]
 800ba86:	7823      	ldrb	r3, [r4, #0]
 800ba88:	2b2e      	cmp	r3, #46	; 0x2e
 800ba8a:	d10c      	bne.n	800baa6 <_vfiprintf_r+0x15a>
 800ba8c:	7863      	ldrb	r3, [r4, #1]
 800ba8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba90:	d134      	bne.n	800bafc <_vfiprintf_r+0x1b0>
 800ba92:	9b03      	ldr	r3, [sp, #12]
 800ba94:	3402      	adds	r4, #2
 800ba96:	1d1a      	adds	r2, r3, #4
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	9203      	str	r2, [sp, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	bfb8      	it	lt
 800baa0:	f04f 33ff 	movlt.w	r3, #4294967295
 800baa4:	9305      	str	r3, [sp, #20]
 800baa6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb70 <_vfiprintf_r+0x224>
 800baaa:	2203      	movs	r2, #3
 800baac:	4650      	mov	r0, sl
 800baae:	7821      	ldrb	r1, [r4, #0]
 800bab0:	f7fd fb05 	bl	80090be <memchr>
 800bab4:	b138      	cbz	r0, 800bac6 <_vfiprintf_r+0x17a>
 800bab6:	2240      	movs	r2, #64	; 0x40
 800bab8:	9b04      	ldr	r3, [sp, #16]
 800baba:	eba0 000a 	sub.w	r0, r0, sl
 800babe:	4082      	lsls	r2, r0
 800bac0:	4313      	orrs	r3, r2
 800bac2:	3401      	adds	r4, #1
 800bac4:	9304      	str	r3, [sp, #16]
 800bac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baca:	2206      	movs	r2, #6
 800bacc:	4829      	ldr	r0, [pc, #164]	; (800bb74 <_vfiprintf_r+0x228>)
 800bace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bad2:	f7fd faf4 	bl	80090be <memchr>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d03f      	beq.n	800bb5a <_vfiprintf_r+0x20e>
 800bada:	4b27      	ldr	r3, [pc, #156]	; (800bb78 <_vfiprintf_r+0x22c>)
 800badc:	bb1b      	cbnz	r3, 800bb26 <_vfiprintf_r+0x1da>
 800bade:	9b03      	ldr	r3, [sp, #12]
 800bae0:	3307      	adds	r3, #7
 800bae2:	f023 0307 	bic.w	r3, r3, #7
 800bae6:	3308      	adds	r3, #8
 800bae8:	9303      	str	r3, [sp, #12]
 800baea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baec:	443b      	add	r3, r7
 800baee:	9309      	str	r3, [sp, #36]	; 0x24
 800baf0:	e768      	b.n	800b9c4 <_vfiprintf_r+0x78>
 800baf2:	460c      	mov	r4, r1
 800baf4:	2001      	movs	r0, #1
 800baf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bafa:	e7a6      	b.n	800ba4a <_vfiprintf_r+0xfe>
 800bafc:	2300      	movs	r3, #0
 800bafe:	f04f 0c0a 	mov.w	ip, #10
 800bb02:	4619      	mov	r1, r3
 800bb04:	3401      	adds	r4, #1
 800bb06:	9305      	str	r3, [sp, #20]
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb0e:	3a30      	subs	r2, #48	; 0x30
 800bb10:	2a09      	cmp	r2, #9
 800bb12:	d903      	bls.n	800bb1c <_vfiprintf_r+0x1d0>
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d0c6      	beq.n	800baa6 <_vfiprintf_r+0x15a>
 800bb18:	9105      	str	r1, [sp, #20]
 800bb1a:	e7c4      	b.n	800baa6 <_vfiprintf_r+0x15a>
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	2301      	movs	r3, #1
 800bb20:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb24:	e7f0      	b.n	800bb08 <_vfiprintf_r+0x1bc>
 800bb26:	ab03      	add	r3, sp, #12
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	462a      	mov	r2, r5
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	4b13      	ldr	r3, [pc, #76]	; (800bb7c <_vfiprintf_r+0x230>)
 800bb30:	a904      	add	r1, sp, #16
 800bb32:	f7fc fb3d 	bl	80081b0 <_printf_float>
 800bb36:	4607      	mov	r7, r0
 800bb38:	1c78      	adds	r0, r7, #1
 800bb3a:	d1d6      	bne.n	800baea <_vfiprintf_r+0x19e>
 800bb3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb3e:	07d9      	lsls	r1, r3, #31
 800bb40:	d405      	bmi.n	800bb4e <_vfiprintf_r+0x202>
 800bb42:	89ab      	ldrh	r3, [r5, #12]
 800bb44:	059a      	lsls	r2, r3, #22
 800bb46:	d402      	bmi.n	800bb4e <_vfiprintf_r+0x202>
 800bb48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb4a:	f7fd fab7 	bl	80090bc <__retarget_lock_release_recursive>
 800bb4e:	89ab      	ldrh	r3, [r5, #12]
 800bb50:	065b      	lsls	r3, r3, #25
 800bb52:	f53f af1d 	bmi.w	800b990 <_vfiprintf_r+0x44>
 800bb56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb58:	e71c      	b.n	800b994 <_vfiprintf_r+0x48>
 800bb5a:	ab03      	add	r3, sp, #12
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	462a      	mov	r2, r5
 800bb60:	4630      	mov	r0, r6
 800bb62:	4b06      	ldr	r3, [pc, #24]	; (800bb7c <_vfiprintf_r+0x230>)
 800bb64:	a904      	add	r1, sp, #16
 800bb66:	f7fc fdc3 	bl	80086f0 <_printf_i>
 800bb6a:	e7e4      	b.n	800bb36 <_vfiprintf_r+0x1ea>
 800bb6c:	0800cca1 	.word	0x0800cca1
 800bb70:	0800cca7 	.word	0x0800cca7
 800bb74:	0800ccab 	.word	0x0800ccab
 800bb78:	080081b1 	.word	0x080081b1
 800bb7c:	0800b927 	.word	0x0800b927

0800bb80 <__sflush_r>:
 800bb80:	898a      	ldrh	r2, [r1, #12]
 800bb82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb84:	4605      	mov	r5, r0
 800bb86:	0710      	lsls	r0, r2, #28
 800bb88:	460c      	mov	r4, r1
 800bb8a:	d457      	bmi.n	800bc3c <__sflush_r+0xbc>
 800bb8c:	684b      	ldr	r3, [r1, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	dc04      	bgt.n	800bb9c <__sflush_r+0x1c>
 800bb92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	dc01      	bgt.n	800bb9c <__sflush_r+0x1c>
 800bb98:	2000      	movs	r0, #0
 800bb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb9e:	2e00      	cmp	r6, #0
 800bba0:	d0fa      	beq.n	800bb98 <__sflush_r+0x18>
 800bba2:	2300      	movs	r3, #0
 800bba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bba8:	682f      	ldr	r7, [r5, #0]
 800bbaa:	6a21      	ldr	r1, [r4, #32]
 800bbac:	602b      	str	r3, [r5, #0]
 800bbae:	d032      	beq.n	800bc16 <__sflush_r+0x96>
 800bbb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	075a      	lsls	r2, r3, #29
 800bbb6:	d505      	bpl.n	800bbc4 <__sflush_r+0x44>
 800bbb8:	6863      	ldr	r3, [r4, #4]
 800bbba:	1ac0      	subs	r0, r0, r3
 800bbbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbbe:	b10b      	cbz	r3, 800bbc4 <__sflush_r+0x44>
 800bbc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbc2:	1ac0      	subs	r0, r0, r3
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbca:	4628      	mov	r0, r5
 800bbcc:	6a21      	ldr	r1, [r4, #32]
 800bbce:	47b0      	blx	r6
 800bbd0:	1c43      	adds	r3, r0, #1
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	d106      	bne.n	800bbe4 <__sflush_r+0x64>
 800bbd6:	6829      	ldr	r1, [r5, #0]
 800bbd8:	291d      	cmp	r1, #29
 800bbda:	d82b      	bhi.n	800bc34 <__sflush_r+0xb4>
 800bbdc:	4a28      	ldr	r2, [pc, #160]	; (800bc80 <__sflush_r+0x100>)
 800bbde:	410a      	asrs	r2, r1
 800bbe0:	07d6      	lsls	r6, r2, #31
 800bbe2:	d427      	bmi.n	800bc34 <__sflush_r+0xb4>
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	6062      	str	r2, [r4, #4]
 800bbe8:	6922      	ldr	r2, [r4, #16]
 800bbea:	04d9      	lsls	r1, r3, #19
 800bbec:	6022      	str	r2, [r4, #0]
 800bbee:	d504      	bpl.n	800bbfa <__sflush_r+0x7a>
 800bbf0:	1c42      	adds	r2, r0, #1
 800bbf2:	d101      	bne.n	800bbf8 <__sflush_r+0x78>
 800bbf4:	682b      	ldr	r3, [r5, #0]
 800bbf6:	b903      	cbnz	r3, 800bbfa <__sflush_r+0x7a>
 800bbf8:	6560      	str	r0, [r4, #84]	; 0x54
 800bbfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbfc:	602f      	str	r7, [r5, #0]
 800bbfe:	2900      	cmp	r1, #0
 800bc00:	d0ca      	beq.n	800bb98 <__sflush_r+0x18>
 800bc02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc06:	4299      	cmp	r1, r3
 800bc08:	d002      	beq.n	800bc10 <__sflush_r+0x90>
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f7fe f8e8 	bl	8009de0 <_free_r>
 800bc10:	2000      	movs	r0, #0
 800bc12:	6360      	str	r0, [r4, #52]	; 0x34
 800bc14:	e7c1      	b.n	800bb9a <__sflush_r+0x1a>
 800bc16:	2301      	movs	r3, #1
 800bc18:	4628      	mov	r0, r5
 800bc1a:	47b0      	blx	r6
 800bc1c:	1c41      	adds	r1, r0, #1
 800bc1e:	d1c8      	bne.n	800bbb2 <__sflush_r+0x32>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d0c5      	beq.n	800bbb2 <__sflush_r+0x32>
 800bc26:	2b1d      	cmp	r3, #29
 800bc28:	d001      	beq.n	800bc2e <__sflush_r+0xae>
 800bc2a:	2b16      	cmp	r3, #22
 800bc2c:	d101      	bne.n	800bc32 <__sflush_r+0xb2>
 800bc2e:	602f      	str	r7, [r5, #0]
 800bc30:	e7b2      	b.n	800bb98 <__sflush_r+0x18>
 800bc32:	89a3      	ldrh	r3, [r4, #12]
 800bc34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc38:	81a3      	strh	r3, [r4, #12]
 800bc3a:	e7ae      	b.n	800bb9a <__sflush_r+0x1a>
 800bc3c:	690f      	ldr	r7, [r1, #16]
 800bc3e:	2f00      	cmp	r7, #0
 800bc40:	d0aa      	beq.n	800bb98 <__sflush_r+0x18>
 800bc42:	0793      	lsls	r3, r2, #30
 800bc44:	bf18      	it	ne
 800bc46:	2300      	movne	r3, #0
 800bc48:	680e      	ldr	r6, [r1, #0]
 800bc4a:	bf08      	it	eq
 800bc4c:	694b      	ldreq	r3, [r1, #20]
 800bc4e:	1bf6      	subs	r6, r6, r7
 800bc50:	600f      	str	r7, [r1, #0]
 800bc52:	608b      	str	r3, [r1, #8]
 800bc54:	2e00      	cmp	r6, #0
 800bc56:	dd9f      	ble.n	800bb98 <__sflush_r+0x18>
 800bc58:	4633      	mov	r3, r6
 800bc5a:	463a      	mov	r2, r7
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	6a21      	ldr	r1, [r4, #32]
 800bc60:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bc64:	47e0      	blx	ip
 800bc66:	2800      	cmp	r0, #0
 800bc68:	dc06      	bgt.n	800bc78 <__sflush_r+0xf8>
 800bc6a:	89a3      	ldrh	r3, [r4, #12]
 800bc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc74:	81a3      	strh	r3, [r4, #12]
 800bc76:	e790      	b.n	800bb9a <__sflush_r+0x1a>
 800bc78:	4407      	add	r7, r0
 800bc7a:	1a36      	subs	r6, r6, r0
 800bc7c:	e7ea      	b.n	800bc54 <__sflush_r+0xd4>
 800bc7e:	bf00      	nop
 800bc80:	dfbffffe 	.word	0xdfbffffe

0800bc84 <_fflush_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	690b      	ldr	r3, [r1, #16]
 800bc88:	4605      	mov	r5, r0
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	b913      	cbnz	r3, 800bc94 <_fflush_r+0x10>
 800bc8e:	2500      	movs	r5, #0
 800bc90:	4628      	mov	r0, r5
 800bc92:	bd38      	pop	{r3, r4, r5, pc}
 800bc94:	b118      	cbz	r0, 800bc9e <_fflush_r+0x1a>
 800bc96:	6a03      	ldr	r3, [r0, #32]
 800bc98:	b90b      	cbnz	r3, 800bc9e <_fflush_r+0x1a>
 800bc9a:	f7fd f8e5 	bl	8008e68 <__sinit>
 800bc9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d0f3      	beq.n	800bc8e <_fflush_r+0xa>
 800bca6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bca8:	07d0      	lsls	r0, r2, #31
 800bcaa:	d404      	bmi.n	800bcb6 <_fflush_r+0x32>
 800bcac:	0599      	lsls	r1, r3, #22
 800bcae:	d402      	bmi.n	800bcb6 <_fflush_r+0x32>
 800bcb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcb2:	f7fd fa02 	bl	80090ba <__retarget_lock_acquire_recursive>
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	4621      	mov	r1, r4
 800bcba:	f7ff ff61 	bl	800bb80 <__sflush_r>
 800bcbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcc0:	4605      	mov	r5, r0
 800bcc2:	07da      	lsls	r2, r3, #31
 800bcc4:	d4e4      	bmi.n	800bc90 <_fflush_r+0xc>
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	059b      	lsls	r3, r3, #22
 800bcca:	d4e1      	bmi.n	800bc90 <_fflush_r+0xc>
 800bccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcce:	f7fd f9f5 	bl	80090bc <__retarget_lock_release_recursive>
 800bcd2:	e7dd      	b.n	800bc90 <_fflush_r+0xc>

0800bcd4 <__swbuf_r>:
 800bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd6:	460e      	mov	r6, r1
 800bcd8:	4614      	mov	r4, r2
 800bcda:	4605      	mov	r5, r0
 800bcdc:	b118      	cbz	r0, 800bce6 <__swbuf_r+0x12>
 800bcde:	6a03      	ldr	r3, [r0, #32]
 800bce0:	b90b      	cbnz	r3, 800bce6 <__swbuf_r+0x12>
 800bce2:	f7fd f8c1 	bl	8008e68 <__sinit>
 800bce6:	69a3      	ldr	r3, [r4, #24]
 800bce8:	60a3      	str	r3, [r4, #8]
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	071a      	lsls	r2, r3, #28
 800bcee:	d525      	bpl.n	800bd3c <__swbuf_r+0x68>
 800bcf0:	6923      	ldr	r3, [r4, #16]
 800bcf2:	b31b      	cbz	r3, 800bd3c <__swbuf_r+0x68>
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	6922      	ldr	r2, [r4, #16]
 800bcf8:	b2f6      	uxtb	r6, r6
 800bcfa:	1a98      	subs	r0, r3, r2
 800bcfc:	6963      	ldr	r3, [r4, #20]
 800bcfe:	4637      	mov	r7, r6
 800bd00:	4283      	cmp	r3, r0
 800bd02:	dc04      	bgt.n	800bd0e <__swbuf_r+0x3a>
 800bd04:	4621      	mov	r1, r4
 800bd06:	4628      	mov	r0, r5
 800bd08:	f7ff ffbc 	bl	800bc84 <_fflush_r>
 800bd0c:	b9e0      	cbnz	r0, 800bd48 <__swbuf_r+0x74>
 800bd0e:	68a3      	ldr	r3, [r4, #8]
 800bd10:	3b01      	subs	r3, #1
 800bd12:	60a3      	str	r3, [r4, #8]
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	1c5a      	adds	r2, r3, #1
 800bd18:	6022      	str	r2, [r4, #0]
 800bd1a:	701e      	strb	r6, [r3, #0]
 800bd1c:	6962      	ldr	r2, [r4, #20]
 800bd1e:	1c43      	adds	r3, r0, #1
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d004      	beq.n	800bd2e <__swbuf_r+0x5a>
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	07db      	lsls	r3, r3, #31
 800bd28:	d506      	bpl.n	800bd38 <__swbuf_r+0x64>
 800bd2a:	2e0a      	cmp	r6, #10
 800bd2c:	d104      	bne.n	800bd38 <__swbuf_r+0x64>
 800bd2e:	4621      	mov	r1, r4
 800bd30:	4628      	mov	r0, r5
 800bd32:	f7ff ffa7 	bl	800bc84 <_fflush_r>
 800bd36:	b938      	cbnz	r0, 800bd48 <__swbuf_r+0x74>
 800bd38:	4638      	mov	r0, r7
 800bd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	4628      	mov	r0, r5
 800bd40:	f000 f806 	bl	800bd50 <__swsetup_r>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d0d5      	beq.n	800bcf4 <__swbuf_r+0x20>
 800bd48:	f04f 37ff 	mov.w	r7, #4294967295
 800bd4c:	e7f4      	b.n	800bd38 <__swbuf_r+0x64>
	...

0800bd50 <__swsetup_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4b2a      	ldr	r3, [pc, #168]	; (800bdfc <__swsetup_r+0xac>)
 800bd54:	4605      	mov	r5, r0
 800bd56:	6818      	ldr	r0, [r3, #0]
 800bd58:	460c      	mov	r4, r1
 800bd5a:	b118      	cbz	r0, 800bd64 <__swsetup_r+0x14>
 800bd5c:	6a03      	ldr	r3, [r0, #32]
 800bd5e:	b90b      	cbnz	r3, 800bd64 <__swsetup_r+0x14>
 800bd60:	f7fd f882 	bl	8008e68 <__sinit>
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd6a:	0718      	lsls	r0, r3, #28
 800bd6c:	d422      	bmi.n	800bdb4 <__swsetup_r+0x64>
 800bd6e:	06d9      	lsls	r1, r3, #27
 800bd70:	d407      	bmi.n	800bd82 <__swsetup_r+0x32>
 800bd72:	2309      	movs	r3, #9
 800bd74:	602b      	str	r3, [r5, #0]
 800bd76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7e:	81a3      	strh	r3, [r4, #12]
 800bd80:	e034      	b.n	800bdec <__swsetup_r+0x9c>
 800bd82:	0758      	lsls	r0, r3, #29
 800bd84:	d512      	bpl.n	800bdac <__swsetup_r+0x5c>
 800bd86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd88:	b141      	cbz	r1, 800bd9c <__swsetup_r+0x4c>
 800bd8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd8e:	4299      	cmp	r1, r3
 800bd90:	d002      	beq.n	800bd98 <__swsetup_r+0x48>
 800bd92:	4628      	mov	r0, r5
 800bd94:	f7fe f824 	bl	8009de0 <_free_r>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	6363      	str	r3, [r4, #52]	; 0x34
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bda2:	81a3      	strh	r3, [r4, #12]
 800bda4:	2300      	movs	r3, #0
 800bda6:	6063      	str	r3, [r4, #4]
 800bda8:	6923      	ldr	r3, [r4, #16]
 800bdaa:	6023      	str	r3, [r4, #0]
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	f043 0308 	orr.w	r3, r3, #8
 800bdb2:	81a3      	strh	r3, [r4, #12]
 800bdb4:	6923      	ldr	r3, [r4, #16]
 800bdb6:	b94b      	cbnz	r3, 800bdcc <__swsetup_r+0x7c>
 800bdb8:	89a3      	ldrh	r3, [r4, #12]
 800bdba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bdbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdc2:	d003      	beq.n	800bdcc <__swsetup_r+0x7c>
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	f000 fc6d 	bl	800c6a6 <__smakebuf_r>
 800bdcc:	89a0      	ldrh	r0, [r4, #12]
 800bdce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdd2:	f010 0301 	ands.w	r3, r0, #1
 800bdd6:	d00a      	beq.n	800bdee <__swsetup_r+0x9e>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	60a3      	str	r3, [r4, #8]
 800bddc:	6963      	ldr	r3, [r4, #20]
 800bdde:	425b      	negs	r3, r3
 800bde0:	61a3      	str	r3, [r4, #24]
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	b943      	cbnz	r3, 800bdf8 <__swsetup_r+0xa8>
 800bde6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bdea:	d1c4      	bne.n	800bd76 <__swsetup_r+0x26>
 800bdec:	bd38      	pop	{r3, r4, r5, pc}
 800bdee:	0781      	lsls	r1, r0, #30
 800bdf0:	bf58      	it	pl
 800bdf2:	6963      	ldrpl	r3, [r4, #20]
 800bdf4:	60a3      	str	r3, [r4, #8]
 800bdf6:	e7f4      	b.n	800bde2 <__swsetup_r+0x92>
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	e7f7      	b.n	800bdec <__swsetup_r+0x9c>
 800bdfc:	20000068 	.word	0x20000068

0800be00 <memmove>:
 800be00:	4288      	cmp	r0, r1
 800be02:	b510      	push	{r4, lr}
 800be04:	eb01 0402 	add.w	r4, r1, r2
 800be08:	d902      	bls.n	800be10 <memmove+0x10>
 800be0a:	4284      	cmp	r4, r0
 800be0c:	4623      	mov	r3, r4
 800be0e:	d807      	bhi.n	800be20 <memmove+0x20>
 800be10:	1e43      	subs	r3, r0, #1
 800be12:	42a1      	cmp	r1, r4
 800be14:	d008      	beq.n	800be28 <memmove+0x28>
 800be16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be1e:	e7f8      	b.n	800be12 <memmove+0x12>
 800be20:	4601      	mov	r1, r0
 800be22:	4402      	add	r2, r0
 800be24:	428a      	cmp	r2, r1
 800be26:	d100      	bne.n	800be2a <memmove+0x2a>
 800be28:	bd10      	pop	{r4, pc}
 800be2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be32:	e7f7      	b.n	800be24 <memmove+0x24>

0800be34 <strncmp>:
 800be34:	b510      	push	{r4, lr}
 800be36:	b16a      	cbz	r2, 800be54 <strncmp+0x20>
 800be38:	3901      	subs	r1, #1
 800be3a:	1884      	adds	r4, r0, r2
 800be3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800be44:	429a      	cmp	r2, r3
 800be46:	d103      	bne.n	800be50 <strncmp+0x1c>
 800be48:	42a0      	cmp	r0, r4
 800be4a:	d001      	beq.n	800be50 <strncmp+0x1c>
 800be4c:	2a00      	cmp	r2, #0
 800be4e:	d1f5      	bne.n	800be3c <strncmp+0x8>
 800be50:	1ad0      	subs	r0, r2, r3
 800be52:	bd10      	pop	{r4, pc}
 800be54:	4610      	mov	r0, r2
 800be56:	e7fc      	b.n	800be52 <strncmp+0x1e>

0800be58 <_sbrk_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	2300      	movs	r3, #0
 800be5c:	4d05      	ldr	r5, [pc, #20]	; (800be74 <_sbrk_r+0x1c>)
 800be5e:	4604      	mov	r4, r0
 800be60:	4608      	mov	r0, r1
 800be62:	602b      	str	r3, [r5, #0]
 800be64:	f7f5 fd54 	bl	8001910 <_sbrk>
 800be68:	1c43      	adds	r3, r0, #1
 800be6a:	d102      	bne.n	800be72 <_sbrk_r+0x1a>
 800be6c:	682b      	ldr	r3, [r5, #0]
 800be6e:	b103      	cbz	r3, 800be72 <_sbrk_r+0x1a>
 800be70:	6023      	str	r3, [r4, #0]
 800be72:	bd38      	pop	{r3, r4, r5, pc}
 800be74:	20001ef4 	.word	0x20001ef4

0800be78 <nan>:
 800be78:	2000      	movs	r0, #0
 800be7a:	4901      	ldr	r1, [pc, #4]	; (800be80 <nan+0x8>)
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	7ff80000 	.word	0x7ff80000

0800be84 <__assert_func>:
 800be84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be86:	4614      	mov	r4, r2
 800be88:	461a      	mov	r2, r3
 800be8a:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <__assert_func+0x2c>)
 800be8c:	4605      	mov	r5, r0
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68d8      	ldr	r0, [r3, #12]
 800be92:	b14c      	cbz	r4, 800bea8 <__assert_func+0x24>
 800be94:	4b07      	ldr	r3, [pc, #28]	; (800beb4 <__assert_func+0x30>)
 800be96:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be9a:	9100      	str	r1, [sp, #0]
 800be9c:	462b      	mov	r3, r5
 800be9e:	4906      	ldr	r1, [pc, #24]	; (800beb8 <__assert_func+0x34>)
 800bea0:	f000 fbca 	bl	800c638 <fiprintf>
 800bea4:	f000 fc5e 	bl	800c764 <abort>
 800bea8:	4b04      	ldr	r3, [pc, #16]	; (800bebc <__assert_func+0x38>)
 800beaa:	461c      	mov	r4, r3
 800beac:	e7f3      	b.n	800be96 <__assert_func+0x12>
 800beae:	bf00      	nop
 800beb0:	20000068 	.word	0x20000068
 800beb4:	0800ccba 	.word	0x0800ccba
 800beb8:	0800ccc7 	.word	0x0800ccc7
 800bebc:	0800ccf5 	.word	0x0800ccf5

0800bec0 <_calloc_r>:
 800bec0:	b570      	push	{r4, r5, r6, lr}
 800bec2:	fba1 5402 	umull	r5, r4, r1, r2
 800bec6:	b934      	cbnz	r4, 800bed6 <_calloc_r+0x16>
 800bec8:	4629      	mov	r1, r5
 800beca:	f7fd fff9 	bl	8009ec0 <_malloc_r>
 800bece:	4606      	mov	r6, r0
 800bed0:	b928      	cbnz	r0, 800bede <_calloc_r+0x1e>
 800bed2:	4630      	mov	r0, r6
 800bed4:	bd70      	pop	{r4, r5, r6, pc}
 800bed6:	220c      	movs	r2, #12
 800bed8:	2600      	movs	r6, #0
 800beda:	6002      	str	r2, [r0, #0]
 800bedc:	e7f9      	b.n	800bed2 <_calloc_r+0x12>
 800bede:	462a      	mov	r2, r5
 800bee0:	4621      	mov	r1, r4
 800bee2:	f7fd f86c 	bl	8008fbe <memset>
 800bee6:	e7f4      	b.n	800bed2 <_calloc_r+0x12>

0800bee8 <rshift>:
 800bee8:	6903      	ldr	r3, [r0, #16]
 800beea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800beee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bef2:	f100 0414 	add.w	r4, r0, #20
 800bef6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800befa:	dd46      	ble.n	800bf8a <rshift+0xa2>
 800befc:	f011 011f 	ands.w	r1, r1, #31
 800bf00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bf04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bf08:	d10c      	bne.n	800bf24 <rshift+0x3c>
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	f100 0710 	add.w	r7, r0, #16
 800bf10:	42b1      	cmp	r1, r6
 800bf12:	d335      	bcc.n	800bf80 <rshift+0x98>
 800bf14:	1a9b      	subs	r3, r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	1eea      	subs	r2, r5, #3
 800bf1a:	4296      	cmp	r6, r2
 800bf1c:	bf38      	it	cc
 800bf1e:	2300      	movcc	r3, #0
 800bf20:	4423      	add	r3, r4
 800bf22:	e015      	b.n	800bf50 <rshift+0x68>
 800bf24:	46a1      	mov	r9, r4
 800bf26:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bf2a:	f1c1 0820 	rsb	r8, r1, #32
 800bf2e:	40cf      	lsrs	r7, r1
 800bf30:	f105 0e04 	add.w	lr, r5, #4
 800bf34:	4576      	cmp	r6, lr
 800bf36:	46f4      	mov	ip, lr
 800bf38:	d816      	bhi.n	800bf68 <rshift+0x80>
 800bf3a:	1a9a      	subs	r2, r3, r2
 800bf3c:	0092      	lsls	r2, r2, #2
 800bf3e:	3a04      	subs	r2, #4
 800bf40:	3501      	adds	r5, #1
 800bf42:	42ae      	cmp	r6, r5
 800bf44:	bf38      	it	cc
 800bf46:	2200      	movcc	r2, #0
 800bf48:	18a3      	adds	r3, r4, r2
 800bf4a:	50a7      	str	r7, [r4, r2]
 800bf4c:	b107      	cbz	r7, 800bf50 <rshift+0x68>
 800bf4e:	3304      	adds	r3, #4
 800bf50:	42a3      	cmp	r3, r4
 800bf52:	eba3 0204 	sub.w	r2, r3, r4
 800bf56:	bf08      	it	eq
 800bf58:	2300      	moveq	r3, #0
 800bf5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bf5e:	6102      	str	r2, [r0, #16]
 800bf60:	bf08      	it	eq
 800bf62:	6143      	streq	r3, [r0, #20]
 800bf64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf68:	f8dc c000 	ldr.w	ip, [ip]
 800bf6c:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf70:	ea4c 0707 	orr.w	r7, ip, r7
 800bf74:	f849 7b04 	str.w	r7, [r9], #4
 800bf78:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf7c:	40cf      	lsrs	r7, r1
 800bf7e:	e7d9      	b.n	800bf34 <rshift+0x4c>
 800bf80:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf84:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf88:	e7c2      	b.n	800bf10 <rshift+0x28>
 800bf8a:	4623      	mov	r3, r4
 800bf8c:	e7e0      	b.n	800bf50 <rshift+0x68>

0800bf8e <__hexdig_fun>:
 800bf8e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bf92:	2b09      	cmp	r3, #9
 800bf94:	d802      	bhi.n	800bf9c <__hexdig_fun+0xe>
 800bf96:	3820      	subs	r0, #32
 800bf98:	b2c0      	uxtb	r0, r0
 800bf9a:	4770      	bx	lr
 800bf9c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bfa0:	2b05      	cmp	r3, #5
 800bfa2:	d801      	bhi.n	800bfa8 <__hexdig_fun+0x1a>
 800bfa4:	3847      	subs	r0, #71	; 0x47
 800bfa6:	e7f7      	b.n	800bf98 <__hexdig_fun+0xa>
 800bfa8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bfac:	2b05      	cmp	r3, #5
 800bfae:	d801      	bhi.n	800bfb4 <__hexdig_fun+0x26>
 800bfb0:	3827      	subs	r0, #39	; 0x27
 800bfb2:	e7f1      	b.n	800bf98 <__hexdig_fun+0xa>
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	4770      	bx	lr

0800bfb8 <__gethex>:
 800bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbc:	4681      	mov	r9, r0
 800bfbe:	468a      	mov	sl, r1
 800bfc0:	4617      	mov	r7, r2
 800bfc2:	680a      	ldr	r2, [r1, #0]
 800bfc4:	b085      	sub	sp, #20
 800bfc6:	f102 0b02 	add.w	fp, r2, #2
 800bfca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bfce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bfd2:	9302      	str	r3, [sp, #8]
 800bfd4:	32fe      	adds	r2, #254	; 0xfe
 800bfd6:	eb02 030b 	add.w	r3, r2, fp
 800bfda:	46d8      	mov	r8, fp
 800bfdc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	2830      	cmp	r0, #48	; 0x30
 800bfe4:	d0f7      	beq.n	800bfd6 <__gethex+0x1e>
 800bfe6:	f7ff ffd2 	bl	800bf8e <__hexdig_fun>
 800bfea:	4604      	mov	r4, r0
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d138      	bne.n	800c062 <__gethex+0xaa>
 800bff0:	2201      	movs	r2, #1
 800bff2:	4640      	mov	r0, r8
 800bff4:	49a7      	ldr	r1, [pc, #668]	; (800c294 <__gethex+0x2dc>)
 800bff6:	f7ff ff1d 	bl	800be34 <strncmp>
 800bffa:	4606      	mov	r6, r0
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d169      	bne.n	800c0d4 <__gethex+0x11c>
 800c000:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c004:	465d      	mov	r5, fp
 800c006:	f7ff ffc2 	bl	800bf8e <__hexdig_fun>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d064      	beq.n	800c0d8 <__gethex+0x120>
 800c00e:	465a      	mov	r2, fp
 800c010:	7810      	ldrb	r0, [r2, #0]
 800c012:	4690      	mov	r8, r2
 800c014:	2830      	cmp	r0, #48	; 0x30
 800c016:	f102 0201 	add.w	r2, r2, #1
 800c01a:	d0f9      	beq.n	800c010 <__gethex+0x58>
 800c01c:	f7ff ffb7 	bl	800bf8e <__hexdig_fun>
 800c020:	2301      	movs	r3, #1
 800c022:	fab0 f480 	clz	r4, r0
 800c026:	465e      	mov	r6, fp
 800c028:	0964      	lsrs	r4, r4, #5
 800c02a:	9301      	str	r3, [sp, #4]
 800c02c:	4642      	mov	r2, r8
 800c02e:	4615      	mov	r5, r2
 800c030:	7828      	ldrb	r0, [r5, #0]
 800c032:	3201      	adds	r2, #1
 800c034:	f7ff ffab 	bl	800bf8e <__hexdig_fun>
 800c038:	2800      	cmp	r0, #0
 800c03a:	d1f8      	bne.n	800c02e <__gethex+0x76>
 800c03c:	2201      	movs	r2, #1
 800c03e:	4628      	mov	r0, r5
 800c040:	4994      	ldr	r1, [pc, #592]	; (800c294 <__gethex+0x2dc>)
 800c042:	f7ff fef7 	bl	800be34 <strncmp>
 800c046:	b978      	cbnz	r0, 800c068 <__gethex+0xb0>
 800c048:	b946      	cbnz	r6, 800c05c <__gethex+0xa4>
 800c04a:	1c6e      	adds	r6, r5, #1
 800c04c:	4632      	mov	r2, r6
 800c04e:	4615      	mov	r5, r2
 800c050:	7828      	ldrb	r0, [r5, #0]
 800c052:	3201      	adds	r2, #1
 800c054:	f7ff ff9b 	bl	800bf8e <__hexdig_fun>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d1f8      	bne.n	800c04e <__gethex+0x96>
 800c05c:	1b73      	subs	r3, r6, r5
 800c05e:	009e      	lsls	r6, r3, #2
 800c060:	e004      	b.n	800c06c <__gethex+0xb4>
 800c062:	2400      	movs	r4, #0
 800c064:	4626      	mov	r6, r4
 800c066:	e7e1      	b.n	800c02c <__gethex+0x74>
 800c068:	2e00      	cmp	r6, #0
 800c06a:	d1f7      	bne.n	800c05c <__gethex+0xa4>
 800c06c:	782b      	ldrb	r3, [r5, #0]
 800c06e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c072:	2b50      	cmp	r3, #80	; 0x50
 800c074:	d13d      	bne.n	800c0f2 <__gethex+0x13a>
 800c076:	786b      	ldrb	r3, [r5, #1]
 800c078:	2b2b      	cmp	r3, #43	; 0x2b
 800c07a:	d02f      	beq.n	800c0dc <__gethex+0x124>
 800c07c:	2b2d      	cmp	r3, #45	; 0x2d
 800c07e:	d031      	beq.n	800c0e4 <__gethex+0x12c>
 800c080:	f04f 0b00 	mov.w	fp, #0
 800c084:	1c69      	adds	r1, r5, #1
 800c086:	7808      	ldrb	r0, [r1, #0]
 800c088:	f7ff ff81 	bl	800bf8e <__hexdig_fun>
 800c08c:	1e42      	subs	r2, r0, #1
 800c08e:	b2d2      	uxtb	r2, r2
 800c090:	2a18      	cmp	r2, #24
 800c092:	d82e      	bhi.n	800c0f2 <__gethex+0x13a>
 800c094:	f1a0 0210 	sub.w	r2, r0, #16
 800c098:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c09c:	f7ff ff77 	bl	800bf8e <__hexdig_fun>
 800c0a0:	f100 3cff 	add.w	ip, r0, #4294967295
 800c0a4:	fa5f fc8c 	uxtb.w	ip, ip
 800c0a8:	f1bc 0f18 	cmp.w	ip, #24
 800c0ac:	d91d      	bls.n	800c0ea <__gethex+0x132>
 800c0ae:	f1bb 0f00 	cmp.w	fp, #0
 800c0b2:	d000      	beq.n	800c0b6 <__gethex+0xfe>
 800c0b4:	4252      	negs	r2, r2
 800c0b6:	4416      	add	r6, r2
 800c0b8:	f8ca 1000 	str.w	r1, [sl]
 800c0bc:	b1dc      	cbz	r4, 800c0f6 <__gethex+0x13e>
 800c0be:	9b01      	ldr	r3, [sp, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	bf14      	ite	ne
 800c0c4:	f04f 0800 	movne.w	r8, #0
 800c0c8:	f04f 0806 	moveq.w	r8, #6
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	b005      	add	sp, #20
 800c0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d4:	4645      	mov	r5, r8
 800c0d6:	4626      	mov	r6, r4
 800c0d8:	2401      	movs	r4, #1
 800c0da:	e7c7      	b.n	800c06c <__gethex+0xb4>
 800c0dc:	f04f 0b00 	mov.w	fp, #0
 800c0e0:	1ca9      	adds	r1, r5, #2
 800c0e2:	e7d0      	b.n	800c086 <__gethex+0xce>
 800c0e4:	f04f 0b01 	mov.w	fp, #1
 800c0e8:	e7fa      	b.n	800c0e0 <__gethex+0x128>
 800c0ea:	230a      	movs	r3, #10
 800c0ec:	fb03 0002 	mla	r0, r3, r2, r0
 800c0f0:	e7d0      	b.n	800c094 <__gethex+0xdc>
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	e7e0      	b.n	800c0b8 <__gethex+0x100>
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	eba5 0308 	sub.w	r3, r5, r8
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	2b07      	cmp	r3, #7
 800c100:	dc0a      	bgt.n	800c118 <__gethex+0x160>
 800c102:	4648      	mov	r0, r9
 800c104:	f7fd ff68 	bl	8009fd8 <_Balloc>
 800c108:	4604      	mov	r4, r0
 800c10a:	b940      	cbnz	r0, 800c11e <__gethex+0x166>
 800c10c:	4602      	mov	r2, r0
 800c10e:	21e4      	movs	r1, #228	; 0xe4
 800c110:	4b61      	ldr	r3, [pc, #388]	; (800c298 <__gethex+0x2e0>)
 800c112:	4862      	ldr	r0, [pc, #392]	; (800c29c <__gethex+0x2e4>)
 800c114:	f7ff feb6 	bl	800be84 <__assert_func>
 800c118:	3101      	adds	r1, #1
 800c11a:	105b      	asrs	r3, r3, #1
 800c11c:	e7ef      	b.n	800c0fe <__gethex+0x146>
 800c11e:	2300      	movs	r3, #0
 800c120:	469b      	mov	fp, r3
 800c122:	f100 0a14 	add.w	sl, r0, #20
 800c126:	f8cd a004 	str.w	sl, [sp, #4]
 800c12a:	45a8      	cmp	r8, r5
 800c12c:	d344      	bcc.n	800c1b8 <__gethex+0x200>
 800c12e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c132:	4658      	mov	r0, fp
 800c134:	f848 bb04 	str.w	fp, [r8], #4
 800c138:	eba8 080a 	sub.w	r8, r8, sl
 800c13c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800c140:	6122      	str	r2, [r4, #16]
 800c142:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800c146:	f7fe f839 	bl	800a1bc <__hi0bits>
 800c14a:	683d      	ldr	r5, [r7, #0]
 800c14c:	eba8 0800 	sub.w	r8, r8, r0
 800c150:	45a8      	cmp	r8, r5
 800c152:	dd59      	ble.n	800c208 <__gethex+0x250>
 800c154:	eba8 0805 	sub.w	r8, r8, r5
 800c158:	4641      	mov	r1, r8
 800c15a:	4620      	mov	r0, r4
 800c15c:	f7fe fbb7 	bl	800a8ce <__any_on>
 800c160:	4683      	mov	fp, r0
 800c162:	b1b8      	cbz	r0, 800c194 <__gethex+0x1dc>
 800c164:	f04f 0b01 	mov.w	fp, #1
 800c168:	f108 33ff 	add.w	r3, r8, #4294967295
 800c16c:	1159      	asrs	r1, r3, #5
 800c16e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c172:	f003 021f 	and.w	r2, r3, #31
 800c176:	fa0b f202 	lsl.w	r2, fp, r2
 800c17a:	420a      	tst	r2, r1
 800c17c:	d00a      	beq.n	800c194 <__gethex+0x1dc>
 800c17e:	455b      	cmp	r3, fp
 800c180:	dd06      	ble.n	800c190 <__gethex+0x1d8>
 800c182:	4620      	mov	r0, r4
 800c184:	f1a8 0102 	sub.w	r1, r8, #2
 800c188:	f7fe fba1 	bl	800a8ce <__any_on>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d138      	bne.n	800c202 <__gethex+0x24a>
 800c190:	f04f 0b02 	mov.w	fp, #2
 800c194:	4641      	mov	r1, r8
 800c196:	4620      	mov	r0, r4
 800c198:	f7ff fea6 	bl	800bee8 <rshift>
 800c19c:	4446      	add	r6, r8
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	42b3      	cmp	r3, r6
 800c1a2:	da41      	bge.n	800c228 <__gethex+0x270>
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	4648      	mov	r0, r9
 800c1a8:	f7fd ff56 	bl	800a058 <_Bfree>
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1b0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	e789      	b.n	800c0cc <__gethex+0x114>
 800c1b8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c1bc:	2a2e      	cmp	r2, #46	; 0x2e
 800c1be:	d014      	beq.n	800c1ea <__gethex+0x232>
 800c1c0:	2b20      	cmp	r3, #32
 800c1c2:	d106      	bne.n	800c1d2 <__gethex+0x21a>
 800c1c4:	9b01      	ldr	r3, [sp, #4]
 800c1c6:	f843 bb04 	str.w	fp, [r3], #4
 800c1ca:	f04f 0b00 	mov.w	fp, #0
 800c1ce:	9301      	str	r3, [sp, #4]
 800c1d0:	465b      	mov	r3, fp
 800c1d2:	7828      	ldrb	r0, [r5, #0]
 800c1d4:	9303      	str	r3, [sp, #12]
 800c1d6:	f7ff feda 	bl	800bf8e <__hexdig_fun>
 800c1da:	9b03      	ldr	r3, [sp, #12]
 800c1dc:	f000 000f 	and.w	r0, r0, #15
 800c1e0:	4098      	lsls	r0, r3
 800c1e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	e79f      	b.n	800c12a <__gethex+0x172>
 800c1ea:	45a8      	cmp	r8, r5
 800c1ec:	d8e8      	bhi.n	800c1c0 <__gethex+0x208>
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	4928      	ldr	r1, [pc, #160]	; (800c294 <__gethex+0x2dc>)
 800c1f4:	9303      	str	r3, [sp, #12]
 800c1f6:	f7ff fe1d 	bl	800be34 <strncmp>
 800c1fa:	9b03      	ldr	r3, [sp, #12]
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d1df      	bne.n	800c1c0 <__gethex+0x208>
 800c200:	e793      	b.n	800c12a <__gethex+0x172>
 800c202:	f04f 0b03 	mov.w	fp, #3
 800c206:	e7c5      	b.n	800c194 <__gethex+0x1dc>
 800c208:	da0b      	bge.n	800c222 <__gethex+0x26a>
 800c20a:	eba5 0808 	sub.w	r8, r5, r8
 800c20e:	4621      	mov	r1, r4
 800c210:	4642      	mov	r2, r8
 800c212:	4648      	mov	r0, r9
 800c214:	f7fe f938 	bl	800a488 <__lshift>
 800c218:	4604      	mov	r4, r0
 800c21a:	eba6 0608 	sub.w	r6, r6, r8
 800c21e:	f100 0a14 	add.w	sl, r0, #20
 800c222:	f04f 0b00 	mov.w	fp, #0
 800c226:	e7ba      	b.n	800c19e <__gethex+0x1e6>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	42b3      	cmp	r3, r6
 800c22c:	dd74      	ble.n	800c318 <__gethex+0x360>
 800c22e:	1b9e      	subs	r6, r3, r6
 800c230:	42b5      	cmp	r5, r6
 800c232:	dc35      	bgt.n	800c2a0 <__gethex+0x2e8>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2b02      	cmp	r3, #2
 800c238:	d023      	beq.n	800c282 <__gethex+0x2ca>
 800c23a:	2b03      	cmp	r3, #3
 800c23c:	d025      	beq.n	800c28a <__gethex+0x2d2>
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d115      	bne.n	800c26e <__gethex+0x2b6>
 800c242:	42b5      	cmp	r5, r6
 800c244:	d113      	bne.n	800c26e <__gethex+0x2b6>
 800c246:	2d01      	cmp	r5, #1
 800c248:	d10b      	bne.n	800c262 <__gethex+0x2aa>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	9a02      	ldr	r2, [sp, #8]
 800c24e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c252:	6013      	str	r3, [r2, #0]
 800c254:	2301      	movs	r3, #1
 800c256:	6123      	str	r3, [r4, #16]
 800c258:	f8ca 3000 	str.w	r3, [sl]
 800c25c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c25e:	601c      	str	r4, [r3, #0]
 800c260:	e734      	b.n	800c0cc <__gethex+0x114>
 800c262:	4620      	mov	r0, r4
 800c264:	1e69      	subs	r1, r5, #1
 800c266:	f7fe fb32 	bl	800a8ce <__any_on>
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d1ed      	bne.n	800c24a <__gethex+0x292>
 800c26e:	4621      	mov	r1, r4
 800c270:	4648      	mov	r0, r9
 800c272:	f7fd fef1 	bl	800a058 <_Bfree>
 800c276:	2300      	movs	r3, #0
 800c278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c27a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c27e:	6013      	str	r3, [r2, #0]
 800c280:	e724      	b.n	800c0cc <__gethex+0x114>
 800c282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c284:	2b00      	cmp	r3, #0
 800c286:	d1f2      	bne.n	800c26e <__gethex+0x2b6>
 800c288:	e7df      	b.n	800c24a <__gethex+0x292>
 800c28a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1dc      	bne.n	800c24a <__gethex+0x292>
 800c290:	e7ed      	b.n	800c26e <__gethex+0x2b6>
 800c292:	bf00      	nop
 800c294:	0800cb4c 	.word	0x0800cb4c
 800c298:	0800c9df 	.word	0x0800c9df
 800c29c:	0800ccf6 	.word	0x0800ccf6
 800c2a0:	f106 38ff 	add.w	r8, r6, #4294967295
 800c2a4:	f1bb 0f00 	cmp.w	fp, #0
 800c2a8:	d133      	bne.n	800c312 <__gethex+0x35a>
 800c2aa:	f1b8 0f00 	cmp.w	r8, #0
 800c2ae:	d004      	beq.n	800c2ba <__gethex+0x302>
 800c2b0:	4641      	mov	r1, r8
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f7fe fb0b 	bl	800a8ce <__any_on>
 800c2b8:	4683      	mov	fp, r0
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c2c0:	f008 081f 	and.w	r8, r8, #31
 800c2c4:	fa03 f308 	lsl.w	r3, r3, r8
 800c2c8:	f04f 0802 	mov.w	r8, #2
 800c2cc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c2d0:	4631      	mov	r1, r6
 800c2d2:	4213      	tst	r3, r2
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	bf18      	it	ne
 800c2d8:	f04b 0b02 	orrne.w	fp, fp, #2
 800c2dc:	1bad      	subs	r5, r5, r6
 800c2de:	f7ff fe03 	bl	800bee8 <rshift>
 800c2e2:	687e      	ldr	r6, [r7, #4]
 800c2e4:	f1bb 0f00 	cmp.w	fp, #0
 800c2e8:	d04a      	beq.n	800c380 <__gethex+0x3c8>
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d016      	beq.n	800c31e <__gethex+0x366>
 800c2f0:	2b03      	cmp	r3, #3
 800c2f2:	d018      	beq.n	800c326 <__gethex+0x36e>
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d109      	bne.n	800c30c <__gethex+0x354>
 800c2f8:	f01b 0f02 	tst.w	fp, #2
 800c2fc:	d006      	beq.n	800c30c <__gethex+0x354>
 800c2fe:	f8da 3000 	ldr.w	r3, [sl]
 800c302:	ea4b 0b03 	orr.w	fp, fp, r3
 800c306:	f01b 0f01 	tst.w	fp, #1
 800c30a:	d10f      	bne.n	800c32c <__gethex+0x374>
 800c30c:	f048 0810 	orr.w	r8, r8, #16
 800c310:	e036      	b.n	800c380 <__gethex+0x3c8>
 800c312:	f04f 0b01 	mov.w	fp, #1
 800c316:	e7d0      	b.n	800c2ba <__gethex+0x302>
 800c318:	f04f 0801 	mov.w	r8, #1
 800c31c:	e7e2      	b.n	800c2e4 <__gethex+0x32c>
 800c31e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c320:	f1c3 0301 	rsb	r3, r3, #1
 800c324:	930f      	str	r3, [sp, #60]	; 0x3c
 800c326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d0ef      	beq.n	800c30c <__gethex+0x354>
 800c32c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c330:	f104 0214 	add.w	r2, r4, #20
 800c334:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	2300      	movs	r3, #0
 800c33c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c340:	4694      	mov	ip, r2
 800c342:	f852 1b04 	ldr.w	r1, [r2], #4
 800c346:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c34a:	d01e      	beq.n	800c38a <__gethex+0x3d2>
 800c34c:	3101      	adds	r1, #1
 800c34e:	f8cc 1000 	str.w	r1, [ip]
 800c352:	f1b8 0f02 	cmp.w	r8, #2
 800c356:	f104 0214 	add.w	r2, r4, #20
 800c35a:	d13d      	bne.n	800c3d8 <__gethex+0x420>
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	3b01      	subs	r3, #1
 800c360:	42ab      	cmp	r3, r5
 800c362:	d10b      	bne.n	800c37c <__gethex+0x3c4>
 800c364:	2301      	movs	r3, #1
 800c366:	1169      	asrs	r1, r5, #5
 800c368:	f005 051f 	and.w	r5, r5, #31
 800c36c:	fa03 f505 	lsl.w	r5, r3, r5
 800c370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c374:	421d      	tst	r5, r3
 800c376:	bf18      	it	ne
 800c378:	f04f 0801 	movne.w	r8, #1
 800c37c:	f048 0820 	orr.w	r8, r8, #32
 800c380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c382:	601c      	str	r4, [r3, #0]
 800c384:	9b02      	ldr	r3, [sp, #8]
 800c386:	601e      	str	r6, [r3, #0]
 800c388:	e6a0      	b.n	800c0cc <__gethex+0x114>
 800c38a:	4290      	cmp	r0, r2
 800c38c:	f842 3c04 	str.w	r3, [r2, #-4]
 800c390:	d8d6      	bhi.n	800c340 <__gethex+0x388>
 800c392:	68a2      	ldr	r2, [r4, #8]
 800c394:	4593      	cmp	fp, r2
 800c396:	db17      	blt.n	800c3c8 <__gethex+0x410>
 800c398:	6861      	ldr	r1, [r4, #4]
 800c39a:	4648      	mov	r0, r9
 800c39c:	3101      	adds	r1, #1
 800c39e:	f7fd fe1b 	bl	8009fd8 <_Balloc>
 800c3a2:	4682      	mov	sl, r0
 800c3a4:	b918      	cbnz	r0, 800c3ae <__gethex+0x3f6>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	2184      	movs	r1, #132	; 0x84
 800c3aa:	4b1a      	ldr	r3, [pc, #104]	; (800c414 <__gethex+0x45c>)
 800c3ac:	e6b1      	b.n	800c112 <__gethex+0x15a>
 800c3ae:	6922      	ldr	r2, [r4, #16]
 800c3b0:	f104 010c 	add.w	r1, r4, #12
 800c3b4:	3202      	adds	r2, #2
 800c3b6:	0092      	lsls	r2, r2, #2
 800c3b8:	300c      	adds	r0, #12
 800c3ba:	f7fc fe8e 	bl	80090da <memcpy>
 800c3be:	4621      	mov	r1, r4
 800c3c0:	4648      	mov	r0, r9
 800c3c2:	f7fd fe49 	bl	800a058 <_Bfree>
 800c3c6:	4654      	mov	r4, sl
 800c3c8:	6922      	ldr	r2, [r4, #16]
 800c3ca:	1c51      	adds	r1, r2, #1
 800c3cc:	6121      	str	r1, [r4, #16]
 800c3ce:	2101      	movs	r1, #1
 800c3d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c3d4:	6151      	str	r1, [r2, #20]
 800c3d6:	e7bc      	b.n	800c352 <__gethex+0x39a>
 800c3d8:	6921      	ldr	r1, [r4, #16]
 800c3da:	4559      	cmp	r1, fp
 800c3dc:	dd0b      	ble.n	800c3f6 <__gethex+0x43e>
 800c3de:	2101      	movs	r1, #1
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f7ff fd81 	bl	800bee8 <rshift>
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	3601      	adds	r6, #1
 800c3ea:	42b3      	cmp	r3, r6
 800c3ec:	f6ff aeda 	blt.w	800c1a4 <__gethex+0x1ec>
 800c3f0:	f04f 0801 	mov.w	r8, #1
 800c3f4:	e7c2      	b.n	800c37c <__gethex+0x3c4>
 800c3f6:	f015 051f 	ands.w	r5, r5, #31
 800c3fa:	d0f9      	beq.n	800c3f0 <__gethex+0x438>
 800c3fc:	9b01      	ldr	r3, [sp, #4]
 800c3fe:	f1c5 0520 	rsb	r5, r5, #32
 800c402:	441a      	add	r2, r3
 800c404:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c408:	f7fd fed8 	bl	800a1bc <__hi0bits>
 800c40c:	42a8      	cmp	r0, r5
 800c40e:	dbe6      	blt.n	800c3de <__gethex+0x426>
 800c410:	e7ee      	b.n	800c3f0 <__gethex+0x438>
 800c412:	bf00      	nop
 800c414:	0800c9df 	.word	0x0800c9df

0800c418 <L_shift>:
 800c418:	f1c2 0208 	rsb	r2, r2, #8
 800c41c:	0092      	lsls	r2, r2, #2
 800c41e:	b570      	push	{r4, r5, r6, lr}
 800c420:	f1c2 0620 	rsb	r6, r2, #32
 800c424:	6843      	ldr	r3, [r0, #4]
 800c426:	6804      	ldr	r4, [r0, #0]
 800c428:	fa03 f506 	lsl.w	r5, r3, r6
 800c42c:	432c      	orrs	r4, r5
 800c42e:	40d3      	lsrs	r3, r2
 800c430:	6004      	str	r4, [r0, #0]
 800c432:	f840 3f04 	str.w	r3, [r0, #4]!
 800c436:	4288      	cmp	r0, r1
 800c438:	d3f4      	bcc.n	800c424 <L_shift+0xc>
 800c43a:	bd70      	pop	{r4, r5, r6, pc}

0800c43c <__match>:
 800c43c:	b530      	push	{r4, r5, lr}
 800c43e:	6803      	ldr	r3, [r0, #0]
 800c440:	3301      	adds	r3, #1
 800c442:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c446:	b914      	cbnz	r4, 800c44e <__match+0x12>
 800c448:	6003      	str	r3, [r0, #0]
 800c44a:	2001      	movs	r0, #1
 800c44c:	bd30      	pop	{r4, r5, pc}
 800c44e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c452:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c456:	2d19      	cmp	r5, #25
 800c458:	bf98      	it	ls
 800c45a:	3220      	addls	r2, #32
 800c45c:	42a2      	cmp	r2, r4
 800c45e:	d0f0      	beq.n	800c442 <__match+0x6>
 800c460:	2000      	movs	r0, #0
 800c462:	e7f3      	b.n	800c44c <__match+0x10>

0800c464 <__hexnan>:
 800c464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c468:	2500      	movs	r5, #0
 800c46a:	680b      	ldr	r3, [r1, #0]
 800c46c:	4682      	mov	sl, r0
 800c46e:	115e      	asrs	r6, r3, #5
 800c470:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c474:	f013 031f 	ands.w	r3, r3, #31
 800c478:	bf18      	it	ne
 800c47a:	3604      	addne	r6, #4
 800c47c:	1f37      	subs	r7, r6, #4
 800c47e:	4690      	mov	r8, r2
 800c480:	46b9      	mov	r9, r7
 800c482:	463c      	mov	r4, r7
 800c484:	46ab      	mov	fp, r5
 800c486:	b087      	sub	sp, #28
 800c488:	6801      	ldr	r1, [r0, #0]
 800c48a:	9301      	str	r3, [sp, #4]
 800c48c:	f846 5c04 	str.w	r5, [r6, #-4]
 800c490:	9502      	str	r5, [sp, #8]
 800c492:	784a      	ldrb	r2, [r1, #1]
 800c494:	1c4b      	adds	r3, r1, #1
 800c496:	9303      	str	r3, [sp, #12]
 800c498:	b342      	cbz	r2, 800c4ec <__hexnan+0x88>
 800c49a:	4610      	mov	r0, r2
 800c49c:	9105      	str	r1, [sp, #20]
 800c49e:	9204      	str	r2, [sp, #16]
 800c4a0:	f7ff fd75 	bl	800bf8e <__hexdig_fun>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d14f      	bne.n	800c548 <__hexnan+0xe4>
 800c4a8:	9a04      	ldr	r2, [sp, #16]
 800c4aa:	9905      	ldr	r1, [sp, #20]
 800c4ac:	2a20      	cmp	r2, #32
 800c4ae:	d818      	bhi.n	800c4e2 <__hexnan+0x7e>
 800c4b0:	9b02      	ldr	r3, [sp, #8]
 800c4b2:	459b      	cmp	fp, r3
 800c4b4:	dd13      	ble.n	800c4de <__hexnan+0x7a>
 800c4b6:	454c      	cmp	r4, r9
 800c4b8:	d206      	bcs.n	800c4c8 <__hexnan+0x64>
 800c4ba:	2d07      	cmp	r5, #7
 800c4bc:	dc04      	bgt.n	800c4c8 <__hexnan+0x64>
 800c4be:	462a      	mov	r2, r5
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f7ff ffa8 	bl	800c418 <L_shift>
 800c4c8:	4544      	cmp	r4, r8
 800c4ca:	d950      	bls.n	800c56e <__hexnan+0x10a>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f1a4 0904 	sub.w	r9, r4, #4
 800c4d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c4d6:	461d      	mov	r5, r3
 800c4d8:	464c      	mov	r4, r9
 800c4da:	f8cd b008 	str.w	fp, [sp, #8]
 800c4de:	9903      	ldr	r1, [sp, #12]
 800c4e0:	e7d7      	b.n	800c492 <__hexnan+0x2e>
 800c4e2:	2a29      	cmp	r2, #41	; 0x29
 800c4e4:	d155      	bne.n	800c592 <__hexnan+0x12e>
 800c4e6:	3102      	adds	r1, #2
 800c4e8:	f8ca 1000 	str.w	r1, [sl]
 800c4ec:	f1bb 0f00 	cmp.w	fp, #0
 800c4f0:	d04f      	beq.n	800c592 <__hexnan+0x12e>
 800c4f2:	454c      	cmp	r4, r9
 800c4f4:	d206      	bcs.n	800c504 <__hexnan+0xa0>
 800c4f6:	2d07      	cmp	r5, #7
 800c4f8:	dc04      	bgt.n	800c504 <__hexnan+0xa0>
 800c4fa:	462a      	mov	r2, r5
 800c4fc:	4649      	mov	r1, r9
 800c4fe:	4620      	mov	r0, r4
 800c500:	f7ff ff8a 	bl	800c418 <L_shift>
 800c504:	4544      	cmp	r4, r8
 800c506:	d934      	bls.n	800c572 <__hexnan+0x10e>
 800c508:	4623      	mov	r3, r4
 800c50a:	f1a8 0204 	sub.w	r2, r8, #4
 800c50e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c512:	429f      	cmp	r7, r3
 800c514:	f842 1f04 	str.w	r1, [r2, #4]!
 800c518:	d2f9      	bcs.n	800c50e <__hexnan+0xaa>
 800c51a:	1b3b      	subs	r3, r7, r4
 800c51c:	f023 0303 	bic.w	r3, r3, #3
 800c520:	3304      	adds	r3, #4
 800c522:	3e03      	subs	r6, #3
 800c524:	3401      	adds	r4, #1
 800c526:	42a6      	cmp	r6, r4
 800c528:	bf38      	it	cc
 800c52a:	2304      	movcc	r3, #4
 800c52c:	2200      	movs	r2, #0
 800c52e:	4443      	add	r3, r8
 800c530:	f843 2b04 	str.w	r2, [r3], #4
 800c534:	429f      	cmp	r7, r3
 800c536:	d2fb      	bcs.n	800c530 <__hexnan+0xcc>
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	b91b      	cbnz	r3, 800c544 <__hexnan+0xe0>
 800c53c:	4547      	cmp	r7, r8
 800c53e:	d126      	bne.n	800c58e <__hexnan+0x12a>
 800c540:	2301      	movs	r3, #1
 800c542:	603b      	str	r3, [r7, #0]
 800c544:	2005      	movs	r0, #5
 800c546:	e025      	b.n	800c594 <__hexnan+0x130>
 800c548:	3501      	adds	r5, #1
 800c54a:	2d08      	cmp	r5, #8
 800c54c:	f10b 0b01 	add.w	fp, fp, #1
 800c550:	dd06      	ble.n	800c560 <__hexnan+0xfc>
 800c552:	4544      	cmp	r4, r8
 800c554:	d9c3      	bls.n	800c4de <__hexnan+0x7a>
 800c556:	2300      	movs	r3, #0
 800c558:	2501      	movs	r5, #1
 800c55a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c55e:	3c04      	subs	r4, #4
 800c560:	6822      	ldr	r2, [r4, #0]
 800c562:	f000 000f 	and.w	r0, r0, #15
 800c566:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c56a:	6020      	str	r0, [r4, #0]
 800c56c:	e7b7      	b.n	800c4de <__hexnan+0x7a>
 800c56e:	2508      	movs	r5, #8
 800c570:	e7b5      	b.n	800c4de <__hexnan+0x7a>
 800c572:	9b01      	ldr	r3, [sp, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d0df      	beq.n	800c538 <__hexnan+0xd4>
 800c578:	f04f 32ff 	mov.w	r2, #4294967295
 800c57c:	f1c3 0320 	rsb	r3, r3, #32
 800c580:	40da      	lsrs	r2, r3
 800c582:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c586:	4013      	ands	r3, r2
 800c588:	f846 3c04 	str.w	r3, [r6, #-4]
 800c58c:	e7d4      	b.n	800c538 <__hexnan+0xd4>
 800c58e:	3f04      	subs	r7, #4
 800c590:	e7d2      	b.n	800c538 <__hexnan+0xd4>
 800c592:	2004      	movs	r0, #4
 800c594:	b007      	add	sp, #28
 800c596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c59a <__ascii_mbtowc>:
 800c59a:	b082      	sub	sp, #8
 800c59c:	b901      	cbnz	r1, 800c5a0 <__ascii_mbtowc+0x6>
 800c59e:	a901      	add	r1, sp, #4
 800c5a0:	b142      	cbz	r2, 800c5b4 <__ascii_mbtowc+0x1a>
 800c5a2:	b14b      	cbz	r3, 800c5b8 <__ascii_mbtowc+0x1e>
 800c5a4:	7813      	ldrb	r3, [r2, #0]
 800c5a6:	600b      	str	r3, [r1, #0]
 800c5a8:	7812      	ldrb	r2, [r2, #0]
 800c5aa:	1e10      	subs	r0, r2, #0
 800c5ac:	bf18      	it	ne
 800c5ae:	2001      	movne	r0, #1
 800c5b0:	b002      	add	sp, #8
 800c5b2:	4770      	bx	lr
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	e7fb      	b.n	800c5b0 <__ascii_mbtowc+0x16>
 800c5b8:	f06f 0001 	mvn.w	r0, #1
 800c5bc:	e7f8      	b.n	800c5b0 <__ascii_mbtowc+0x16>

0800c5be <_realloc_r>:
 800c5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c2:	4680      	mov	r8, r0
 800c5c4:	4614      	mov	r4, r2
 800c5c6:	460e      	mov	r6, r1
 800c5c8:	b921      	cbnz	r1, 800c5d4 <_realloc_r+0x16>
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d0:	f7fd bc76 	b.w	8009ec0 <_malloc_r>
 800c5d4:	b92a      	cbnz	r2, 800c5e2 <_realloc_r+0x24>
 800c5d6:	f7fd fc03 	bl	8009de0 <_free_r>
 800c5da:	4625      	mov	r5, r4
 800c5dc:	4628      	mov	r0, r5
 800c5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e2:	f000 f8c6 	bl	800c772 <_malloc_usable_size_r>
 800c5e6:	4284      	cmp	r4, r0
 800c5e8:	4607      	mov	r7, r0
 800c5ea:	d802      	bhi.n	800c5f2 <_realloc_r+0x34>
 800c5ec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c5f0:	d812      	bhi.n	800c618 <_realloc_r+0x5a>
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	f7fd fc63 	bl	8009ec0 <_malloc_r>
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d0ed      	beq.n	800c5dc <_realloc_r+0x1e>
 800c600:	42bc      	cmp	r4, r7
 800c602:	4622      	mov	r2, r4
 800c604:	4631      	mov	r1, r6
 800c606:	bf28      	it	cs
 800c608:	463a      	movcs	r2, r7
 800c60a:	f7fc fd66 	bl	80090da <memcpy>
 800c60e:	4631      	mov	r1, r6
 800c610:	4640      	mov	r0, r8
 800c612:	f7fd fbe5 	bl	8009de0 <_free_r>
 800c616:	e7e1      	b.n	800c5dc <_realloc_r+0x1e>
 800c618:	4635      	mov	r5, r6
 800c61a:	e7df      	b.n	800c5dc <_realloc_r+0x1e>

0800c61c <__ascii_wctomb>:
 800c61c:	4603      	mov	r3, r0
 800c61e:	4608      	mov	r0, r1
 800c620:	b141      	cbz	r1, 800c634 <__ascii_wctomb+0x18>
 800c622:	2aff      	cmp	r2, #255	; 0xff
 800c624:	d904      	bls.n	800c630 <__ascii_wctomb+0x14>
 800c626:	228a      	movs	r2, #138	; 0x8a
 800c628:	f04f 30ff 	mov.w	r0, #4294967295
 800c62c:	601a      	str	r2, [r3, #0]
 800c62e:	4770      	bx	lr
 800c630:	2001      	movs	r0, #1
 800c632:	700a      	strb	r2, [r1, #0]
 800c634:	4770      	bx	lr
	...

0800c638 <fiprintf>:
 800c638:	b40e      	push	{r1, r2, r3}
 800c63a:	b503      	push	{r0, r1, lr}
 800c63c:	4601      	mov	r1, r0
 800c63e:	ab03      	add	r3, sp, #12
 800c640:	4805      	ldr	r0, [pc, #20]	; (800c658 <fiprintf+0x20>)
 800c642:	f853 2b04 	ldr.w	r2, [r3], #4
 800c646:	6800      	ldr	r0, [r0, #0]
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	f7ff f97f 	bl	800b94c <_vfiprintf_r>
 800c64e:	b002      	add	sp, #8
 800c650:	f85d eb04 	ldr.w	lr, [sp], #4
 800c654:	b003      	add	sp, #12
 800c656:	4770      	bx	lr
 800c658:	20000068 	.word	0x20000068

0800c65c <__swhatbuf_r>:
 800c65c:	b570      	push	{r4, r5, r6, lr}
 800c65e:	460c      	mov	r4, r1
 800c660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c664:	4615      	mov	r5, r2
 800c666:	2900      	cmp	r1, #0
 800c668:	461e      	mov	r6, r3
 800c66a:	b096      	sub	sp, #88	; 0x58
 800c66c:	da0c      	bge.n	800c688 <__swhatbuf_r+0x2c>
 800c66e:	89a3      	ldrh	r3, [r4, #12]
 800c670:	2100      	movs	r1, #0
 800c672:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c676:	bf0c      	ite	eq
 800c678:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c67c:	2340      	movne	r3, #64	; 0x40
 800c67e:	2000      	movs	r0, #0
 800c680:	6031      	str	r1, [r6, #0]
 800c682:	602b      	str	r3, [r5, #0]
 800c684:	b016      	add	sp, #88	; 0x58
 800c686:	bd70      	pop	{r4, r5, r6, pc}
 800c688:	466a      	mov	r2, sp
 800c68a:	f000 f849 	bl	800c720 <_fstat_r>
 800c68e:	2800      	cmp	r0, #0
 800c690:	dbed      	blt.n	800c66e <__swhatbuf_r+0x12>
 800c692:	9901      	ldr	r1, [sp, #4]
 800c694:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c698:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c69c:	4259      	negs	r1, r3
 800c69e:	4159      	adcs	r1, r3
 800c6a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6a4:	e7eb      	b.n	800c67e <__swhatbuf_r+0x22>

0800c6a6 <__smakebuf_r>:
 800c6a6:	898b      	ldrh	r3, [r1, #12]
 800c6a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6aa:	079d      	lsls	r5, r3, #30
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	460c      	mov	r4, r1
 800c6b0:	d507      	bpl.n	800c6c2 <__smakebuf_r+0x1c>
 800c6b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6b6:	6023      	str	r3, [r4, #0]
 800c6b8:	6123      	str	r3, [r4, #16]
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	6163      	str	r3, [r4, #20]
 800c6be:	b002      	add	sp, #8
 800c6c0:	bd70      	pop	{r4, r5, r6, pc}
 800c6c2:	466a      	mov	r2, sp
 800c6c4:	ab01      	add	r3, sp, #4
 800c6c6:	f7ff ffc9 	bl	800c65c <__swhatbuf_r>
 800c6ca:	9900      	ldr	r1, [sp, #0]
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	f7fd fbf6 	bl	8009ec0 <_malloc_r>
 800c6d4:	b948      	cbnz	r0, 800c6ea <__smakebuf_r+0x44>
 800c6d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6da:	059a      	lsls	r2, r3, #22
 800c6dc:	d4ef      	bmi.n	800c6be <__smakebuf_r+0x18>
 800c6de:	f023 0303 	bic.w	r3, r3, #3
 800c6e2:	f043 0302 	orr.w	r3, r3, #2
 800c6e6:	81a3      	strh	r3, [r4, #12]
 800c6e8:	e7e3      	b.n	800c6b2 <__smakebuf_r+0xc>
 800c6ea:	89a3      	ldrh	r3, [r4, #12]
 800c6ec:	6020      	str	r0, [r4, #0]
 800c6ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6f2:	81a3      	strh	r3, [r4, #12]
 800c6f4:	9b00      	ldr	r3, [sp, #0]
 800c6f6:	6120      	str	r0, [r4, #16]
 800c6f8:	6163      	str	r3, [r4, #20]
 800c6fa:	9b01      	ldr	r3, [sp, #4]
 800c6fc:	b15b      	cbz	r3, 800c716 <__smakebuf_r+0x70>
 800c6fe:	4630      	mov	r0, r6
 800c700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c704:	f000 f81e 	bl	800c744 <_isatty_r>
 800c708:	b128      	cbz	r0, 800c716 <__smakebuf_r+0x70>
 800c70a:	89a3      	ldrh	r3, [r4, #12]
 800c70c:	f023 0303 	bic.w	r3, r3, #3
 800c710:	f043 0301 	orr.w	r3, r3, #1
 800c714:	81a3      	strh	r3, [r4, #12]
 800c716:	89a3      	ldrh	r3, [r4, #12]
 800c718:	431d      	orrs	r5, r3
 800c71a:	81a5      	strh	r5, [r4, #12]
 800c71c:	e7cf      	b.n	800c6be <__smakebuf_r+0x18>
	...

0800c720 <_fstat_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	2300      	movs	r3, #0
 800c724:	4d06      	ldr	r5, [pc, #24]	; (800c740 <_fstat_r+0x20>)
 800c726:	4604      	mov	r4, r0
 800c728:	4608      	mov	r0, r1
 800c72a:	4611      	mov	r1, r2
 800c72c:	602b      	str	r3, [r5, #0]
 800c72e:	f7f5 f8ca 	bl	80018c6 <_fstat>
 800c732:	1c43      	adds	r3, r0, #1
 800c734:	d102      	bne.n	800c73c <_fstat_r+0x1c>
 800c736:	682b      	ldr	r3, [r5, #0]
 800c738:	b103      	cbz	r3, 800c73c <_fstat_r+0x1c>
 800c73a:	6023      	str	r3, [r4, #0]
 800c73c:	bd38      	pop	{r3, r4, r5, pc}
 800c73e:	bf00      	nop
 800c740:	20001ef4 	.word	0x20001ef4

0800c744 <_isatty_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	2300      	movs	r3, #0
 800c748:	4d05      	ldr	r5, [pc, #20]	; (800c760 <_isatty_r+0x1c>)
 800c74a:	4604      	mov	r4, r0
 800c74c:	4608      	mov	r0, r1
 800c74e:	602b      	str	r3, [r5, #0]
 800c750:	f7f5 f8c8 	bl	80018e4 <_isatty>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_isatty_r+0x1a>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_isatty_r+0x1a>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20001ef4 	.word	0x20001ef4

0800c764 <abort>:
 800c764:	2006      	movs	r0, #6
 800c766:	b508      	push	{r3, lr}
 800c768:	f000 f834 	bl	800c7d4 <raise>
 800c76c:	2001      	movs	r0, #1
 800c76e:	f7f5 f878 	bl	8001862 <_exit>

0800c772 <_malloc_usable_size_r>:
 800c772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c776:	1f18      	subs	r0, r3, #4
 800c778:	2b00      	cmp	r3, #0
 800c77a:	bfbc      	itt	lt
 800c77c:	580b      	ldrlt	r3, [r1, r0]
 800c77e:	18c0      	addlt	r0, r0, r3
 800c780:	4770      	bx	lr

0800c782 <_raise_r>:
 800c782:	291f      	cmp	r1, #31
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	4604      	mov	r4, r0
 800c788:	460d      	mov	r5, r1
 800c78a:	d904      	bls.n	800c796 <_raise_r+0x14>
 800c78c:	2316      	movs	r3, #22
 800c78e:	6003      	str	r3, [r0, #0]
 800c790:	f04f 30ff 	mov.w	r0, #4294967295
 800c794:	bd38      	pop	{r3, r4, r5, pc}
 800c796:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c798:	b112      	cbz	r2, 800c7a0 <_raise_r+0x1e>
 800c79a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c79e:	b94b      	cbnz	r3, 800c7b4 <_raise_r+0x32>
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f000 f831 	bl	800c808 <_getpid_r>
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	4601      	mov	r1, r0
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7b0:	f000 b818 	b.w	800c7e4 <_kill_r>
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d00a      	beq.n	800c7ce <_raise_r+0x4c>
 800c7b8:	1c59      	adds	r1, r3, #1
 800c7ba:	d103      	bne.n	800c7c4 <_raise_r+0x42>
 800c7bc:	2316      	movs	r3, #22
 800c7be:	6003      	str	r3, [r0, #0]
 800c7c0:	2001      	movs	r0, #1
 800c7c2:	e7e7      	b.n	800c794 <_raise_r+0x12>
 800c7c4:	2400      	movs	r4, #0
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7cc:	4798      	blx	r3
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	e7e0      	b.n	800c794 <_raise_r+0x12>
	...

0800c7d4 <raise>:
 800c7d4:	4b02      	ldr	r3, [pc, #8]	; (800c7e0 <raise+0xc>)
 800c7d6:	4601      	mov	r1, r0
 800c7d8:	6818      	ldr	r0, [r3, #0]
 800c7da:	f7ff bfd2 	b.w	800c782 <_raise_r>
 800c7de:	bf00      	nop
 800c7e0:	20000068 	.word	0x20000068

0800c7e4 <_kill_r>:
 800c7e4:	b538      	push	{r3, r4, r5, lr}
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	4d06      	ldr	r5, [pc, #24]	; (800c804 <_kill_r+0x20>)
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	4608      	mov	r0, r1
 800c7ee:	4611      	mov	r1, r2
 800c7f0:	602b      	str	r3, [r5, #0]
 800c7f2:	f7f5 f826 	bl	8001842 <_kill>
 800c7f6:	1c43      	adds	r3, r0, #1
 800c7f8:	d102      	bne.n	800c800 <_kill_r+0x1c>
 800c7fa:	682b      	ldr	r3, [r5, #0]
 800c7fc:	b103      	cbz	r3, 800c800 <_kill_r+0x1c>
 800c7fe:	6023      	str	r3, [r4, #0]
 800c800:	bd38      	pop	{r3, r4, r5, pc}
 800c802:	bf00      	nop
 800c804:	20001ef4 	.word	0x20001ef4

0800c808 <_getpid_r>:
 800c808:	f7f5 b814 	b.w	8001834 <_getpid>

0800c80c <_init>:
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	bf00      	nop
 800c810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c812:	bc08      	pop	{r3}
 800c814:	469e      	mov	lr, r3
 800c816:	4770      	bx	lr

0800c818 <_fini>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	bf00      	nop
 800c81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c81e:	bc08      	pop	{r3}
 800c820:	469e      	mov	lr, r3
 800c822:	4770      	bx	lr
