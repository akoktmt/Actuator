/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
  Encoder Enco;
  Encoder_Init(&Enco);
  double speed;
  double PIDOut,PWM;
  PID_TypeDef TPID;
  VNH3SP30_t driver;
  VNH3SP30_Init(&driver);
  TempSetpoint = 10;
/* USER CODE END Variables */
/* Definitions for mControl_PIDTas */
osThreadId_t mControl_PIDTasHandle;
const osThreadAttr_t mControl_PIDTas_attributes = {
  .name = "mControl_PIDTas",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for mCAN_Task */
osThreadId_t mCAN_TaskHandle;
const osThreadAttr_t mCAN_Task_attributes = {
  .name = "mCAN_Task",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void Control_PIDTask(void *argument);
void CAN_Task(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */
	 PID(&TPID, &speed, &PIDOut, &TempSetpoint, 4, 0, 3, _PID_P_ON_E, _PID_CD_DIRECT);
	      PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
	      PID_SetSampleTime(&TPID, 50);
	      PID_SetOutputLimits(&TPID, -1, 1);
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mControl_PIDTas */
  mControl_PIDTasHandle = osThreadNew(Control_PIDTask, NULL, &mControl_PIDTas_attributes);

  /* creation of mCAN_Task */
  mCAN_TaskHandle = osThreadNew(CAN_Task, NULL, &mCAN_Task_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_Control_PIDTask */
/**
  * @brief  Function implementing the mControl_PIDTas thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Control_PIDTask */
void Control_PIDTask(void *argument)
{
  /* USER CODE BEGIN Control_PIDTask */
  /* Infinite loop */
  for(;;)
  {
	  PWM += PIDOut;
	  VNH3SP30_SetSpeed(&driver,PWM);
	  Encoder_CaculateSpeed(&Enco,50);
	  speed=Get_Speed(&Enco);
	  PID_Compute(&TPID);
    osDelay(1);
  }
  /* USER CODE END Control_PIDTask */
}

/* USER CODE BEGIN Header_CAN_Task */
/**
* @brief Function implementing the mCAN_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_Task */
void CAN_Task(void *argument)
{
  /* USER CODE BEGIN CAN_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END CAN_Task */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

